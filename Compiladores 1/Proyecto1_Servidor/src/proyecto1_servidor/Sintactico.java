
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto1_servidor;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import proyecto1_servidor.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\005\000\002\045" +
    "\012\000\002\045\012\000\002\045\002\000\002\003\010" +
    "\000\002\055\002\000\002\046\014\000\002\056\002\000" +
    "\002\046\014\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\002\000\002\006" +
    "\004\000\002\006\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\054\003" +
    "\000\002\054\002\000\002\043\012\000\002\010\006\000" +
    "\002\011\004\000\002\011\006\000\002\047\005\000\002" +
    "\047\003\000\002\044\013\000\002\012\005\000\002\012" +
    "\007\000\002\013\004\000\002\013\004\000\002\053\004" +
    "\000\002\053\004\000\002\053\004\000\002\053\004\000" +
    "\002\053\002\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\016\005\000\002\016\004\000\002\016\002" +
    "\000\002\017\004\000\002\017\002\000\002\020\005\000" +
    "\002\021\013\000\002\022\006\000\002\022\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\002\000\002\026\003\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\027\002" +
    "\000\002\051\004\000\002\023\006\000\002\023\002\000" +
    "\002\024\011\000\002\024\002\000\002\030\011\000\002" +
    "\031\007\000\002\032\007\000\002\033\011\000\002\034" +
    "\015\000\002\035\011\000\002\041\007\000\002\041\005" +
    "\000\002\042\007\000\002\042\005\000\002\052\005\000" +
    "\002\052\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\020\027\004\041\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\045\ufffd\073\ufffd\001\002\000\004\061\337\001\002" +
    "\000\016\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\073" +
    "\011\001\002\000\004\002\007\001\002\000\004\002\001" +
    "\001\002\000\014\041\ufff3\042\016\043\017\044\013\045" +
    "\015\001\002\000\014\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\001\002\000\004\041\020\001\002\000\022\041" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\076\ufff5\001\002\000\004\002\000\001\002\000\022\041" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6" +
    "\076\ufff6\001\002\000\004\041\ufff7\001\002\000\022\041" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\076\ufff4\001\002\000\004\061\021\001\002\000\004\025" +
    "\022\001\002\000\054\026\ufff1\030\031\032\024\033\027" +
    "\034\053\035\040\037\044\040\025\042\033\043\017\044" +
    "\013\045\015\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\061\046\073\052\076\ufff3\001\002\000\060\026" +
    "\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\061\uffec" +
    "\065\uffec\073\uffec\076\uffec\001\002\000\004\022\331\001" +
    "\002\000\010\061\065\062\067\063\070\001\002\000\004" +
    "\026\326\001\002\000\004\022\310\001\002\000\060\026" +
    "\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\061\uffe7" +
    "\065\uffe7\073\uffe7\076\uffe7\001\002\000\004\022\265\001" +
    "\002\000\060\026\uffef\030\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef\043\uffef\044" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\061\uffef\065\uffef\073\uffef\076\uffef\001\002\000" +
    "\022\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\061\256\076\ufff7\001\002\000\004\017\255\001\002\000" +
    "\060\026\ufff1\030\031\032\024\033\027\034\053\035\040" +
    "\036\ufff1\037\044\040\025\042\033\043\017\044\013\045" +
    "\015\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\061\046\065\ufff1\073\052\076\ufff3\001\002\000\060\026" +
    "\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\061\uffea" +
    "\065\uffea\073\uffea\076\uffea\001\002\000\060\026\uffe4\030" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\061\uffe4\065\uffe4" +
    "\073\uffe4\076\uffe4\001\002\000\004\025\231\001\002\000" +
    "\060\026\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\061\ufff0\065\ufff0\073\ufff0\076\ufff0\001\002\000\060\026" +
    "\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\061\uffe6" +
    "\065\uffe6\073\uffe6\076\uffe6\001\002\000\060\026\uffee\030" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\061\uffee\065\uffee" +
    "\073\uffee\076\uffee\001\002\000\004\017\230\001\002\000" +
    "\004\010\176\001\002\000\012\010\uffdb\016\175\022\114" +
    "\061\217\001\002\000\020\046\146\047\150\050\151\051" +
    "\143\052\142\053\144\076\147\001\002\000\060\026\uffe5" +
    "\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\061\uffe5\065" +
    "\uffe5\073\uffe5\076\uffe5\001\002\000\060\026\uffe8\030\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\061\uffe8\065\uffe8\073" +
    "\uffe8\076\uffe8\001\002\000\060\026\uffe3\030\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\061\uffe3\065\uffe3\073\uffe3\076" +
    "\uffe3\001\002\000\004\022\056\001\002\000\060\026\uffeb" +
    "\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\061\uffeb\065" +
    "\uffeb\073\uffeb\076\uffeb\001\002\000\060\026\uffed\030\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\061\uffed\065\uffed\073" +
    "\uffed\076\uffed\001\002\000\004\050\060\001\002\000\004" +
    "\023\136\001\002\000\004\061\061\001\002\000\004\010" +
    "\062\001\002\000\010\061\065\062\067\063\070\001\002" +
    "\000\020\011\126\012\127\013\130\014\124\016\uffd1\017" +
    "\uffd1\023\uffd1\001\002\000\020\011\126\012\127\013\130" +
    "\014\124\016\uffd1\017\uffd1\023\uffd1\001\002\000\022\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\016\uffc1\017\uffc1\022\114" +
    "\023\uffc1\001\002\000\004\017\071\001\002\000\060\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\016\uffc0\017\uffc0\023\uffc0\024\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\074\uffc0\075\uffc0\001\002\000\060\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\016\uffbf\017\uffbf\023\uffbf\024\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\074\uffbf\075\uffbf\001\002\000\004\061\072\001\002\000" +
    "\040\004\100\005\073\006\101\007\076\010\102\011\077" +
    "\012\075\013\104\054\103\055\105\061\uffb3\062\uffb3\063" +
    "\uffb3\074\106\075\107\001\002\000\012\023\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\001\002\000\010\061\065\062\067\063" +
    "\070\001\002\000\012\023\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\001\002\000\012\023\uffba\061\uffba\062\uffba\063\uffba\001" +
    "\002\000\012\023\uffb7\061\uffb7\062\uffb7\063\uffb7\001\002" +
    "\000\012\023\uffbd\061\uffbd\062\uffbd\063\uffbd\001\002\000" +
    "\012\023\uffbe\061\uffbe\062\uffbe\063\uffbe\001\002\000\012" +
    "\023\uffbc\061\uffbc\062\uffbc\063\uffbc\001\002\000\012\023" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\001\002\000\012\023\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\001\002\000\012\023\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\001\002\000\012\023\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\001\002\000\012\023\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\001\002\000\004\017\111\001\002\000\004" +
    "\061\112\001\002\000\034\004\100\005\073\006\101\007" +
    "\076\010\102\011\077\012\075\013\104\023\uffb3\054\103" +
    "\055\105\074\106\075\107\001\002\000\004\023\uffa4\001" +
    "\002\000\012\023\115\061\065\062\067\063\070\001\002" +
    "\000\020\011\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f\017" +
    "\uff9f\023\uff9f\001\002\000\006\016\117\023\uff9d\001\002" +
    "\000\010\061\065\062\067\063\070\001\002\000\004\023" +
    "\121\001\002\000\020\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\016\uffa0\017\uffa0\023\uffa0\001\002\000\006\016\117\023" +
    "\uff9d\001\002\000\004\023\uff9e\001\002\000\010\061\065" +
    "\062\067\063\070\001\002\000\010\016\uffd7\017\uffd7\023" +
    "\uffd7\001\002\000\010\061\065\062\067\063\070\001\002" +
    "\000\010\061\065\062\067\063\070\001\002\000\010\061" +
    "\065\062\067\063\070\001\002\000\010\016\uffd3\017\uffd3" +
    "\023\uffd3\001\002\000\010\016\uffd4\017\uffd4\023\uffd4\001" +
    "\002\000\010\016\uffd5\017\uffd5\023\uffd5\001\002\000\010" +
    "\016\uffd2\017\uffd2\023\uffd2\001\002\000\010\016\uffd6\017" +
    "\uffd6\023\uffd6\001\002\000\004\025\137\001\002\000\054" +
    "\026\ufff1\030\031\032\024\033\027\034\053\035\040\037" +
    "\044\040\025\042\033\043\017\044\013\045\015\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\061\046\073" +
    "\052\076\ufff3\001\002\000\004\026\141\001\002\000\060" +
    "\026\uffa5\030\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\061" +
    "\uffa5\065\uffa5\073\uffa5\076\uffa5\001\002\000\010\061\uffcc" +
    "\062\uffcc\063\uffcc\001\002\000\010\061\uffce\062\uffce\063" +
    "\uffce\001\002\000\010\061\uffcb\062\uffcb\063\uffcb\001\002" +
    "\000\004\061\172\001\002\000\010\061\uffcd\062\uffcd\063" +
    "\uffcd\001\002\000\004\061\152\001\002\000\010\061\uffcf" +
    "\062\uffcf\063\uffcf\001\002\000\010\061\uffd0\062\uffd0\063" +
    "\uffd0\001\002\000\004\022\153\001\002\000\026\023\uffc8" +
    "\046\146\047\150\050\151\051\143\052\142\053\144\061" +
    "\157\062\067\063\070\001\002\000\006\016\161\023\uffc6" +
    "\001\002\000\004\023\164\001\002\000\010\061\157\062" +
    "\067\063\070\001\002\000\054\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\016\uffc1\023" +
    "\uffc1\024\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\074\uffc1\075\uffc1\001\002\000" +
    "\006\016\161\023\uffc6\001\002\000\026\023\uffc8\046\146" +
    "\047\150\050\151\051\143\052\142\053\144\061\157\062" +
    "\067\063\070\001\002\000\004\023\uffca\001\002\000\004" +
    "\023\uffc7\001\002\000\004\025\165\001\002\000\054\026" +
    "\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\037\ufff9" +
    "\040\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\061\ufff9\073\ufff9" +
    "\076\ufff9\001\002\000\054\026\ufff1\030\031\032\024\033" +
    "\027\034\053\035\040\037\044\040\025\042\033\043\017" +
    "\044\013\045\015\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\053\ufff3\061\046\073\052\076\ufff3\001\002\000\004" +
    "\026\170\001\002\000\060\026\ufff8\030\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\061\ufff8\065\ufff8\073\ufff8\076\ufff8" +
    "\001\002\000\004\023\uffc9\001\002\000\012\010\176\016" +
    "\175\017\uffdb\022\177\001\002\000\004\017\174\001\002" +
    "\000\060\026\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\061\uffdf\065\uffdf\073\uffdf\076\uffdf\001\002\000\004" +
    "\061\215\001\002\000\012\022\207\061\065\062\067\063" +
    "\070\001\002\000\026\023\uffc8\046\146\047\150\050\151" +
    "\051\143\052\142\053\144\061\157\062\067\063\070\001" +
    "\002\000\060\026\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\061\uffdd\065\uffdd\073\uffdd\076\uffdd\001\002\000" +
    "\004\023\202\001\002\000\004\025\203\001\002\000\054" +
    "\026\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\037" +
    "\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\061\ufffb\073" +
    "\ufffb\076\ufffb\001\002\000\054\026\ufff1\030\031\032\024" +
    "\033\027\034\053\035\040\037\044\040\025\042\033\043" +
    "\017\044\013\045\015\046\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\061\046\073\052\076\ufff3\001\002\000" +
    "\004\026\206\001\002\000\060\026\ufffa\030\ufffa\032\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\061\ufffa\065\ufffa\073\ufffa\076" +
    "\ufffa\001\002\000\010\061\065\062\067\063\070\001\002" +
    "\000\004\017\211\001\002\000\060\026\uffd9\030\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\061\uffd9\065\uffd9\073\uffd9" +
    "\076\uffd9\001\002\000\004\023\213\001\002\000\004\017" +
    "\214\001\002\000\060\026\uffd8\030\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\061\uffd8\065\uffd8\073\uffd8\076\uffd8\001" +
    "\002\000\010\010\uffdb\016\175\017\uffdb\001\002\000\006" +
    "\010\uffdc\017\uffdc\001\002\000\004\010\220\001\002\000" +
    "\004\070\221\001\002\000\004\061\222\001\002\000\004" +
    "\022\223\001\002\000\026\023\uffc8\046\146\047\150\050" +
    "\151\051\143\052\142\053\144\061\157\062\067\063\070" +
    "\001\002\000\004\023\225\001\002\000\004\017\226\001" +
    "\002\000\060\026\uffda\030\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda" +
    "\053\uffda\061\uffda\065\uffda\073\uffda\076\uffda\001\002\000" +
    "\060\026\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\061\uffde\065\uffde\073\uffde\076\uffde\001\002\000\060\026" +
    "\uffad\030\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\061\uffad" +
    "\065\uffad\073\uffad\076\uffad\001\002\000\054\026\ufff1\030" +
    "\031\032\024\033\027\034\053\035\040\037\044\040\025" +
    "\042\033\043\017\044\013\045\015\046\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\061\046\073\052\076\ufff3" +
    "\001\002\000\004\026\233\001\002\000\004\032\235\001" +
    "\002\000\060\026\uffa7\030\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\061\uffa7\065\uffa7\073\uffa7\076\uffa7\001\002\000" +
    "\004\022\236\001\002\000\010\061\157\062\067\063\070" +
    "\001\002\000\042\004\100\005\073\006\101\007\076\010" +
    "\102\011\077\012\075\013\104\023\uffc2\054\103\055\105" +
    "\061\uffb3\062\uffb3\063\uffb3\074\106\075\107\001\002\000" +
    "\004\023\241\001\002\000\004\017\242\001\002\000\060" +
    "\026\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\061" +
    "\uffa6\065\uffa6\073\uffa6\076\uffa6\001\002\000\010\061\157" +
    "\062\067\063\070\001\002\000\012\023\uffae\056\245\057" +
    "\250\060\246\001\002\000\010\061\157\062\067\063\070" +
    "\001\002\000\010\061\157\062\067\063\070\001\002\000" +
    "\004\023\uffc3\001\002\000\010\061\157\062\067\063\070" +
    "\001\002\000\004\023\uffb0\001\002\000\004\023\uffaf\001" +
    "\002\000\004\023\uffb1\001\002\000\010\026\ufff2\036\ufff2" +
    "\065\ufff2\001\002\000\060\026\uffe9\030\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\061\uffe9\065\uffe9\073\uffe9\076\uffe9" +
    "\001\002\000\004\022\257\001\002\000\026\023\uffc8\046" +
    "\146\047\150\050\151\051\143\052\142\053\144\061\157" +
    "\062\067\063\070\001\002\000\004\023\261\001\002\000" +
    "\004\025\262\001\002\000\054\026\ufff1\030\031\032\024" +
    "\033\027\034\053\035\040\037\044\040\025\042\033\043" +
    "\017\044\013\045\015\046\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\061\046\073\052\076\ufff3\001\002\000" +
    "\004\026\264\001\002\000\060\026\uffe0\030\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\061\uffe0\065\uffe0\073\uffe0\076" +
    "\uffe0\001\002\000\010\061\157\062\067\063\070\001\002" +
    "\000\004\023\267\001\002\000\004\025\270\001\002\000" +
    "\054\026\ufff1\030\031\032\024\033\027\034\053\035\040" +
    "\037\044\040\025\042\033\043\017\044\013\045\015\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\061\046" +
    "\073\052\076\ufff3\001\002\000\004\026\272\001\002\000" +
    "\064\026\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\061\uffa9\064\273\065\uffa9\073\uffa9\076\uffa9\001" +
    "\002\000\004\022\302\001\002\000\062\026\uffab\030\uffab" +
    "\031\276\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\061\uffab\065" +
    "\uffab\073\uffab\076\uffab\001\002\000\060\026\uffc4\030\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\061\uffc4\065\uffc4\073" +
    "\uffc4\076\uffc4\001\002\000\004\025\277\001\002\000\054" +
    "\026\ufff1\030\031\032\024\033\027\034\053\035\040\037" +
    "\044\040\025\042\033\043\017\044\013\045\015\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\061\046\073" +
    "\052\076\ufff3\001\002\000\004\026\301\001\002\000\060" +
    "\026\uffac\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\061" +
    "\uffac\065\uffac\073\uffac\076\uffac\001\002\000\010\061\157" +
    "\062\067\063\070\001\002\000\004\023\304\001\002\000" +
    "\004\025\305\001\002\000\054\026\ufff1\030\031\032\024" +
    "\033\027\034\053\035\040\037\044\040\025\042\033\043" +
    "\017\044\013\045\015\046\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\061\046\073\052\076\ufff3\001\002\000" +
    "\004\026\307\001\002\000\062\026\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\053\uffaa\061\uffaa\065\uffaa\073" +
    "\uffaa\076\uffaa\001\002\000\010\061\157\062\067\063\070" +
    "\001\002\000\004\023\312\001\002\000\004\025\313\001" +
    "\002\000\006\036\316\065\314\001\002\000\004\024\324" +
    "\001\002\000\004\026\323\001\002\000\010\061\157\062" +
    "\067\063\070\001\002\000\004\024\320\001\002\000\056" +
    "\030\031\032\024\033\027\034\053\035\040\036\ufff1\037" +
    "\044\040\025\042\033\043\017\044\013\045\015\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\061\046\065" +
    "\ufff1\073\052\076\ufff3\001\002\000\006\036\316\065\314" +
    "\001\002\000\004\026\uffa2\001\002\000\060\026\uffa3\030" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\061\uffa3\065\uffa3" +
    "\073\uffa3\076\uffa3\001\002\000\054\026\ufff1\030\031\032" +
    "\024\033\027\034\053\035\040\037\044\040\025\042\033" +
    "\043\017\044\013\045\015\046\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\061\046\073\052\076\ufff3\001\002" +
    "\000\004\026\uffa1\001\002\000\004\002\ufffc\001\002\000" +
    "\004\017\330\001\002\000\060\026\uffc5\030\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\061\uffc5\065\uffc5\073\uffc5\076" +
    "\uffc5\001\002\000\010\061\157\062\067\063\070\001\002" +
    "\000\004\023\333\001\002\000\004\025\334\001\002\000" +
    "\054\026\ufff1\030\031\032\024\033\027\034\053\035\040" +
    "\037\044\040\025\042\033\043\017\044\013\045\015\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\061\046" +
    "\073\052\076\ufff3\001\002\000\004\026\336\001\002\000" +
    "\060\026\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\061\uffa8\065\uffa8\073\uffa8\076\uffa8\001\002\000\004\015" +
    "\340\001\002\000\004\061\341\001\002\000\004\015\342" +
    "\001\002\000\006\014\343\061\344\001\002\000\004\017" +
    "\347\001\002\000\004\017\345\001\002\000\020\027\004" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\073\ufffd\001" +
    "\002\000\016\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\073\ufffe\001\002\000\020\027\004\041\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\073\ufffd\001\002\000\016\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\073\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\006\002\005\045\004\001\001\000\002\001" +
    "\001\000\004\054\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\013\005\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\034\005\046" +
    "\006\025\010\040\011\031\020\041\021\042\030\054\031" +
    "\022\033\053\035\035\042\033\043\050\044\027\046\047" +
    "\047\044\051\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\326\025\063\042\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\034\005\046\006\253\010\040\011\031\020" +
    "\041\021\042\030\054\031\022\033\053\035\035\042\033" +
    "\043\050\044\027\046\047\047\044\051\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\226\001\001\000\002\001\001\000\004" +
    "\007\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\065\025\063" +
    "\042\062\001\001\000\004\053\134\001\001\000\004\053" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\073\001\001\000\002\001\001\000\010\013\107\025\063" +
    "\042\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\112\001\001\000\002\001" +
    "\001\000\010\013\115\025\063\042\062\001\001\000\002" +
    "\001\001\000\004\052\117\001\001\000\010\013\121\025" +
    "\063\042\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\122\001\001\000\002\001\001\000\010\013" +
    "\133\025\063\042\062\001\001\000\002\001\001\000\010" +
    "\013\132\025\063\042\062\001\001\000\010\013\131\025" +
    "\063\042\062\001\001\000\010\013\130\025\063\042\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\034\005\046\006\137\010\040\011\031\020" +
    "\041\021\042\030\054\031\022\033\053\035\035\042\033" +
    "\043\050\044\027\046\047\047\044\051\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\155\016\154\025" +
    "\153\001\001\000\004\017\170\001\001\000\002\001\001" +
    "\000\004\025\157\001\001\000\002\001\001\000\004\017" +
    "\161\001\001\000\010\007\155\016\162\025\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\165\001\001\000\044\004\034\005\046\006\166" +
    "\010\040\011\031\020\041\021\042\030\054\031\022\033" +
    "\053\035\035\042\033\043\050\044\027\046\047\047\044" +
    "\051\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\215\001\001\000\010\013" +
    "\207\025\063\042\062\001\001\000\010\007\155\016\200" +
    "\025\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\203\001\001\000\044\004\034" +
    "\005\046\006\204\010\040\011\031\020\041\021\042\030" +
    "\054\031\022\033\053\035\035\042\033\043\050\044\027" +
    "\046\047\047\044\051\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\211\025\063\042\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\155\016\223\025\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\034" +
    "\005\046\006\231\010\040\011\031\020\041\021\042\030" +
    "\054\031\022\033\053\035\035\042\033\043\050\044\027" +
    "\046\047\047\044\051\036\001\001\000\002\001\001\000" +
    "\004\032\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\237\025\236\001\001\000\004\026\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\243\001\001\000\004\027\246\001\001\000" +
    "\006\022\252\025\236\001\001\000\006\022\251\025\236" +
    "\001\001\000\002\001\001\000\006\022\250\025\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\155\016\257\025\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\034\005\046\006\262\010" +
    "\040\011\031\020\041\021\042\030\054\031\022\033\053" +
    "\035\035\042\033\043\050\044\027\046\047\047\044\051" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\265\025\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\034\005\046\006\270\010\040\011\031" +
    "\020\041\021\042\030\054\031\022\033\053\035\035\042" +
    "\033\043\050\044\027\046\047\047\044\051\036\001\001" +
    "\000\002\001\001\000\004\024\273\001\001\000\002\001" +
    "\001\000\004\023\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\034\005\046\006\277\010\040\011" +
    "\031\020\041\021\042\030\054\031\022\033\053\035\035" +
    "\042\033\043\050\044\027\046\047\047\044\051\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\302" +
    "\025\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\034\005\046\006\305\010\040\011\031\020\041" +
    "\021\042\030\054\031\022\033\053\035\035\042\033\043" +
    "\050\044\027\046\047\047\044\051\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\316\001" +
    "\001\000\002\001\001\000\044\004\034\005\046\006\320" +
    "\010\040\011\031\020\041\021\042\030\054\031\022\033" +
    "\053\035\035\042\033\043\050\044\027\046\047\047\044" +
    "\051\036\001\001\000\004\041\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\034\005\046\006\324" +
    "\010\040\011\031\020\041\021\042\030\054\031\022\033" +
    "\053\035\035\042\033\043\050\044\027\046\047\047\044" +
    "\051\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\331\025\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\034\005\046\006\334\010\040\011\031\020\041\021\042" +
    "\030\054\031\022\033\053\035\035\042\033\043\050\044" +
    "\027\046\047\047\044\051\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\345\001\001\000\002\001\001\000" +
    "\004\045\347\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  /**---------------CUANDO HAY ERROR SINTACTICO IMPRIME EN CONSOLA-----------------**/
  public void syntax_error(Symbol  s){

Sintactico.error="Error Sintactico en la Linea "+(s.left+1) + " Y Columna "+s.right+". Identificador "
    +s.value+" "+s.sym+" no reconocido";  

    System.out.println("Error Sintactico en la Linea "+(s.left+1) + " Columna "+s.right+". Identificador "
    +s.value+" "+s.sym+" no reconocido");


  }

  /**----------------Si no es posible recuperacion de errores-----**/
  public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{

  }


      public static ArrayList<Object[]> Variables;
      public static ArrayList<Object[]> MetodosFunc;
      public static ArrayList<String> comentarios;
      public static int parametro=0;
      public static int lineas=0;
      public static String clase="";
   public static String error="";



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= importar comen cuerpo 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // importar ::= IMPORT IDENTIFICADOR PUNTO IDENTIFICADOR PUNTO MULTIPLICACION PUNTOCOMA importar 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importar",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // importar ::= IMPORT IDENTIFICADOR PUNTO IDENTIFICADOR PUNTO IDENTIFICADOR PUNTOCOMA importar 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importar",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importar ::= 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena; 

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importar",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= visibilidad CLASS IDENTIFICADOR LLAVEA lista LLAVEC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
Sintactico.lineas=0;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // metodofuncion ::= visibilidad tipo IDENTIFICADOR PARA parametro PARC LLAVEA NT$0 lista LLAVEC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Object[] dato=new Object[]{(String)n,(String)n1,(int)n2,(int)n3,Sintactico.clase};
Sintactico.MetodosFunc.add(dato);
Sintactico.parametro=0;
Sintactico.lineas=0;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodofuncion",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
Sintactico.lineas=0;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // metodofuncion ::= visibilidad VOID IDENTIFICADOR PARA parametro PARC LLAVEA NT$1 lista LLAVEC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
Object[] dato=new Object[]{"void",(String)n1,(int)n2,(int)n3,Sintactico.clase};
Sintactico.MetodosFunc.add(dato);
Sintactico.parametro=0;
Sintactico.lineas=0;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodofuncion",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("visibilidad",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // visibilidad ::= FINAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("visibilidad",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // visibilidad ::= PROTECTED 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("visibilidad",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("visibilidad",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // visibilidad ::= 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("visibilidad",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista ::= estructura lista 
            {
              Object RESULT =null;
		
 Sintactico.lineas=Sintactico.lineas+1;
  int li=Sintactico.lineas;
RESULT=li;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista ::= 
            {
              Object RESULT =null;
		
int li=Sintactico.lineas;
RESULT=li;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura ::= declaracion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estructura ::= asignacion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura ::= sentenciaif 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estructura ::= sentwhile 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estructura ::= sentenciadowhile 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // estructura ::= sentenciafor 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estructura ::= sentenciaswitch 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructura ::= llamadas PUNTOCOMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructura ::= constructor 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructura ::= declaobject 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura ::= retornar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estructura ::= metodofuncion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estructura ::= sentbreak 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estructura ::= COMENTARIO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  String comentario=(String)n;
                  Sintactico.comentarios.add(comentario);
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comen ::= COMENTARIO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
  String comentario=(String)n;
  Sintactico.comentarios.add(comentario);
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comen",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comen ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comen",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constructor ::= PUBLIC IDENTIFICADOR PARA parametro PARC LLAVEA lista LLAVEC 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("constructor",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion ::= visibilidad tipo varios PUNTOCOMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
  Object[] vari= new Object[]{(String)n,(String)n1,(String)n2,Sintactico.clase};
Sintactico.Variables.add(vari);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= varios expresion 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion ::= visibilidad tipo IDENTIFICADOR expresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
  Object[] dato=new Object[]{(String)n,(String)n1,(String)n2,Sintactico.clase};
  Sintactico.Variables.add(dato);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // varios ::= IDENTIFICADOR COMA varios 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n+","+(String)n2;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varios",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // varios ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varios",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaobject ::= IDENTIFICADOR IDENTIFICADOR IGUAL NEW IDENTIFICADOR PARA parametro PARC PUNTOCOMA 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaobject",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= IGUAL listaexp PUNTOCOMA 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= IGUAL PARA listaexp PARC PUNTOCOMA 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaexp ::= ctipo operador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexp",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaexp ::= llamadas operador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexp",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operador ::= MAS listaexp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operador ::= MENOS listaexp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operador ::= DIVISION listaexp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operador ::= MULTIPLICACION listaexp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operador ::= 
            {
              Object RESULT =null;
		
   String dato="";
   RESULT=dato;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= CHAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= OBJECT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro ::= tipo ctipo separador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
int resultado=1+(int)n;
RESULT=resultado;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametro ::= ctipo separador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
int resultado=1+(int)n;
RESULT=resultado;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametro ::= 
            {
              Object RESULT =null;
		
RESULT=0;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // separador ::= COMA parametro 
            {
              Object RESULT =null;
		
Sintactico.parametro=Sintactico.parametro+1;
int numero=Sintactico.parametro;
RESULT=numero;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("separador",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // separador ::= 
            {
              Object RESULT =null;
		
   int numero=Sintactico.parametro;
RESULT=numero;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("separador",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // retornar ::= RETURN listaexp PUNTOCOMA 
            {
              Object RESULT =null;
		
String adena="";
RESULT=adena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retornar",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentenciaif ::= IF PARA condicion PARC LLAVEA lista LLAVEC sentelseif sentelse 
            {
              Object RESULT =null;
		
String adena="";
RESULT=adena;
//System.out.println("funciona");

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaif",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion ::= ctipo simbolo ctipo partop 
            {
              Object RESULT =null;
		
String adena="";
RESULT=adena;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicion ::= ctipo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ctipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
String adena="";
RESULT=adena;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ctipo",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ctipo ::= DIGITO 
            {
              Object RESULT =null;
		
String adena="";
RESULT=adena;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ctipo",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ctipo ::= CADENA 
            {
              Object RESULT =null;
		
String adena="";
RESULT=adena;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ctipo",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simbolo ::= MAYOR 
            {
              Object RESULT =null;
		
 String dato=">";
 RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simbolo ::= MAYORIGUAL 
            {
              Object RESULT =null;
		
 String dato=">=";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simbolo ::= IGUAL 
            {
              Object RESULT =null;
		
 String dato="==";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simbolo ::= DISTINTO 
            {
              Object RESULT =null;
		
 String dato="!=";
  RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simbolo ::= MENOR 
            {
              Object RESULT =null;
		
 String dato="<";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simbolo ::= IGUALIGUAL 
            {
              Object RESULT =null;
		
 String dato="<";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simbolo ::= MENORIGUAL 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simbolo ::= MAS 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simbolo ::= INCREMENTO 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simbolo ::= MENOS 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simbolo ::= DECREMENTO 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simbolo ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simbolo ::= DIVISION 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // partop ::= AND condicion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            String dato="&& "+n1;
            RESULT=dato;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("partop",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // partop ::= OR condicion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            String dato="|| "+n1;
            RESULT=dato;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("partop",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // partop ::= NOT condicion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            String dato="!"+n1;
            RESULT=dato;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("partop",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // partop ::= 
            {
              Object RESULT =null;
		
            String dato="";
            RESULT=dato;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("partop",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentbreak ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentbreak",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentelse ::= ELSE LLAVEA lista LLAVEC 
            {
              Object RESULT =null;
		
String dato="";
RESULT=dato;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentelse",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentelse ::= 
            {
              Object RESULT =null;
		String dato="";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentelse",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentelseif ::= ELSEIF PARA condicion PARC LLAVEA lista LLAVEC 
            {
              Object RESULT =null;
		
String dato="";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentelseif",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentelseif ::= 
            {
              Object RESULT =null;
		String dato="";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentelseif",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentwhile ::= WHILE PARA condicion PARC LLAVEA lista LLAVEC 
            {
              Object RESULT =null;
		String dato="";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentwhile",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciadowhile ::= DO LLAVEA lista LLAVEC condiwhile 
            {
              Object RESULT =null;
		
String dato="";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciadowhile",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condiwhile ::= WHILE PARA condicion PARC PUNTOCOMA 
            {
              Object RESULT =null;
		 
String dato="";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condiwhile",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentenciafor ::= FOR PARA condicionfor PARC LLAVEA lista LLAVEC 
            {
              Object RESULT =null;
		 
String dato="";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciafor",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicionfor ::= INT IDENTIFICADOR IGUAL listaexp PUNTOCOMA IDENTIFICADOR simbolo listaexp PUNTOCOMA IDENTIFICADOR simbolo 
            {
              Object RESULT =null;
		 
String dato="";
System.out.println("funciona el for");
RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionfor",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentenciaswitch ::= SWITCH PARA ctipo PARC LLAVEA estructuraswitch LLAVEC 
            {
              Object RESULT =null;
		 
String dato="";
System.out.println("funciona");
RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaswitch",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // estructuraswitch ::= CASE ctipo DOSPUNTOS lista estructuraswitch 
            {
              Object RESULT =null;
		
String dato="";
RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraswitch",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // estructuraswitch ::= DEFAULT DOSPUNTOS lista 
            {
              Object RESULT =null;
		
String dato="";
RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraswitch",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // llamadas ::= IDENTIFICADOR PARA listaexp paraenvio PARC 
            {
              Object RESULT =null;
		
String dato="";
RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadas",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // llamadas ::= IDENTIFICADOR PARA PARC 
            {
              Object RESULT =null;
		
String dato="";
RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadas",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // paraenvio ::= COMA listaexp paraenvio 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paraenvio",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // paraenvio ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paraenvio",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
