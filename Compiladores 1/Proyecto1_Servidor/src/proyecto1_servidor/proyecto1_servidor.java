/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto1_servidor;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.JTextArea;

/**
 *
 * @author Carlos
 */
public class proyecto1_servidor extends javax.swing.JFrame implements Runnable {
    private int numeroLinea = 1;
        //--------------------------------------------Variables para el Socket---------------------------------------------
        Thread hilo;
        private static int PUERTO = 5000;
        String mensajeRecibido;
        ObjectInputStream entrada;
        Socket socket;
        ServerSocket serverSocket;
        String direccionJSON;
        //-------------------------------------------Analizador--------------------------------------------------------------
        Sintactico sintactico;
        Lexico lexico;
        //-------------------------------------------Variable para las comparaciones-----------------------------------------
        /*Variables*/
        ArrayList<Object[]> variables;
        ArrayList<Object[]> variables2;
        /*Metodos y Funciones*/
        ArrayList<Object[]> metodos;
        ArrayList<Object[]> metodos2;
        /*Comentarios*/
        ArrayList<String>comentarios;
        ArrayList<String>comentarios2;
        
        ArrayList<String> clasesProyect1;
        ArrayList<String> clasesProyect2;
        
        //-----------------------------------------------Repitencia--------------------
        ArrayList<Object[]> variablerepetida;
        ArrayList<Object[]> metodosrepetidos;
        ArrayList<Object[]> clasesrepetidas;
        ArrayList<String> comentariosrepetidos;
        
        //-----------------------------------------------Errores--------------------------
        ArrayList<String> errores;
    /**
     * Creates new form proyecto1_servidor
     */
    public proyecto1_servidor() {
        initComponents();
        empezarServidor();

    }
//------------------------------------------------------Posicion----------------------------------------------------------
     private void jTextArea2CaretUpdate(javax.swing.event.CaretEvent evt) {     
        JTextArea editArea = (JTextArea)evt.getSource();
        int linea = 1;
        int columna = 1;

        try {
          int caretpos = jTextArea2.getCaretPosition();
          linea= jTextArea2.getLineOfOffset(caretpos);
          columna = caretpos - jTextArea2.getLineStartOffset(linea);

          // Ya que las lÃ­neas las cuenta desde la 0
          linea += 1;
        } catch(Exception ex) { }
        actualizarEstado(linea, columna);
     }
     
     
     private void actualizarEstado(int linea, int columna) {
        jLabel3.setText("" + linea);
        jLabel4.setText("" + columna);
      }
     
     
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        cuerpo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cuerpo.setColumns(20);
        cuerpo.setRows(5);
        jScrollPane1.setViewportView(cuerpo);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("1");
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);
        jTextArea1.setLineWrap(true);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);
        jTextArea2.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextArea2CaretUpdate(evt);
            }
        });
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea2KeyTyped(evt);
            }
        });
        jTextArea2.setLineWrap(true);

        jLabel1.setText("Fila");

        jLabel2.setText("Columna");

        jLabel3.setText("0");

        jLabel4.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(862, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(109, 109, 109)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(proyecto1_servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(proyecto1_servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(proyecto1_servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(proyecto1_servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new proyecto1_servidor().setVisible(true);
            }
        });
    }

     private void jTextArea2KeyTyped(java.awt.event.KeyEvent evt) {                                    
        char tecla = evt.getKeyChar();
        if ((int) tecla == KeyEvent.VK_ENTER) {
            numeroLinea++;
            String num = jTextArea1.getText() + '\n' + numeroLinea;
            jTextArea1.setText(num);
        }
        if ((int) tecla == KeyEvent.VK_BACK_SPACE || (int) tecla == KeyEvent.VK_DELETE) {

            //El while es pos si se eliminan varias lineas a la vez
            while (numeroLinea > jTextArea2.getLineCount()) {
                String num = jTextArea1.getText();

                //Cuando el numero de lineas es solo un digito
                if (jTextArea2.getLineCount() < numeroLinea) {
                    if (numeroLinea < 10) {
                        num = num.substring(0, num.length() - 2);
                        jTextArea1.setText(num);
                        numeroLinea--;
                    }
                    //Cuando el numero de lineas son dos digitos
                    if (numeroLinea > 9 && numeroLinea < 100) {
                        num = num.substring(0, num.length() - 3);
                        jTextArea1.setText(num);
                        numeroLinea--;
                    }
                    //Cuando el numero de lineas son 3 digidos
                    if (numeroLinea > 99 && numeroLinea < 1000) {
                        num = num.substring(0, num.length() - 4);
                        jTextArea1.setText(num);
                        numeroLinea--;
                    }
                }
            }
        }
        //Por si se pegan varias lineas a la vez
        if ((int) tecla == 22) {
            while (numeroLinea < jTextArea2.getLineCount()) {
                numeroLinea++;
                String num = jTextArea1.getText() + '\n' + numeroLinea;
                jTextArea1.setText(num);
            }
        }        // TODO add your handling code here:
    }                                   

    
    
    
    
    //------------------------------------------------------------------------------------Empezar Servidor------------------------------------------------
    public void empezarServidor() {
        try{
            hilo=new Thread(this);
            hilo.start();
           serverSocket = new ServerSocket(PUERTO);
           socket= new Socket();
           jTextArea2.append("Esperando una conexión...");
           System.out.println("Esperando una conexión...");
        }catch(IOException e){}
    }

    @Override
    public void run() {
        while(true){
            try{
                try{
                    ArrayList<String> direccion= new ArrayList<String>();
                    socket = serverSocket.accept();
                    jTextArea2.append("Un cliente se ha conectado.");
                    System.out.println("Un cliente se ha conectado.");
                    //Canales de entrada y salida de datos
                    System.out.println("Confirmando conexion al cliente....");
                    //-----------------------Inicializar Varibles--------------
                    /*variables*/
                    variables=new ArrayList<Object[]>();
                    variables2=new ArrayList<Object[]>();
                    /*Metodos*/
                    metodos=new ArrayList<Object[]>();
                    metodos2=new ArrayList<Object[]>();
                    /*Comentarios*/
                    comentarios=new ArrayList<String>();
                    comentarios2=new ArrayList<String>();
                    
                    clasesProyect1=new ArrayList<String>();
                    clasesProyect2=new ArrayList<String>();
                    //---------------------------Repitencia--------------------------
                    variablerepetida=new ArrayList<Object[]>();
                    metodosrepetidos=new ArrayList<Object[]>();
                    clasesrepetidas=new ArrayList<Object[]>();
                    comentariosrepetidos=new ArrayList<String>();
                    //-----------------canales de entrada y salida de datos-------------------
                    errores=new ArrayList<String>();
                    
                    entrada= new ObjectInputStream(socket.getInputStream());
                    Object objeto=entrada.readObject();
                    direccion=(ArrayList<String>)objeto;
                    //----------------Listamos los archivos de las carpetas-------------------------------------------
                    listarArchivos(direccion.get(0),direccion.get(1));
                    guardarJSON();
                    mostrarVariables();
                    System.out.println("regresando mensaje");
                    //------------------------------regresar una respuesta-----------------------------
                    ObjectOutputStream oos=new ObjectOutputStream(socket.getOutputStream());
                    oos.writeObject(direccionJSON);
                    jTextArea2.append("Cerrando conexión...");
                    System.out.println("Cerrando conexión...");
                    socket.close();//Aqui se cierra la conexión con el cliente
                }catch(Exception e){}
                Thread.sleep(1000);
            }catch(InterruptedException e){}
        }
           
    }
    
    public void listarArchivos(String direccion,String direccion2){
        //---------------------------------------------------Carpeta 1----------------------------------------------------
        jTextArea2.setText("");
        String files="";
        File folder= new File(direccion);
        File[] listaofFiles=folder.listFiles();
        for(int i=0;i<listaofFiles.length;i++){
            if(listaofFiles[i].isFile()){
                files=direccion+"\\"+listaofFiles[i].getName();
                if (files.endsWith(".java")){
                    String texto=convertirTxt(files);
                    try{
                        //----------------------------------Analizador Lexico Sintactico---------------------------------------------------
                        Reader reader=new BufferedReader(new FileReader(texto));
                        lexico=new Lexico(reader);
                        sintactico= new Sintactico(lexico);
                        /*----------clases------------*/
                        clasesProyect1.add(getName(listaofFiles[i].getName()));
                        /*Variables*/
                        Sintactico.Variables= new ArrayList<Object[]>();
                        /*Metodos*/
                        Sintactico.MetodosFunc= new ArrayList<Object[]>();
                        
                        /*Comentarios*/
                        Sintactico.comentarios=new ArrayList<String>();
                        
                        /*Inilizacion*/
                            Sintactico.clase=getName(listaofFiles[i].getName());
                            Sintactico.parametro=0;
                            Sintactico.lineas=0;
                            Sintactico.error="";
                        sintactico.parse();
                        jTextArea2.append(files+"\n");
                        errores.add(Sintactico.error);
                        jTextArea2.append(Sintactico.error+"\n");
                        /*Variables*/
                        for(int j=0;j<Sintactico.Variables.size();j++){
                            variables.add(Sintactico.Variables.get(j));
                        }
                        for(int j=0;j<Sintactico.MetodosFunc.size();j++){
                            /*Metodos*/
                            metodos.add(Sintactico.MetodosFunc.get(j));
                        }
                        /*Comentarios*/
                        for(int j=0;j<Sintactico.comentarios.size();j++){
                            comentarios.add(Sintactico.comentarios.get(j));
                        }
                    }catch(Exception ex){}

                }
            }
        }
        
        
        //------------------------Carpeta2---------------------------------------------------------------------------
        files="";
        folder= new File(direccion2);
        listaofFiles=folder.listFiles();
        for(int i=0;i<listaofFiles.length;i++){
            if(listaofFiles[i].isFile()){
                files=direccion2+"\\"+listaofFiles[i].getName();
                if (files.endsWith(".java")){
                    String texto=convertirTxt(files);
                    try{
                            //----------------------------------Analizador Lexico Sintactico---------------------------------------------------
                            Reader reader=new BufferedReader(new FileReader(texto));
                            lexico=new Lexico(reader);
                            sintactico= new Sintactico(lexico);
                            /*----------clases------------*/
                            clasesProyect2.add(getName(listaofFiles[i].getName()));
                             /*Variables*/
                            Sintactico.Variables= new ArrayList<Object[]>();
                            /*Metodos*/
                            Sintactico.MetodosFunc= new ArrayList<Object[]>();
                            /*Comentarios*/
                            Sintactico.comentarios=new ArrayList<String>();
                            /*Inilizacion*/
                            Sintactico.clase=getName(listaofFiles[i].getName());
                            Sintactico.parametro=0;
                            Sintactico.error="";
                            Sintactico.lineas=0;
                            
                            sintactico.parse();
                            jTextArea2.append(files+"\n");
                            errores.add(Sintactico.error);
                            jTextArea2.append(Sintactico.error+"\n");
                            /*Variables*/
                            for(int j=0;j<Sintactico.Variables.size();j++){
                                variables2.add(Sintactico.Variables.get(j));
                            }
                            for(int j=0;j<Sintactico.MetodosFunc.size();j++){
                                /*Metodos*/
                                metodos2.add(Sintactico.MetodosFunc.get(j));
                            }
                            /*Comentarios*/
                            for(int j=0;j<Sintactico.comentarios.size();j++){
                                comentarios2.add(Sintactico.comentarios.get(j));
                            }
                    }catch(Exception ex){}

                }
            }
        }        
        //----------------------------------Hacer Busquedas de variables-----------------------------
        buscarVariables();
        
        //--------------------------------- Hacer Busquedas de metodos/funcioness-----------------------------
        buscarMetodos();
        
        //----------------------------------- Buscar Clases------------------------------------------------------
        buscarClases(direccion,direccion2);
        //---------------------------------------Buscar Comentarios Iguales-----------------
        buscarComentarios();
        //-----------------------------------------HTML DE ERRORES--------------------------
        crearHTML();
    }
    
    
    //--------------------------------------------------Convertir java a txt-----------------------------------------------------------
    String convertirTxt(String fileName){
        String outputFileName = String.format("%s.txt", fileName.replace('.', '_'));
           BufferedReader br = null;
           try{
		File fileDir = new File(fileName);
                br = new BufferedReader(new InputStreamReader(new FileInputStream(fileDir), "UTF-8"));
                cuerpo.read(br, null);     
                File fichero=new File(outputFileName);
                PrintWriter writer;
                try{
                    writer = new PrintWriter(fichero);
                    writer.print(cuerpo.getText());
                    writer.close();
            
                }catch(FileNotFoundException ex){ }
		}catch(Exception ex){
                    ex.printStackTrace();
		}
        return outputFileName;
            }
    
    //-----------------------------------Obtener el Nombre de la clase-------------------------
    String getName(String name){
        int pos = name.lastIndexOf(".");
        if (pos > 0) {
            name = name.substring(0, pos);
        }
        return name;
    }
    
    void mostrarVariables(){
        for(int i=0;i<comentariosrepetidos.size();i++){
            System.out.println(comentariosrepetidos.get(i));
        }
    }
    
    //-------------------------------------------Busca las repitencias en las variables-----------------
    void buscarVariables(){
       for(int i=0;i<variables.size();i++){
           Object[] dato=variables.get(i);
           String tipo=(String)dato[1];
           String nombre=(String)dato[2];
           
           for(int j=0;j<variables2.size();j++){
               Object[] dato2=variables2.get(j);
               String tipo2=(String)dato2[1];
               String nombre2=(String)dato2[2];
               if(tipo.equals(tipo2) && nombre.equals(nombre2)){
                   Object[] guardar=new Object[]{tipo,nombre,(String)dato2[3]};
                   variablerepetida.add(guardar);
               }
           }
       } 
    }
    
    //------------------------------------------Busca las repitencias en los metodo o funciones----------------------------
    void buscarMetodos(){
        for(int i=0;i<metodos.size();i++){
            Object[] dato=metodos.get(i);
            String tipo=(String)dato[0];
            String nombre=(String)dato[1];
            int parametros=(int)dato[2];
            int lineas=(int)dato[3];
            String clase=(String)dato[4];
            for(int j=0;j<metodos2.size();j++){
                 Object[] dato2=metodos2.get(j);
                String tipo2=(String)dato2[0];
                String nombre2=(String)dato2[1];
                int parametros2=(int)dato2[2];
                int lineas2=(int)dato2[3];
                String clase2=(String)dato2[4];
                
                if(tipo.equals(tipo2) && nombre.equals(nombre2)){
                    if(parametros==parametros2 && lineas==lineas2){
                        Object[] data=new Object[]{tipo,nombre,parametros,lineas,clase+clase2};
                        metodosrepetidos.add(data);
                    }
                }
            }
        }
    }
    //-------------------------------------------Guardar JSon-------------------------------------------------
 
    //-------------------------------------------Buscar Clases------------------------------------------------------------
    void buscarClases(String direccion,String direccion2){
       //----------------------------------Clases 1-----------------------------
       for(int i=0;i<clasesProyect1.size();i++){
           String clase1=clasesProyect1.get(i);
           for(int j=0;j<clasesProyect2.size();j++){
               int metodos=elementosPro1(clase1);
               String comun=clase1+clasesProyect2.get(j);
               int cant=elementosComun(comun);
               if(cant==metodos && cant!=0){
                   Object[] guardar=new Object[]{clase1,clasesProyect2.get(j)};
                   clasesrepetidas.add(guardar);
               }
           }
       }
    }
    
    //---------------------------Busca los metodos de las clases---------------------
    int elementosPro1(String clase){
        int contador=0;
        for(int i=0;i<metodos.size();i++){
            Object[] datos=metodos.get(i);
            String name=(String)datos[4];
            if(name.equals(clase)) contador++;
        }
        return contador;
    }
    
    //----------------------------Busca la cantidad de metodos repetido---------------
    int elementosComun(String clase){
        int elementos=0;
        for(int i=0;i<metodosrepetidos.size();i++){
            Object[] data=metodosrepetidos.get(i);
            String clas=(String)data[4];
            if(clas.equals(clase)) elementos++;
        }
        return elementos;
    }
    
    //----------------------------Buscar Comentarios------------------------------------------
    void buscarComentarios(){
        for(int i=0;i<comentarios.size();i++){
            String comentario1=comentarios.get(i);
            for(int j=0;j<comentarios2.size();j++){
                String comentario2=comentarios2.get(j);
                if(comentario1.equals(comentario2)){
                    String reemplazo=comentario1.replace("/", "");
                    String reemplazo2=reemplazo.replace("*", "");
                    comentariosrepetidos.add(reemplazo2);
                }
            }
        }
    }
    
    //-----------------------------------Devuelve la cantidad de elementos

    
    void guardarJSON(){
        FileWriter writer=null;
        File miDir = new File (".");
        try{
            direccionJSON=miDir.getCanonicalPath()+"\\resultado.json";
            writer=new FileWriter("resultado.json");
            BufferedWriter bw=new BufferedWriter(writer);
            //------------------------------------------------Score-----------------------------------------
            double cr=(double)comentariosrepetidos.size();
            double sc=comentarios.size()+comentarios2.size();
            
            double vr=variablerepetida.size();
            double sv=variables.size()+variables2.size();
            
            double mr=metodosrepetidos.size();
            double sm=metodos.size()+metodos2.size();
            
            double car=clasesrepetidas.size();
            double sca=clasesProyect1.size()+clasesProyect2.size();
            
            
            double score=((cr/sc)*0.25)+((vr/sv)*0.25)+((mr/sm)*0.25)+((car/sca)*0.25);
            bw.write("{ \"score\":["+score+"],\n");
            
            //--------------------------------Clases-------------------------------------------
            bw.write("\"Clases\":[");
            for(int i=0;i<clasesrepetidas.size();i++){
                Object[] dato=clasesrepetidas.get(i);
                String clase1=(String)dato[0];
                String clase2=(String)dato[1];
                bw.write("{\"Nombre\": \""+clase1+"\",\"Nombre2\": \""+clase2+"\"}");
                if(!(i+1==clasesrepetidas.size())) bw.write(",");
            }
            bw.write("],\n");
            //--------------------------------Variables Repetidas-----------------------------------------
            bw.write("\"Variables\":[");
           
            
            for(int i=0;i<variablerepetida.size();i++){ 
                String tipo;
                String nombre;
                String clase;
                Object[] dato=variablerepetida.get(i);
                tipo=String.valueOf(dato[0]);
                nombre=String.valueOf(dato[1]);
                clase=String.valueOf(dato[2]);

                bw.write("{\"Nombre\": \""+nombre+"\",\"Tipo\": \""+tipo+"\",\"Clase\": \""+clase+"\"}");
                if(!(i+1==variablerepetida.size())) bw.write(",");
            }

            bw.write("],\n");
            
            //----------------------------------------Metodos y Funciones------------------------------
            bw.write("\"Metodos\":[");
            for(int i=0;i<metodosrepetidos.size();i++){
                Object[] dato=metodosrepetidos.get(i);
                String tipo=(String)dato[0];
                String nombre=(String)dato[1];
                String parametros=String.valueOf((int)dato[2]);
                String lineas=String.valueOf((int)dato[3]);
                bw.write("{\"Nombre\": \""+nombre+"\",\"Tipo\": \""+tipo+"\",\"Parametros\": \""+parametros+"\",\"Lineas\": \""+lineas+"\"}");
                if(!(i+1==metodosrepetidos.size())) bw.write(",");
            }
            bw.write("],\n");
            //-------------------------------------------Comentarios--------------------------------------
            bw.write("\"Comentarios\":[");
            for(int i=0;i<comentariosrepetidos.size();i++){
                bw.write("{\"texto\": \""+comentariosrepetidos.get(i)+"\"}");
                if(!(i+1==comentariosrepetidos.size())) bw.write(",");
            }
            bw.write("]\n}");
            bw.close();
            
        }catch(IOException e){
            System.out.println(e.getMessage());
        }
       
    }
    
    
    //-----------------------------------------crea el html---------------------------------
    public void crearHTML(){
        String ruta="Errores.html";
               File archivo1 = new File(ruta);
            String salida = "";
            salida += "<center><b><h1>Lista de Errores</h1></b></center><center><table border=\"1\" style=\"BORDER:DOUBLE 10PX Black\">"
                    + "<tr style=\"font-weight:bold\"><td>No.</td><td>Descripcion del Error</td></tr>";
            for(int i=0;i<errores.size();i++){
                salida += "<tr><td>" + i + "</td><td>" +errores.get(i) + "</td></tr>";
            }
            salida += "</table></center>";
            BufferedWriter archivo;
            try{
            archivo= new BufferedWriter(new FileWriter(archivo1));
            archivo.write(salida);
            archivo.close(); 
            }catch(IOException e){}

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea cuerpo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
