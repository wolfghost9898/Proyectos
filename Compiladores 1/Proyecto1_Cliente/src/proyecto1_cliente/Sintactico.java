
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto1_cliente;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import proyecto1_cliente.*;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.JSONParser;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\002\006\000\002\006" +
    "\007\000\002\007\010\000\002\007\002\000\002\026\004" +
    "\000\002\026\002\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\002\000\002" +
    "\010\010\000\002\010\002\000\002\003\004\000\002\003" +
    "\002\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\002" +
    "\000\002\027\005\000\002\031\004\000\002\031\002\000" +
    "\002\030\003\000\002\030\004\000\002\030\003\000\002" +
    "\030\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\053\002" +
    "\000\002\032\005\000\002\054\002\000\002\032\006\000" +
    "\002\033\006\000\002\033\005\000\002\035\004\000\002" +
    "\035\002\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\007" +
    "\000\002\036\007\000\002\036\007\000\002\036\007\000" +
    "\002\036\007\000\002\036\005\000\002\036\004\000\002" +
    "\036\004\000\002\036\003\000\002\036\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\050\007\000\002\050\007\000" +
    "\002\050\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\006\000\002\051\003\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\055\002\000\002\047\007\000" +
    "\002\046\005\000\002\046\005\000\002\046\012\000\002" +
    "\046\012\000\002\046\012\000\002\046\007\000\002\046" +
    "\007\000\002\046\005\000\002\046\012\000\002\046\012" +
    "\000\002\046\012\000\002\046\012\000\002\046\007\000" +
    "\002\046\007\000\002\046\005\000\002\046\012\000\002" +
    "\046\007\000\002\046\007\000\002\011\013\000\002\012" +
    "\010\000\002\023\004\000\002\023\002\000\002\015\010" +
    "\000\002\024\004\000\002\024\004\000\002\024\002\000" +
    "\002\014\007\000\002\013\007\000\002\017\010\000\002" +
    "\021\007\000\002\020\005\000\002\016\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\004\004\004\001\002\000\004\050\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\005\ufff4\050\046\001\002\000\004\006\011\001" +
    "\002\000\004\047\012\001\002\000\006\022\ufffd\050\013" +
    "\001\002\000\004\011\016\001\002\000\004\022\015\001" +
    "\002\000\006\005\uffff\050\uffff\001\002\000\014\037\023" +
    "\040\021\043\020\044\022\047\ufff6\001\002\000\004\047" +
    "\040\001\002\000\004\041\035\001\002\000\004\041\032" +
    "\001\002\000\004\041\027\001\002\000\004\041\024\001" +
    "\002\000\004\045\025\001\002\000\016\037\023\040\021" +
    "\043\020\044\022\046\ufff6\047\ufff6\001\002\000\006\046" +
    "\ufff7\047\ufff7\001\002\000\004\036\030\001\002\000\016" +
    "\037\023\040\021\043\020\044\022\046\ufff6\047\ufff6\001" +
    "\002\000\006\046\ufff9\047\ufff9\001\002\000\004\054\033" +
    "\001\002\000\016\037\023\040\021\043\020\044\022\046" +
    "\ufff6\047\ufff6\001\002\000\006\046\ufffa\047\ufffa\001\002" +
    "\000\004\036\036\001\002\000\016\037\023\040\021\043" +
    "\020\044\022\046\ufff6\047\ufff6\001\002\000\006\046\ufff8" +
    "\047\ufff8\001\002\000\006\025\ufffb\052\042\001\002\000" +
    "\004\025\044\001\002\000\006\025\ufffb\052\042\001\002" +
    "\000\004\025\ufffc\001\002\000\004\022\ufffe\001\002\000" +
    "\004\005\u0121\001\002\000\004\007\047\001\002\000\014" +
    "\037\023\040\021\043\020\044\022\047\ufff6\001\002\000" +
    "\004\047\051\001\002\000\050\023\ufff2\050\054\052\076" +
    "\054\055\064\057\077\103\100\052\101\053\115\074\116" +
    "\065\121\064\122\071\123\072\124\075\125\060\126\077" +
    "\127\070\130\066\131\063\001\002\000\052\023\uffdd\032" +
    "\uffdd\050\uffdd\052\uffdd\054\uffdd\064\uffdd\077\uffdd\100\uffdd" +
    "\101\uffdd\115\uffdd\116\uffdd\121\uffdd\122\uffdd\123\uffdd\124" +
    "\uffdd\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd\001\002" +
    "\000\052\023\uffdc\032\uffdc\050\uffdc\052\uffdc\054\uffdc\064" +
    "\uffdc\077\uffdc\100\uffdc\101\uffdc\115\uffdc\116\uffdc\121\uffdc" +
    "\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130" +
    "\uffdc\131\uffdc\001\002\000\016\010\313\012\315\016\320" +
    "\017\317\020\316\021\314\001\002\000\052\023\uffea\032" +
    "\uffea\050\uffea\052\uffea\054\uffea\064\uffea\077\uffea\100\uffea" +
    "\101\uffea\115\uffea\116\uffea\121\uffea\122\uffea\123\uffea\124" +
    "\uffea\125\uffea\126\uffea\127\uffea\130\uffea\131\uffea\001\002" +
    "\000\004\023\312\001\002\000\026\051\123\052\121\064" +
    "\uffc5\065\114\066\113\067\106\070\122\073\124\074\107" +
    "\113\117\001\002\000\052\023\uffe3\032\uffe3\050\uffe3\052" +
    "\uffe3\054\uffe3\064\uffe3\077\uffe3\100\uffe3\101\uffe3\115\uffe3" +
    "\116\uffe3\121\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\126" +
    "\uffe3\127\uffe3\130\uffe3\131\uffe3\001\002\000\052\023\ufff1" +
    "\032\ufff1\050\ufff1\052\ufff1\054\ufff1\064\ufff1\077\ufff1\100" +
    "\ufff1\101\ufff1\115\ufff1\116\ufff1\121\ufff1\122\ufff1\123\ufff1" +
    "\124\ufff1\125\ufff1\126\ufff1\127\ufff1\130\ufff1\131\ufff1\001" +
    "\002\000\052\023\ufff0\032\ufff0\050\ufff0\052\ufff0\054\ufff0" +
    "\064\ufff0\077\ufff0\100\ufff0\101\ufff0\115\ufff0\116\ufff0\121" +
    "\ufff0\122\ufff0\123\ufff0\124\ufff0\125\ufff0\126\ufff0\127\ufff0" +
    "\130\ufff0\131\ufff0\001\002\000\052\023\uffdf\032\uffdf\050" +
    "\uffdf\052\uffdf\054\uffdf\064\uffdf\077\uffdf\100\uffdf\101\uffdf" +
    "\115\uffdf\116\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125" +
    "\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000\052" +
    "\023\uffe7\032\uffe7\050\uffe7\052\uffe7\054\uffe7\064\uffe7\077" +
    "\uffe7\100\uffe7\101\uffe7\115\uffe7\116\uffe7\121\uffe7\122\uffe7" +
    "\123\uffe7\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131" +
    "\uffe7\001\002\000\052\023\uffe9\032\uffe9\050\uffe9\052\uffe9" +
    "\054\uffe9\064\uffe9\077\uffe9\100\uffe9\101\uffe9\115\uffe9\116" +
    "\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9\125\uffe9\126\uffe9" +
    "\127\uffe9\130\uffe9\131\uffe9\001\002\000\052\023\uffe0\032" +
    "\uffe0\050\uffe0\052\uffe0\054\uffe0\064\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\115\uffe0\116\uffe0\121\uffe0\122\uffe0\123\uffe0\124" +
    "\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\001\002" +
    "\000\052\023\ufff2\032\ufff2\050\054\052\076\054\055\064" +
    "\057\077\103\100\052\101\053\115\074\116\065\121\064" +
    "\122\071\123\072\124\075\125\060\126\077\127\070\130" +
    "\066\131\063\001\002\000\052\023\uffe1\032\uffe1\050\uffe1" +
    "\052\uffe1\054\uffe1\064\uffe1\077\uffe1\100\uffe1\101\uffe1\115" +
    "\uffe1\116\uffe1\121\uffe1\122\uffe1\123\uffe1\124\uffe1\125\uffe1" +
    "\126\uffe1\127\uffe1\130\uffe1\131\uffe1\001\002\000\052\023" +
    "\uffe6\032\uffe6\050\uffe6\052\uffe6\054\uffe6\064\uffe6\077\uffe6" +
    "\100\uffe6\101\uffe6\115\uffe6\116\uffe6\121\uffe6\122\uffe6\123" +
    "\uffe6\124\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6" +
    "\001\002\000\052\023\uffe5\032\uffe5\050\uffe5\052\uffe5\054" +
    "\uffe5\064\uffe5\077\uffe5\100\uffe5\101\uffe5\115\uffe5\116\uffe5" +
    "\121\uffe5\122\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5\127" +
    "\uffe5\130\uffe5\131\uffe5\001\002\000\052\023\uffef\032\uffef" +
    "\050\uffef\052\uffef\054\uffef\064\uffef\077\uffef\100\uffef\101" +
    "\uffef\115\uffef\116\uffef\121\uffef\122\uffef\123\uffef\124\uffef" +
    "\125\uffef\126\uffef\127\uffef\130\uffef\131\uffef\001\002\000" +
    "\052\023\uffe8\032\uffe8\050\uffe8\052\uffe8\054\uffe8\064\uffe8" +
    "\077\uffe8\100\uffe8\101\uffe8\115\uffe8\116\uffe8\121\uffe8\122" +
    "\uffe8\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8\130\uffe8" +
    "\131\uffe8\001\002\000\052\023\uffe4\032\uffe4\050\uffe4\052" +
    "\uffe4\054\uffe4\064\uffe4\077\uffe4\100\uffe4\101\uffe4\115\uffe4" +
    "\116\uffe4\121\uffe4\122\uffe4\123\uffe4\124\uffe4\125\uffe4\126" +
    "\uffe4\127\uffe4\130\uffe4\131\uffe4\001\002\000\052\023\uffeb" +
    "\032\uffeb\050\uffeb\052\uffeb\054\uffeb\064\uffeb\077\uffeb\100" +
    "\uffeb\101\uffeb\115\uffeb\116\uffeb\121\uffeb\122\uffeb\123\uffeb" +
    "\124\uffeb\125\uffeb\126\uffeb\127\uffeb\130\uffeb\131\uffeb\001" +
    "\002\000\052\023\uffe2\032\uffe2\050\uffe2\052\uffe2\054\uffe2" +
    "\064\uffe2\077\uffe2\100\uffe2\101\uffe2\115\uffe2\116\uffe2\121" +
    "\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2" +
    "\130\uffe2\131\uffe2\001\002\000\052\023\uffee\032\uffee\050" +
    "\uffee\052\uffee\054\uffee\064\uffee\077\uffee\100\uffee\101\uffee" +
    "\115\uffee\116\uffee\121\uffee\122\uffee\123\uffee\124\uffee\125" +
    "\uffee\126\uffee\127\uffee\130\uffee\131\uffee\001\002\000\052" +
    "\023\uffed\032\uffed\050\uffed\052\uffed\054\uffed\064\uffed\077" +
    "\uffed\100\uffed\101\uffed\115\uffed\116\uffed\121\uffed\122\uffed" +
    "\123\uffed\124\uffed\125\uffed\126\uffed\127\uffed\130\uffed\131" +
    "\uffed\001\002\000\052\023\uffdb\032\uffdb\050\uffdb\052\uffdb" +
    "\054\uffdb\064\uffdb\077\uffdb\100\uffdb\101\uffdb\115\uffdb\116" +
    "\uffdb\121\uffdb\122\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb" +
    "\127\uffdb\130\uffdb\131\uffdb\001\002\000\052\023\uffde\032" +
    "\uffde\050\uffde\052\uffde\054\uffde\064\uffde\077\uffde\100\uffde" +
    "\101\uffde\115\uffde\116\uffde\121\uffde\122\uffde\123\uffde\124" +
    "\uffde\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde\001\002" +
    "\000\052\023\uffec\032\uffec\050\uffec\052\uffec\054\uffec\064" +
    "\uffec\077\uffec\100\uffec\101\uffec\115\uffec\116\uffec\121\uffec" +
    "\122\uffec\123\uffec\124\uffec\125\uffec\126\uffec\127\uffec\130" +
    "\uffec\131\uffec\001\002\000\006\023\ufff3\032\ufff3\001\002" +
    "\000\004\052\uffbe\001\002\000\004\052\uffbc\001\002\000" +
    "\004\064\311\001\002\000\026\051\123\052\121\064\uffc5" +
    "\065\114\066\113\067\106\070\122\073\124\074\107\113" +
    "\117\001\002\000\004\062\307\001\002\000\004\052\uffbf" +
    "\001\002\000\004\052\uffc0\001\002\000\004\062\306\001" +
    "\002\000\026\051\uffc4\052\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\067\uffc4\070\uffc4\073\uffc4\074\uffc4\113\uffc4\001\002\000" +
    "\004\056\uff92\001\002\000\004\052\uffbb\001\002\000\006" +
    "\041\uffb9\062\uffb9\001\002\000\004\060\125\001\002\000" +
    "\026\051\uffc2\052\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\070\uffc2\073\uffc2\074\uffc2\113\uffc2\001\002\000\004\052" +
    "\uffbd\001\002\000\012\121\130\122\127\125\131\126\126" +
    "\001\002\000\046\046\uff82\047\uff82\050\uff82\057\uff82\060" +
    "\157\061\uff82\062\uff82\071\160\077\uff82\100\uff82\101\uff82" +
    "\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82\107\uff82\114" +
    "\uff82\001\002\000\046\046\uff8f\047\uff8f\050\uff8f\057\uff8f" +
    "\060\145\061\uff8f\062\uff8f\071\146\077\uff8f\100\uff8f\101" +
    "\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f" +
    "\114\uff8f\001\002\000\042\046\uff90\047\uff90\050\uff90\057" +
    "\uff90\061\uff90\062\uff90\077\uff90\100\uff90\101\uff90\102\uff90" +
    "\103\uff90\104\uff90\105\uff90\106\uff90\107\uff90\114\uff90\001" +
    "\002\000\046\046\uff89\047\uff89\050\uff89\057\uff89\060\132" +
    "\061\uff89\062\uff89\071\133\077\uff89\100\uff89\101\uff89\102" +
    "\uff89\103\uff89\104\uff89\105\uff89\106\uff89\107\uff89\114\uff89" +
    "\001\002\000\006\123\144\124\143\001\002\000\004\053" +
    "\134\001\002\000\004\072\135\001\002\000\004\060\136" +
    "\001\002\000\012\123\140\127\141\131\142\132\137\001" +
    "\002\000\042\046\uff85\047\uff85\050\uff85\057\uff85\061\uff85" +
    "\062\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104" +
    "\uff85\105\uff85\106\uff85\107\uff85\114\uff85\001\002\000\042" +
    "\046\uff88\047\uff88\050\uff88\057\uff88\061\uff88\062\uff88\077" +
    "\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88" +
    "\106\uff88\107\uff88\114\uff88\001\002\000\042\046\uff87\047" +
    "\uff87\050\uff87\057\uff87\061\uff87\062\uff87\077\uff87\100\uff87" +
    "\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106\uff87\107" +
    "\uff87\114\uff87\001\002\000\042\046\uff86\047\uff86\050\uff86" +
    "\057\uff86\061\uff86\062\uff86\077\uff86\100\uff86\101\uff86\102" +
    "\uff86\103\uff86\104\uff86\105\uff86\106\uff86\107\uff86\114\uff86" +
    "\001\002\000\042\046\uff83\047\uff83\050\uff83\057\uff83\061" +
    "\uff83\062\uff83\077\uff83\100\uff83\101\uff83\102\uff83\103\uff83" +
    "\104\uff83\105\uff83\106\uff83\107\uff83\114\uff83\001\002\000" +
    "\042\046\uff84\047\uff84\050\uff84\057\uff84\061\uff84\062\uff84" +
    "\077\uff84\100\uff84\101\uff84\102\uff84\103\uff84\104\uff84\105" +
    "\uff84\106\uff84\107\uff84\114\uff84\001\002\000\006\123\156" +
    "\124\155\001\002\000\004\053\147\001\002\000\004\072" +
    "\150\001\002\000\004\060\151\001\002\000\010\123\152" +
    "\127\153\130\154\001\002\000\042\046\uff8e\047\uff8e\050" +
    "\uff8e\057\uff8e\061\uff8e\062\uff8e\077\uff8e\100\uff8e\101\uff8e" +
    "\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e\114" +
    "\uff8e\001\002\000\042\046\uff8d\047\uff8d\050\uff8d\057\uff8d" +
    "\061\uff8d\062\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103" +
    "\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d\114\uff8d\001\002" +
    "\000\042\046\uff8c\047\uff8c\050\uff8c\057\uff8c\061\uff8c\062" +
    "\uff8c\077\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c" +
    "\105\uff8c\106\uff8c\107\uff8c\114\uff8c\001\002\000\042\046" +
    "\uff8a\047\uff8a\050\uff8a\057\uff8a\061\uff8a\062\uff8a\077\uff8a" +
    "\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106" +
    "\uff8a\107\uff8a\114\uff8a\001\002\000\042\046\uff8b\047\uff8b" +
    "\050\uff8b\057\uff8b\061\uff8b\062\uff8b\077\uff8b\100\uff8b\101" +
    "\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b" +
    "\114\uff8b\001\002\000\006\123\166\124\165\001\002\000" +
    "\004\053\161\001\002\000\004\072\162\001\002\000\004" +
    "\060\163\001\002\000\004\123\164\001\002\000\042\046" +
    "\uff81\047\uff81\050\uff81\057\uff81\061\uff81\062\uff81\077\uff81" +
    "\100\uff81\101\uff81\102\uff81\103\uff81\104\uff81\105\uff81\106" +
    "\uff81\107\uff81\114\uff81\001\002\000\042\046\uff7f\047\uff7f" +
    "\050\uff7f\057\uff7f\061\uff7f\062\uff7f\077\uff7f\100\uff7f\101" +
    "\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f" +
    "\114\uff7f\001\002\000\042\046\uff80\047\uff80\050\uff80\057" +
    "\uff80\061\uff80\062\uff80\077\uff80\100\uff80\101\uff80\102\uff80" +
    "\103\uff80\104\uff80\105\uff80\106\uff80\107\uff80\114\uff80\001" +
    "\002\000\006\041\170\062\uffb4\001\002\000\016\052\203" +
    "\053\174\054\173\056\202\070\122\075\175\001\002\000" +
    "\004\062\172\001\002\000\026\051\uffb8\052\uffb8\064\uffb8" +
    "\065\uffb8\066\uffb8\067\uffb8\070\uffb8\073\uffb8\074\uffb8\113" +
    "\uffb8\001\002\000\042\046\uffa3\047\uffa3\050\uffa3\057\uffa3" +
    "\061\uffa3\062\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103" +
    "\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\114\uffa3\001\002" +
    "\000\042\046\uffa2\047\uffa2\050\uffa2\057\uffa2\061\uffa2\062" +
    "\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2" +
    "\105\uffa2\106\uffa2\111\272\112\271\001\002\000\042\046" +
    "\uffa1\047\uffa1\050\uffa1\057\uffa1\061\uffa1\062\uffa1\077\uffa1" +
    "\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106" +
    "\uffa1\107\uffa1\114\uffa1\001\002\000\022\046\257\057\uffa6" +
    "\061\uffa6\062\uffa6\077\255\100\253\101\254\102\256\001" +
    "\002\000\042\046\uffa0\047\uffa0\050\uffa0\057\uffa0\061\uffa0" +
    "\062\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\104" +
    "\uffa0\105\uffa0\106\uffa0\107\uffa0\114\uffa0\001\002\000\010" +
    "\057\uffa5\061\uffa5\062\uffa5\001\002\000\006\061\uffb5\062" +
    "\uffb5\001\002\000\020\052\203\053\174\054\173\056\202" +
    "\070\122\075\175\110\207\001\002\000\042\046\uffa4\047" +
    "\uffa4\050\uffa4\057\uffa4\061\uffa4\062\uffa4\077\uffa4\100\uffa4" +
    "\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107" +
    "\uffa4\114\uffa4\001\002\000\010\057\uff99\107\265\114\266" +
    "\001\002\000\032\046\257\047\235\050\234\057\uffa6\077" +
    "\255\100\253\101\254\102\256\103\230\104\231\105\232" +
    "\106\233\001\002\000\004\057\245\001\002\000\004\056" +
    "\224\001\002\000\004\057\211\001\002\000\022\046\216" +
    "\057\uffaf\061\uffaf\062\uffaf\077\213\100\215\101\212\102" +
    "\214\001\002\000\016\052\203\053\174\054\173\056\202" +
    "\070\122\075\175\001\002\000\016\052\203\053\174\054" +
    "\173\056\202\070\122\075\175\001\002\000\016\052\203" +
    "\053\174\054\173\056\202\070\122\075\175\001\002\000" +
    "\016\052\203\053\174\054\173\056\202\070\122\075\175" +
    "\001\002\000\016\052\203\053\174\054\173\056\202\070" +
    "\122\075\175\001\002\000\010\057\uffaa\061\uffaa\062\uffaa" +
    "\001\002\000\010\057\uffad\061\uffad\062\uffad\001\002\000" +
    "\010\057\uffab\061\uffab\062\uffab\001\002\000\010\057\uffae" +
    "\061\uffae\062\uffae\001\002\000\010\057\uffac\061\uffac\062" +
    "\uffac\001\002\000\014\052\203\053\227\054\173\070\122" +
    "\075\175\001\002\000\004\057\244\001\002\000\016\047" +
    "\235\050\234\103\230\104\231\105\232\106\233\001\002" +
    "\000\024\047\uffa2\050\uffa2\057\uffa2\103\uffa2\104\uffa2\105" +
    "\uffa2\106\uffa2\107\uffa2\114\uffa2\001\002\000\014\052\203" +
    "\053\227\054\173\070\122\075\175\001\002\000\014\052" +
    "\203\053\227\054\173\070\122\075\175\001\002\000\014" +
    "\052\203\053\227\054\173\070\122\075\175\001\002\000" +
    "\014\052\203\053\227\054\173\070\122\075\175\001\002" +
    "\000\014\052\203\053\227\054\173\070\122\075\175\001" +
    "\002\000\014\052\203\053\227\054\173\070\122\075\175" +
    "\001\002\000\010\057\uff94\107\uff94\114\uff94\001\002\000" +
    "\010\057\uff93\107\uff93\114\uff93\001\002\000\010\057\uff95" +
    "\107\uff95\114\uff95\001\002\000\010\057\uff96\107\uff96\114" +
    "\uff96\001\002\000\010\057\uff97\107\uff97\114\uff97\001\002" +
    "\000\010\057\uff98\107\uff98\114\uff98\001\002\000\004\057" +
    "\uff9a\001\002\000\014\057\uff9d\061\uff9d\062\uff9d\107\246" +
    "\114\247\001\002\000\004\056\250\001\002\000\004\056" +
    "\250\001\002\000\016\052\203\053\227\054\173\070\122" +
    "\075\175\110\207\001\002\000\010\057\uff9e\061\uff9e\062" +
    "\uff9e\001\002\000\010\057\uff9f\061\uff9f\062\uff9f\001\002" +
    "\000\016\052\203\053\174\054\173\056\202\070\122\075" +
    "\175\001\002\000\016\052\203\053\174\054\173\056\202" +
    "\070\122\075\175\001\002\000\016\052\203\053\174\054" +
    "\173\056\202\070\122\075\175\001\002\000\016\052\203" +
    "\053\174\054\173\056\202\070\122\075\175\001\002\000" +
    "\016\052\203\053\174\054\173\056\202\070\122\075\175" +
    "\001\002\000\010\057\uffa9\061\uffa9\062\uffa9\001\002\000" +
    "\010\057\uffb0\061\uffb0\062\uffb0\001\002\000\010\057\uffb3" +
    "\061\uffb3\062\uffb3\001\002\000\010\057\uffb2\061\uffb2\062" +
    "\uffb2\001\002\000\010\057\uffb1\061\uffb1\062\uffb1\001\002" +
    "\000\016\052\203\053\227\054\173\070\122\075\175\110" +
    "\207\001\002\000\016\052\203\053\227\054\173\070\122" +
    "\075\175\110\207\001\002\000\004\057\uff9b\001\002\000" +
    "\004\057\uff9c\001\002\000\010\057\uffa7\061\uffa7\062\uffa7" +
    "\001\002\000\010\057\uffa8\061\uffa8\062\uffa8\001\002\000" +
    "\004\052\275\001\002\000\026\051\uffba\052\uffba\064\uffba" +
    "\065\uffba\066\uffba\067\uffba\070\uffba\073\uffba\074\uffba\113" +
    "\uffba\001\002\000\010\041\170\061\uffb4\062\uffb4\001\002" +
    "\000\006\061\277\062\300\001\002\000\004\052\275\001" +
    "\002\000\026\051\uffb6\052\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\067\uffb6\070\uffb6\073\uffb6\074\uffb6\113\uffb6\001\002\000" +
    "\026\051\uffb7\052\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\073\uffb7\074\uffb7\113\uffb7\001\002\000\004\056" +
    "\303\001\002\000\016\052\203\053\174\054\173\056\202" +
    "\070\122\075\175\001\002\000\004\057\305\001\002\000" +
    "\004\062\uff91\001\002\000\026\051\uffc3\052\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\070\uffc3\073\uffc3\074\uffc3\113" +
    "\uffc3\001\002\000\026\051\uffc1\052\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\073\uffc1\074\uffc1\113\uffc1\001" +
    "\002\000\004\064\uffc6\001\002\000\070\023\uffc7\027\uffc7" +
    "\030\uffc7\032\uffc7\033\uffc7\041\uffc7\050\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\060\uffc7\062\uffc7\064\uffc7\077\uffc7\100\uffc7" +
    "\101\uffc7\115\uffc7\116\uffc7\121\uffc7\122\uffc7\123\uffc7\124" +
    "\uffc7\125\uffc7\126\uffc7\127\uffc7\130\uffc7\131\uffc7\001\002" +
    "\000\004\005\ufff5\001\002\000\014\037\023\040\021\043" +
    "\020\044\022\047\ufff6\001\002\000\004\047\u0119\001\002" +
    "\000\014\037\023\040\021\043\020\044\022\047\ufff6\001" +
    "\002\000\014\037\023\040\021\043\020\044\022\046\ufff6" +
    "\001\002\000\014\037\023\040\021\043\020\044\022\047" +
    "\ufff6\001\002\000\014\037\023\040\021\043\020\044\022" +
    "\047\ufff6\001\002\000\004\047\322\001\002\000\050\032" +
    "\ufff2\050\054\052\076\054\055\064\057\077\103\100\052" +
    "\101\053\115\074\116\065\121\064\122\071\123\072\124" +
    "\075\125\060\126\077\127\070\130\066\131\063\001\002" +
    "\000\004\032\324\001\002\000\052\023\uff71\032\uff71\050" +
    "\uff71\052\uff71\054\uff71\064\uff71\077\uff71\100\uff71\101\uff71" +
    "\115\uff71\116\uff71\121\uff71\122\uff71\123\uff71\124\uff71\125" +
    "\uff71\126\uff71\127\uff71\130\uff71\131\uff71\001\002\000\004" +
    "\047\326\001\002\000\050\033\uffc8\041\331\052\346\053" +
    "\343\054\330\060\327\062\350\064\057\115\344\116\336" +
    "\121\333\122\340\123\342\124\345\125\332\126\347\127" +
    "\337\130\335\131\334\001\002\000\056\027\uffc8\030\uffc8" +
    "\033\uffc8\041\331\050\uffc8\052\346\053\343\054\330\060" +
    "\327\062\350\064\057\115\344\116\336\121\333\122\340" +
    "\123\342\124\345\125\332\126\347\127\337\130\335\131" +
    "\334\001\002\000\056\027\uffc8\030\uffc8\033\uffc8\041\331" +
    "\050\uffc8\052\346\053\343\054\330\060\327\062\350\064" +
    "\057\115\344\116\336\121\333\122\340\123\342\124\345" +
    "\125\332\126\347\127\337\130\335\131\334\001\002\000" +
    "\056\027\uffc8\030\uffc8\033\uffc8\041\331\050\uffc8\052\346" +
    "\053\343\054\330\060\327\062\350\064\057\115\344\116" +
    "\336\121\333\122\340\123\342\124\345\125\332\126\347" +
    "\127\337\130\335\131\334\001\002\000\056\027\uffc8\030" +
    "\uffc8\033\uffc8\041\331\050\uffc8\052\346\053\343\054\330" +
    "\060\327\062\350\064\057\115\344\116\336\121\333\122" +
    "\340\123\342\124\345\125\332\126\347\127\337\130\335" +
    "\131\334\001\002\000\056\027\uffc8\030\uffc8\033\uffc8\041" +
    "\331\050\uffc8\052\346\053\343\054\330\060\327\062\350" +
    "\064\057\115\344\116\336\121\333\122\340\123\342\124" +
    "\345\125\332\126\347\127\337\130\335\131\334\001\002" +
    "\000\056\027\uffc8\030\uffc8\033\uffc8\041\331\050\uffc8\052" +
    "\346\053\343\054\330\060\327\062\350\064\057\115\344" +
    "\116\336\121\333\122\340\123\342\124\345\125\332\126" +
    "\347\127\337\130\335\131\334\001\002\000\056\027\uffc8" +
    "\030\uffc8\033\uffc8\041\331\050\uffc8\052\346\053\343\054" +
    "\330\060\327\062\350\064\057\115\344\116\336\121\333" +
    "\122\340\123\342\124\345\125\332\126\347\127\337\130" +
    "\335\131\334\001\002\000\056\027\uffc8\030\uffc8\033\uffc8" +
    "\041\331\050\uffc8\052\346\053\343\054\330\060\327\062" +
    "\350\064\057\115\344\116\336\121\333\122\340\123\342" +
    "\124\345\125\332\126\347\127\337\130\335\131\334\001" +
    "\002\000\056\027\uffc8\030\uffc8\033\uffc8\041\331\050\uffc8" +
    "\052\346\053\343\054\330\060\327\062\350\064\057\115" +
    "\344\116\336\121\333\122\340\123\342\124\345\125\332" +
    "\126\347\127\337\130\335\131\334\001\002\000\056\027" +
    "\uffc8\030\uffc8\033\uffc8\041\331\050\uffc8\052\346\053\343" +
    "\054\330\060\327\062\350\064\057\115\344\116\336\121" +
    "\333\122\340\123\342\124\345\125\332\126\347\127\337" +
    "\130\335\131\334\001\002\000\004\033\362\001\002\000" +
    "\056\027\uffc8\030\uffc8\033\uffc8\041\331\050\uffc8\052\346" +
    "\053\343\054\330\060\327\062\350\064\057\115\344\116" +
    "\336\121\333\122\340\123\342\124\345\125\332\126\347" +
    "\127\337\130\335\131\334\001\002\000\056\027\uffc8\030" +
    "\uffc8\033\uffc8\041\331\050\uffc8\052\346\053\343\054\330" +
    "\060\327\062\350\064\057\115\344\116\336\121\333\122" +
    "\340\123\342\124\345\125\332\126\347\127\337\130\335" +
    "\131\334\001\002\000\056\027\uffc8\030\uffc8\033\uffc8\041" +
    "\331\050\uffc8\052\346\053\343\054\330\060\327\062\350" +
    "\064\057\115\344\116\336\121\333\122\340\123\342\124" +
    "\345\125\332\126\347\127\337\130\335\131\334\001\002" +
    "\000\056\027\uffc8\030\uffc8\033\uffc8\041\331\050\uffc8\052" +
    "\346\053\343\054\330\060\327\062\350\064\057\115\344" +
    "\116\336\121\333\122\340\123\342\124\345\125\332\126" +
    "\347\127\337\130\335\131\334\001\002\000\056\027\uffc8" +
    "\030\uffc8\033\uffc8\041\331\050\uffc8\052\346\053\343\054" +
    "\330\060\327\062\350\064\057\115\344\116\336\121\333" +
    "\122\340\123\342\124\345\125\332\126\347\127\337\130" +
    "\335\131\334\001\002\000\056\027\uffc8\030\uffc8\033\uffc8" +
    "\041\331\050\uffc8\052\346\053\343\054\330\060\327\062" +
    "\350\064\057\115\344\116\336\121\333\122\340\123\342" +
    "\124\345\125\332\126\347\127\337\130\335\131\334\001" +
    "\002\000\056\027\uffc8\030\uffc8\033\uffc8\041\331\050\uffc8" +
    "\052\346\053\343\054\330\060\327\062\350\064\057\115" +
    "\344\116\336\121\333\122\340\123\342\124\345\125\332" +
    "\126\347\127\337\130\335\131\334\001\002\000\056\027" +
    "\uffc8\030\uffc8\033\uffc8\041\331\050\uffc8\052\346\053\343" +
    "\054\330\060\327\062\350\064\057\115\344\116\336\121" +
    "\333\122\340\123\342\124\345\125\332\126\347\127\337" +
    "\130\335\131\334\001\002\000\012\027\uffd5\030\uffd5\033" +
    "\uffd5\050\uffd5\001\002\000\012\027\uffd2\030\uffd2\033\uffd2" +
    "\050\uffd2\001\002\000\012\027\uffcc\030\uffcc\033\uffcc\050" +
    "\uffcc\001\002\000\012\027\uffda\030\uffda\033\uffda\050\uffda" +
    "\001\002\000\012\027\uffce\030\uffce\033\uffce\050\uffce\001" +
    "\002\000\012\027\uffd8\030\uffd8\033\uffd8\050\uffd8\001\002" +
    "\000\012\027\uffd7\030\uffd7\033\uffd7\050\uffd7\001\002\000" +
    "\012\027\uffd1\030\uffd1\033\uffd1\050\uffd1\001\002\000\052" +
    "\023\uff74\032\uff74\050\uff74\052\uff74\054\uff74\064\uff74\077" +
    "\uff74\100\uff74\101\uff74\115\uff74\116\uff74\121\uff74\122\uff74" +
    "\123\uff74\124\uff74\125\uff74\126\uff74\127\uff74\130\uff74\131" +
    "\uff74\001\002\000\012\027\uffcf\030\uffcf\033\uffcf\050\uffcf" +
    "\001\002\000\012\027\uffcb\030\uffcb\033\uffcb\050\uffcb\001" +
    "\002\000\012\027\uffd6\030\uffd6\033\uffd6\050\uffd6\001\002" +
    "\000\012\027\uffca\030\uffca\033\uffca\050\uffca\001\002\000" +
    "\012\027\uffc9\030\uffc9\033\uffc9\050\uffc9\001\002\000\012" +
    "\027\uffd0\030\uffd0\033\uffd0\050\uffd0\001\002\000\012\027" +
    "\uffcd\030\uffcd\033\uffcd\050\uffcd\001\002\000\012\027\uffd4" +
    "\030\uffd4\033\uffd4\050\uffd4\001\002\000\012\027\uffd9\030" +
    "\uffd9\033\uffd9\050\uffd9\001\002\000\012\027\uffd3\030\uffd3" +
    "\033\uffd3\050\uffd3\001\002\000\004\046\376\001\002\000" +
    "\004\047\377\001\002\000\052\023\uff73\032\uff73\050\uff73" +
    "\052\uff73\054\uff73\064\uff73\077\uff73\100\uff73\101\uff73\115" +
    "\uff73\116\uff73\121\uff73\122\uff73\123\uff73\124\uff73\125\uff73" +
    "\126\uff73\127\uff73\130\uff73\131\uff73\001\002\000\004\047" +
    "\u0101\001\002\000\006\026\uff7b\050\u0103\001\002\000\004" +
    "\026\u0118\001\002\000\004\015\u0106\001\002\000\006\026" +
    "\uff7b\050\u0103\001\002\000\004\026\uff7c\001\002\000\014" +
    "\037\023\040\021\043\020\044\022\047\ufff6\001\002\000" +
    "\004\047\u0108\001\002\000\006\031\uff77\050\u010b\001\002" +
    "\000\006\031\uff77\050\u010b\001\002\000\004\031\u0116\001" +
    "\002\000\006\013\u010f\014\u010e\001\002\000\006\031\uff77" +
    "\050\u010b\001\002\000\004\031\uff78\001\002\000\004\047" +
    "\u0113\001\002\000\004\047\u0110\001\002\000\050\027\uffc8" +
    "\041\331\052\346\053\343\054\330\060\327\062\350\064" +
    "\057\115\344\116\336\121\333\122\340\123\342\124\345" +
    "\125\332\126\347\127\337\130\335\131\334\001\002\000" +
    "\004\027\u0112\001\002\000\006\031\uff75\050\uff75\001\002" +
    "\000\050\030\uffc8\041\331\052\346\053\343\054\330\060" +
    "\327\062\350\064\057\115\344\116\336\121\333\122\340" +
    "\123\342\124\345\125\332\126\347\127\337\130\335\131" +
    "\334\001\002\000\004\030\u0115\001\002\000\006\031\uff76" +
    "\050\uff76\001\002\000\006\026\uff7a\050\uff7a\001\002\000" +
    "\004\031\uff79\001\002\000\052\023\uff7d\032\uff7d\050\uff7d" +
    "\052\uff7d\054\uff7d\064\uff7d\077\uff7d\100\uff7d\101\uff7d\115" +
    "\uff7d\116\uff7d\121\uff7d\122\uff7d\123\uff7d\124\uff7d\125\uff7d" +
    "\126\uff7d\127\uff7d\130\uff7d\131\uff7d\001\002\000\052\023" +
    "\uff72\032\uff72\050\uff72\052\uff72\054\uff72\064\uff72\077\uff72" +
    "\100\uff72\101\uff72\115\uff72\116\uff72\121\uff72\122\uff72\123" +
    "\uff72\124\uff72\125\uff72\126\uff72\127\uff72\130\uff72\131\uff72" +
    "\001\002\000\004\047\u011b\001\002\000\050\041\331\050" +
    "\uffc8\052\346\053\343\054\330\060\327\062\350\064\057" +
    "\115\344\116\336\121\333\122\340\123\342\124\345\125" +
    "\332\126\347\127\337\130\335\131\334\001\002\000\004" +
    "\050\u011d\001\002\000\004\046\u011e\001\002\000\004\010" +
    "\u011f\001\002\000\004\047\u0120\001\002\000\052\023\uff7e" +
    "\032\uff7e\050\uff7e\052\uff7e\054\uff7e\064\uff7e\077\uff7e\100" +
    "\uff7e\101\uff7e\115\uff7e\116\uff7e\121\uff7e\122\uff7e\123\uff7e" +
    "\124\uff7e\125\uff7e\126\uff7e\127\uff7e\130\uff7e\131\uff7e\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\004\002\004\001\001\000\004\006\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\036" +
    "\001\001\000\002\001\001\000\004\026\040\001\001\000" +
    "\002\001\001\000\004\026\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\047\001\001\000\002\001\001\000\024\003\055" +
    "\004\066\011\060\012\061\016\072\017\103\020\077\021" +
    "\100\027\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\030\110\031\107\032\115\034\117\046\114\047\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\104\004\066\011\060\012" +
    "\061\016\072\017\103\020\077\021\100\027\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\030\110\031\307\032\115\034\117" +
    "\046\114\047\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\301\001\001\000\004\053\272\001\001\000" +
    "\004\054\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\170\001\001\000\012\036\200\044\175\046\176\050\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\036\207\044\204\046\176\050\177\051\205\052\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\036\222\044\175\046\176\050" +
    "\177\001\001\000\012\036\221\044\175\046\176\050\177" +
    "\001\001\000\012\036\220\044\175\046\176\050\177\001" +
    "\001\000\012\036\217\044\175\046\176\050\177\001\001" +
    "\000\012\036\216\044\175\046\176\050\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\225\046\176\052" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\242\046\176\001\001\000\006\044" +
    "\241\046\176\001\001\000\006\044\240\046\176\001\001" +
    "\000\006\044\237\046\176\001\001\000\006\044\236\046" +
    "\176\001\001\000\006\044\235\046\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\251\001\001\000\004\050" +
    "\250\001\001\000\012\044\225\046\176\051\205\052\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\036" +
    "\263\044\175\046\176\050\177\001\001\000\012\036\262" +
    "\044\175\046\176\050\177\001\001\000\012\036\261\044" +
    "\175\046\176\050\177\001\001\000\012\036\260\044\175" +
    "\046\176\050\177\001\001\000\012\036\257\044\175\046" +
    "\176\050\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\044\225\046\176\051\267\052\203\001\001\000\012" +
    "\044\225\046\176\051\266\052\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\273\001\001\000\002\001\001\000\004\035" +
    "\275\001\001\000\002\001\001\000\004\033\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\036\303\044\175\046\176\050\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u0119\001\001\000\002\001\001\000\004\005" +
    "\377\001\001\000\004\005\374\001\001\000\004\005\324" +
    "\001\001\000\004\005\320\001\001\000\002\001\001\000" +
    "\024\003\322\004\066\011\060\012\061\016\072\017\103" +
    "\020\077\021\100\027\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\340\027\350" +
    "\001\001\000\006\025\373\027\350\001\001\000\006\025" +
    "\372\027\350\001\001\000\006\025\371\027\350\001\001" +
    "\000\006\025\370\027\350\001\001\000\006\025\367\027" +
    "\350\001\001\000\006\025\366\027\350\001\001\000\006" +
    "\025\365\027\350\001\001\000\006\025\364\027\350\001" +
    "\001\000\006\025\363\027\350\001\001\000\006\025\362" +
    "\027\350\001\001\000\002\001\001\000\006\025\360\027" +
    "\350\001\001\000\006\025\357\027\350\001\001\000\006" +
    "\025\356\027\350\001\001\000\006\025\355\027\350\001" +
    "\001\000\006\025\354\027\350\001\001\000\006\025\353" +
    "\027\350\001\001\000\006\025\352\027\350\001\001\000" +
    "\006\025\351\027\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u0103\023" +
    "\u0101\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u0103\023\u0104\001\001\000\002\001\001\000\004\005" +
    "\u0106\001\001\000\002\001\001\000\010\013\u010b\014\u0108" +
    "\024\u0109\001\001\000\010\013\u010b\014\u0108\024\u0116\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\u010b" +
    "\014\u0108\024\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\u0110\027\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\u0113\027" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\u011b\027\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/**---------------CUANDO HAY ERROR SINTACTICO IMPRIME EN CONSOLA-----------------**/
	public void syntax_error(Symbol  s){
		Sintactico.errores="Error Sintactico en la Linea "+(s.left+1) + " Columna "+s.right+". Identificador "
		+s.value+" "+s.sym+" no reconocido,";
		System.out.println("Error Sintactico en la Linea "+(s.left+1) + " Columna "+s.right+". Identificador "
		+s.value+" "+s.sym+" no reconocido,");
	}

	/**----------------Si no es posible recuperacion de errores-----**/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{

	}

	  public static ArrayList<Object[]> variables=new ArrayList<Object[]>();
      public static ArrayList<String> traduccion= new ArrayList<String>();
      public static String errores="";
      public static String tipo="";
      public static ArrayList<Object> operaciones=new ArrayList<Object>();
      public static String html="";

      /*----------------------------Variables para RESULT----------------
      -----------------------------------------------------------------*/
      public static JSONArray score=new JSONArray();
      public static JSONArray clases=new JSONArray();
      public static JSONArray varia=new JSONArray();
      public static JSONArray metodos=new JSONArray();
      public static JSONArray comentarios=new JSONArray();

      /*---------------------------------------FIN
      ----------------------------------------------------------------*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= OPENHTML ehead ebody CLOSEHTML 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
String cadena="<html>\n"+(String)n+(String)n1+"\n</html>";
Sintactico.html=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ehead ::= MENOR HEAD MAYOR etitle CLOSEHEAD 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
String cadena="<head>\n"+(String)n+"\n</head>";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ehead",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // etitle ::= MENOR TITLE atributo MAYOR titletext CLOSETITLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
	String cadena="<title "+(String)n+">"+(String)n1+"</title>";
	RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("etitle",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // etitle ::= 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("etitle",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // titletext ::= IDENTIFICADOR titletext 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titletext",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // titletext ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titletext",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atributo ::= FONT IGUAL CADENA atributo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena="font=\""+(String)n+"\" "+(String)n1;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atributo ::= TEXTCOLOR IGUAL COLORES atributo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
	String gets=(String)n;
	String get=gets.toLowerCase();
	String color="";
	if(get.equals("\"rojo\"")){
		color="red";
	}else if(get.equals("\"amarillo\"")){
		color="yellow";
	}else if(get.equals("\"azul\"")){
		color="blue";
	}else if(get.equals("\"verde\"")){
		color="green";
	}else if(get.equals("\"gris\"")){
		color="gray";
	}else if(get.equals("\"anaranjado\"")){
		color="orange";
	}else if(get.equals("\"morado\"")){
		color="purple";
	}
	String cadena="textcolor=\""+color+"\" "+(String)n1;
	RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atributo ::= ACOLOR IGUAL COLORES atributo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
	String get=(String)n;
	get=get.toLowerCase();
	String color="";
	if(get.equals("\"rojo\"")){
		color="red";
	}else if(get.equals("\"amarillo\"")){
		color="yellow";
	}else if(get.equals("\"azul\"")){
		color="blue";
	}else if(get.equals("\"verde\"")){
		color="green";
	}else if(get.equals("\"gris\"")){
		color="gray";
	}else if(get.equals("\"anaranjado\"")){
		color="orange";
	}else{
		color="purple";
	}
	String cadena="color=\""+color+"\" "+(String)n1;
	RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atributo ::= ALIGN IGUAL ALINEACION atributo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
	String get=(String)n;
	get=get.toLowerCase();
	String color="";
	if(get.equals("\"izquierda\"")){
		color="left";
	}else if(get.equals("\"derecha\"")){
		color="right";
	}else{
		color="center";
	}
	String cadena="align=\""+color+"\" "+(String)n1;
	RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributo ::= 
            {
              Object RESULT =null;
		
	String cadena="";
	RESULT=cadena;
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ebody ::= MENOR BODY atributo MAYOR cuerpo CLOSEBODY 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
String cadena="\n<body "+(String)n+">\n"+(String)n1+"\n</body>";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ebody",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ebody ::= 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ebody",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= estructura cuerpo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String cadena=(String)n+(String)n1;
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura ::= eh 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="\n"+n1+"\n";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura ::= etable 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="\n"+n1+"\n";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estructura ::= ediv 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="\n"+n1+"\n";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura ::= ebr 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="\n"+n1+"\n";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estructura ::= ehr 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="\n"+n1+"\n";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estructura ::= ep 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="\n"+n1+"\n";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // estructura ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estructura ::= CADENA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructura ::= CADENA2 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructura ::= SIMBOLO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructura ::= SCORE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura ::= VARIABLES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estructura ::= NOMBRE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estructura ::= CANTIDAD 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estructura ::= METODOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // estructura ::= CLASES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // estructura ::= TIPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // estructura ::= CLASE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estructura ::= LINEAS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estructura ::= MAS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estructura ::= MENOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estructura ::= MULTIPLICACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estructura ::= cpreport 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n1+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // text ::= IDENTIFICADOR text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // text ::= CADENA text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // text ::= SIMBOLO text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // text ::= DIGITO text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // text ::= CADENA2 text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // text ::= cpreport text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // text ::= IGUAL text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // text ::= PUNTO text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // text ::= PUNTOCOMA text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // text ::= NOMBRE text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // text ::= SCORE text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // text ::= VARIABLES text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // text ::= CANTIDAD text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // text ::= METODOS text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // text ::= CLASES text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // text ::= TIPO text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // text ::= CLASE text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // text ::= LINEAS text 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+" "+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // text ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("text",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cpreport ::= DOLAR cicloreport DOLAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=(String)n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cpreport",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cicloreport ::= cuerporeport cicloreport 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cicloreport",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cicloreport ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cicloreport",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerporeport ::= decla 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerporeport",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerporeport ::= res PUNTOCOMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerporeport",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerporeport ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerporeport",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerporeport ::= imprimir PUNTOCOMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
			   			Sintactico.errores=Sintactico.errores+"\n"+(String)n;
			   			RESULT=n;
			   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerporeport",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$0 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Sintactico.tipo=String.valueOf(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // decla ::= tipo NT$0 sepa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Sintactico.tipo="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("decla",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$1 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

			Object[] data;
			for(int i=0;i<Sintactico.variables.size();i++){
				data=Sintactico.variables.get(i);
				if(((String)n).equals((String)data[1])){
					Sintactico.tipo=String.valueOf(data[0]);
				}
			}
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // decla ::= IDENTIFICADOR NT$1 expresion PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
			Object[] data;
			for(int i=0;i<Sintactico.variables.size();i++){
				data=Sintactico.variables.get(i);
				if(((String)n).equals((String)data[1])){
					data[2]=n1;
					Sintactico.variables.set(i,data);
				}
			}
	    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("decla",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sepa ::= IDENTIFICADOR expresion COMA sepa 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
			Object[] data=new Object[]{Sintactico.tipo,n,n1};
			Sintactico.variables.add(data);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sepa",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sepa ::= IDENTIFICADOR expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
			Object[] data=new Object[]{Sintactico.tipo,n,n1};
			Sintactico.variables.add(data);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sepa",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= IGUAL expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= typeval MAS expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))+Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))+Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= typeval MULTIPLICACION expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede multiplicar String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))*Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))*Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= typeval MENOS expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede restar String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))-Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))-Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}	   			
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= typeval MODULO expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede sacar modulo de un String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))%Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))%Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}	   			
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= PARA expr PARC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
				RESULT=n;	   			
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= PARA expr PARC MAS expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))+Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))+Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= PARA expr PARC MENOS expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede restar String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))-Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))-Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}	   			
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= PARA expr PARC MULTIPLICACION expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede multiplicar String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))*Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))*Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= PARA expr PARC MODULO expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede sacar modulo de un String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))%Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))%Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}	   			
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= PARA expr PARC DIVISION expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede sacar dividir un String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))/Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))/Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}	   			
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= typeval DIVISION expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede sacar dividir un String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))/Integer.parseInt(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))/Double.parseDouble(String.valueOf(n1));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n)+String.valueOf(n1);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}	   			
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= DIGITO INCREMENTO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede incrementar String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))+1;
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))+1;
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= DIGITO DECREMENTO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
				if(Sintactico.tipo.equals("String")){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede decrementar String";
					RESULT="";
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n))-1;
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n))-1;
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}
	   		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= typeval 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(Sintactico.tipo.equals("String")){
					String result=String.valueOf(n);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}else if(Sintactico.tipo.equals("int")){
					try{
						int num1=Integer.parseInt(String.valueOf(n));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a entero";
						RESULT="";	
					}
				}else if(Sintactico.tipo.equals("double")){
					try{
						double num1=Double.parseDouble(String.valueOf(n));
						RESULT=num1;
					}catch(NumberFormatException e){
						Sintactico.errores=Sintactico.errores+"\n"+" No se puede castear a double";
						RESULT="";	
					}
				}else{
					String result=String.valueOf(n);
					String mandar=result.replace("\"","");
					RESULT=mandar;
				}
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= condicion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // typeval ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
			  	Object[] data;
			  	String result="";
				for(int i=0;i<Sintactico.variables.size();i++){
					data=Sintactico.variables.get(i);
					if(((String)n).equals((String)data[1])){
						result=String.valueOf(data[2]);
					}
				}	
		  		RESULT=result;
		  	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeval",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // typeval ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		  		RESULT=n;
		  	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeval",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // typeval ::= DIGITO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		  		RESULT=n;
		  	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeval",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // typeval ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		  		RESULT=n;
		  	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeval",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // typeval ::= res 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
		  		RESULT=n;
		  	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeval",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicion ::= PARA cuerpocondicion PARC AND condicion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				 			boolean var1=((Boolean) n).booleanValue();
				 			boolean var2=((Boolean) n1).booleanValue();
				 			boolean result= var1 && var2;
				 			RESULT=result;
				 		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // condicion ::= PARA cuerpocondicion PARC OR condicion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				 			boolean var1=((Boolean) n).booleanValue();
				 			boolean var2=((Boolean) n1).booleanValue();
				 			boolean result= var1 || var2;
				 			RESULT=result;
				 		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condicion ::= PARA cuerpocondicion PARC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
				 			boolean var1=((Boolean) n).booleanValue();
				 			boolean result= var1;
				 			RESULT=result;
				 		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpocondicion ::= equivalencias AND cuerpocondicion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				 			boolean var1=((Boolean) n).booleanValue();
				 			boolean var2=((Boolean) n1).booleanValue();
				 			boolean result= var1 && var2;
				 			RESULT=result;
				 		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocondicion",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpocondicion ::= equivalencias OR cuerpocondicion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				 			boolean var1=((Boolean) n).booleanValue();
				 			boolean var2=((Boolean) n1).booleanValue();
				 			boolean result= var1 || var2;
				 			RESULT=result;
				 		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocondicion",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpocondicion ::= NOT PARA equivalencias PARC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
				 			boolean var1=((Boolean) n).booleanValue();
				 			boolean result= !(var1);
				 			RESULT=result;
				 		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocondicion",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpocondicion ::= equivalencias 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				 			boolean var1=((Boolean) n).booleanValue();
				 			boolean result= var1;
				 			RESULT=result;
				 		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocondicion",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // equivalencias ::= typeval MAYORIGUAL typeval 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
						double num1=Double.parseDouble(String.valueOf(n));
						double num2=Double.parseDouble(String.valueOf(n1));
						boolean result=num1>=num2;
						RESULT=result;
					
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencias",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // equivalencias ::= typeval MENORIGUAL typeval 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
						double num1=Double.parseDouble(String.valueOf(n));
						double num2=Double.parseDouble(String.valueOf(n1));
						boolean result=num1<=num2;
						RESULT=result;
						
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencias",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // equivalencias ::= typeval IGUALIGUAL typeval 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				 			String strn=String.valueOf(n);
				 			String strn1=String.valueOf(n1);
				 			boolean result= strn.equals(strn1);
				 			RESULT=result;
				 		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencias",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // equivalencias ::= typeval DISTINTO typeval 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				 			String strn=String.valueOf(n);
				 			String strn1=String.valueOf(n1);
				 			boolean result= !(strn.equals(strn1));
				 			RESULT=result;
				 		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencias",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // equivalencias ::= typeval MAYOR typeval 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
						double num1=Double.parseDouble(String.valueOf(n));
						double num2=Double.parseDouble(String.valueOf(n1));
						boolean result=num1>num2;
						RESULT=result;
						
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencias",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // equivalencias ::= typeval MENOR typeval 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
						double num1=Double.parseDouble(String.valueOf(n));
						double num2=Double.parseDouble(String.valueOf(n1));
						boolean result=num1<num2;
						RESULT=result;
						
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencias",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$2 ::= 
            {
              Object RESULT =null;
Sintactico.tipo="otro";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // imprimir ::= PRINT NT$2 PARA expr PARC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // res ::= RESULT PUNTO SCORE 
            {
              Object RESULT =null;
		
		RESULT=String.valueOf(Sintactico.score.get(0))+"\n";
	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // res ::= RESULT PUNTO VARIABLES 
            {
              Object RESULT =null;
		
		String cadena=String.valueOf(Sintactico.varia)+"\n";
		RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // res ::= RESULT PUNTO VARIABLES OPEN DIGITO CLOSE PUNTO NOMBRE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
			Iterator i;
			int contador=0;
			int enumera=Integer.parseInt((String)n);
			i=Sintactico.varia.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				if(contador==enumera) cadena=String.valueOf(innerObj.get("Nombre"));
				contador++;
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // res ::= RESULT PUNTO VARIABLES OPEN DIGITO CLOSE PUNTO TIPO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
			Iterator i;
			int contador=0;
			int enumera=Integer.parseInt((String)n);
			i=Sintactico.varia.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				if(contador==enumera) cadena=String.valueOf(innerObj.get("Tipo"));
				contador++;
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // res ::= RESULT PUNTO VARIABLES OPEN DIGITO CLOSE PUNTO CLASE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
			Iterator i;
			int contador=0;
			int enumera=Integer.parseInt((String)n);
			i=Sintactico.varia.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				if(contador==enumera) cadena=String.valueOf(innerObj.get("Clase"));
				contador++;
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // res ::= RESULT PUNTO VARIABLES PUNTO NOMBRE 
            {
              Object RESULT =null;
		
			Iterator i;
			i=Sintactico.varia.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				cadena=cadena+","+String.valueOf(innerObj.get("Nombre"));
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // res ::= RESULT PUNTO VARIABLES PUNTO CANTIDAD 
            {
              Object RESULT =null;
		
			String cant=String.valueOf(Sintactico.varia.size());
			RESULT=cant;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // res ::= RESULT PUNTO METODOS 
            {
              Object RESULT =null;
		
		String cadena=String.valueOf(Sintactico.metodos)+"\n";
		RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // res ::= RESULT PUNTO METODOS OPEN DIGITO CLOSE PUNTO NOMBRE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
			Iterator i;
			int contador=0;
			int enumera=Integer.parseInt((String)n);
			i=Sintactico.metodos.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				if(contador==enumera) cadena=String.valueOf(innerObj.get("Nombre"));
				contador++;
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // res ::= RESULT PUNTO METODOS OPEN DIGITO CLOSE PUNTO TIPO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
			Iterator i;
			int contador=0;
			int enumera=Integer.parseInt((String)n);
			i=Sintactico.metodos.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				if(contador==enumera) cadena=String.valueOf(innerObj.get("Tipo"));
				contador++;
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // res ::= RESULT PUNTO METODOS OPEN DIGITO CLOSE PUNTO LINEAS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
			Iterator i;
			int contador=0;
			int enumera=Integer.parseInt((String)n);
			i=Sintactico.metodos.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				if(contador==enumera) cadena=String.valueOf(innerObj.get("Lineas"));
				contador++;
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // res ::= RESULT PUNTO METODOS OPEN DIGITO CLOSE PUNTO PARAMETROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
			Iterator i;
			int contador=0;
			int enumera=Integer.parseInt((String)n);
			i=Sintactico.metodos.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				if(contador==enumera) cadena=String.valueOf(innerObj.get("Parametros"));
				contador++;
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // res ::= RESULT PUNTO METODOS PUNTO NOMBRE 
            {
              Object RESULT =null;
		
			Iterator i;
			i=Sintactico.metodos.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				cadena=cadena+","+String.valueOf(innerObj.get("Nombre"));
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // res ::= RESULT PUNTO METODOS PUNTO CANTIDAD 
            {
              Object RESULT =null;
		
			String cant=String.valueOf(Sintactico.metodos.size());
			RESULT=cant;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // res ::= RESULT PUNTO CLASES 
            {
              Object RESULT =null;
		
		String cadena=String.valueOf(Sintactico.clases)+"\n";
		RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // res ::= RESULT PUNTO CLASES OPEN DIGITO CLOSE PUNTO NOMBRE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
			Iterator i;
			int contador=0;
			int enumera=Integer.parseInt((String)n);
			i=Sintactico.clases.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				if(contador==enumera) cadena=String.valueOf(innerObj.get("Nombre"))+","+String.valueOf(innerObj.get("Nombre2"));
				contador++;
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // res ::= RESULT PUNTO CLASES PUNTO NOMBRE 
            {
              Object RESULT =null;
		
			Iterator i;
			i=Sintactico.clases.iterator();
			String cadena="";
			while(i.hasNext()){
				JSONObject innerObj=(JSONObject)i.next();
				cadena=cadena+","+String.valueOf(innerObj.get("Nombre"));
			}
			RESULT=cadena;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // res ::= RESULT PUNTO CLASES PUNTO CANTIDAD 
            {
              Object RESULT =null;
		
			String cant=String.valueOf(Sintactico.clases.size());
			RESULT=cant;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("res",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // eh ::= MENOR H atributo MAYOR text MENOR DIVISION H MAYOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
String cadena="<"+(String)n+" "+(String)n1+">"+(String)n2+"</"+(String)n3+">";
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("eh",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // etable ::= MENOR TABLE atributo MAYOR cuerpotabla CLOSETABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
String cadena="<table "+(String)n+">\n"+(String)n1+"\n</table>"; 
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("etable",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // cuerpotabla ::= etr cuerpotabla 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+"\n"+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpotabla",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cuerpotabla ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpotabla",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // etr ::= MENOR TR atributo MAYOR cuerpotr CLOSETR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
String cadena="<tr "+(String)n+">\n"+(String)n1+"\n</tr>"; 
RESULT=cadena;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("etr",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cuerpotr ::= etd cuerpotr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+"\n"+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpotr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cuerpotr ::= eth cuerpotr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(String)n+"\n"+(String)n1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpotr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cuerpotr ::= 
            {
              Object RESULT =null;
		RESULT="\n";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpotr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // etd ::= MENOR TD MAYOR text CLOSETD 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="<td>"+(String)n+"</td>";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("etd",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // eth ::= MENOR TH MAYOR text CLOSETH 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="<th>"+(String)n+"</th>";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("eth",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ep ::= MENOR P atributo MAYOR text CLOSEP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
RESULT="<p "+(String)n+">"+(String)n1+"</p>";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ep",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ehr ::= MENOR HR atributo DIVISION MAYOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
RESULT="<hr "+(String)n+"</hr>";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ehr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ebr ::= MENOR BR MAYOR 
            {
              Object RESULT =null;
		RESULT="<br>";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ebr",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ediv ::= MENOR DIV atributo MAYOR cuerpo CLOSEDIV 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="<div "+(String)n+">\n"+(String)n1+"\n</div>\n";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ediv",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
