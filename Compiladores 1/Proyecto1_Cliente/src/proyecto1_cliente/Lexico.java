/* The following code was generated by JFlex 1.6.1 */

package proyecto1_cliente;
import java_cup.runtime.*;
import javax.swing.*;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int A = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\15\1\7\1\11\1\73\1\11\1\73\16\15\4\0\1\12\1\71"+
    "\1\17\1\5\1\14\1\70\1\72\1\16\1\57\1\60\1\67\1\66"+
    "\1\61\1\3\1\4\1\22\1\2\1\35\1\35\1\35\1\35\1\35"+
    "\1\35\3\2\1\63\1\62\1\21\1\50\1\20\2\5\1\30\1\32"+
    "\1\43\1\31\1\27\1\46\1\44\1\23\1\36\1\51\1\1\1\26"+
    "\1\25\1\45\1\33\1\42\1\56\1\40\1\54\1\24\1\53\1\41"+
    "\1\1\1\47\1\34\1\52\1\64\1\5\1\65\1\0\1\6\1\0"+
    "\1\30\1\32\1\43\1\31\1\27\1\46\1\44\1\23\1\36\1\51"+
    "\1\1\1\26\1\25\1\45\1\33\1\42\1\56\1\40\1\54\1\24"+
    "\1\53\1\41\1\1\1\47\1\34\1\52\1\5\1\10\2\5\6\15"+
    "\1\74\32\15\2\0\4\13\4\0\1\13\2\0\1\15\7\0\1\13"+
    "\4\0\1\13\5\0\27\13\1\0\37\13\1\0\70\13\2\37\115\13"+
    "\1\55\u0142\13\4\0\14\13\16\0\5\13\7\0\1\13\1\0\1\13"+
    "\21\0\160\15\5\13\1\0\2\13\2\0\4\13\10\0\1\13\1\0"+
    "\3\13\1\0\1\13\1\0\24\13\1\0\123\13\1\0\213\13\1\0"+
    "\5\15\2\0\236\13\11\0\46\13\2\0\1\13\7\0\47\13\7\0"+
    "\1\13\1\0\55\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0"+
    "\1\15\10\0\33\13\5\0\3\13\15\0\5\15\6\0\1\13\4\0"+
    "\13\15\5\0\53\13\37\15\4\0\2\13\1\15\143\13\1\0\1\13"+
    "\10\15\1\0\6\15\2\13\2\15\1\0\4\15\2\13\12\15\3\13"+
    "\2\0\1\13\17\0\1\15\1\13\1\15\36\13\33\15\2\0\131\13"+
    "\13\15\1\13\16\0\12\15\41\13\11\15\2\13\4\0\1\13\5\0"+
    "\26\13\4\15\1\13\11\15\1\13\3\15\1\13\5\15\22\0\31\13"+
    "\3\15\104\0\1\13\1\0\13\13\67\0\33\15\1\0\4\15\66\13"+
    "\3\15\1\13\22\15\1\13\7\15\12\13\2\15\2\0\12\15\1\0"+
    "\7\13\1\0\7\13\1\0\3\15\1\0\10\13\2\0\2\13\2\0"+
    "\26\13\1\0\7\13\1\0\1\13\3\0\4\13\2\0\1\15\1\13"+
    "\7\15\2\0\2\15\2\0\3\15\1\13\10\0\1\15\4\0\2\13"+
    "\1\0\3\13\2\15\2\0\12\15\4\13\7\0\1\13\5\0\3\15"+
    "\1\0\6\13\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\2\13\1\0\2\13\2\0\1\15\1\0\5\15\4\0\2\15"+
    "\2\0\3\15\3\0\1\15\7\0\4\13\1\0\1\13\7\0\14\15"+
    "\3\13\1\15\13\0\3\15\1\0\11\13\1\0\3\13\1\0\26\13"+
    "\1\0\7\13\1\0\2\13\1\0\5\13\2\0\1\15\1\13\10\15"+
    "\1\0\3\15\1\0\3\15\2\0\1\13\17\0\2\13\2\15\2\0"+
    "\12\15\1\0\1\13\17\0\3\15\1\0\10\13\2\0\2\13\2\0"+
    "\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0\1\15\1\13"+
    "\7\15\2\0\2\15\2\0\3\15\10\0\2\15\4\0\2\13\1\0"+
    "\3\13\2\15\2\0\12\15\1\0\1\13\20\0\1\15\1\13\1\0"+
    "\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1\0"+
    "\2\13\3\0\2\13\3\0\3\13\3\0\14\13\4\0\5\15\3\0"+
    "\3\15\1\0\4\15\2\0\1\13\6\0\1\15\16\0\12\15\11\0"+
    "\1\13\7\0\3\15\1\0\10\13\1\0\3\13\1\0\27\13\1\0"+
    "\12\13\1\0\5\13\3\0\1\13\7\15\1\0\3\15\1\0\4\15"+
    "\7\0\2\15\1\0\2\13\6\0\2\13\2\15\2\0\12\15\22\0"+
    "\2\15\1\0\10\13\1\0\3\13\1\0\27\13\1\0\12\13\1\0"+
    "\5\13\2\0\1\15\1\13\7\15\1\0\3\15\1\0\4\15\7\0"+
    "\2\15\7\0\1\13\1\0\2\13\2\15\2\0\12\15\1\0\2\13"+
    "\17\0\2\15\1\0\10\13\1\0\3\13\1\0\51\13\2\0\1\13"+
    "\7\15\1\0\3\15\1\0\4\15\1\13\10\0\1\15\10\0\2\13"+
    "\2\15\2\0\12\15\12\0\6\13\2\0\2\15\1\0\22\13\3\0"+
    "\30\13\1\0\11\13\1\0\1\13\2\0\7\13\3\0\1\15\4\0"+
    "\6\15\1\0\1\15\1\0\10\15\22\0\2\15\15\0\60\13\1\15"+
    "\2\13\7\15\4\0\10\13\10\15\1\0\12\15\47\0\2\13\1\0"+
    "\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0"+
    "\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0"+
    "\4\13\1\15\2\13\6\15\1\0\2\15\1\13\2\0\5\13\1\0"+
    "\1\13\1\0\6\15\2\0\12\15\2\0\4\13\40\0\1\13\27\0"+
    "\2\15\6\0\12\15\13\0\1\15\1\0\1\15\1\0\1\15\4\0"+
    "\2\15\10\13\1\0\44\13\4\0\24\15\1\0\2\15\5\13\13\15"+
    "\1\0\44\15\11\0\1\15\71\0\53\13\24\15\1\13\12\15\6\0"+
    "\6\13\4\15\4\13\3\15\1\13\3\15\2\13\7\15\3\13\4\15"+
    "\15\13\14\15\1\13\17\15\2\0\46\13\1\0\1\13\5\0\1\13"+
    "\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0\7\13\1\0\1\13"+
    "\1\0\4\13\2\0\51\13\1\0\4\13\2\0\41\13\1\0\4\13"+
    "\2\0\7\13\1\0\1\13\1\0\4\13\2\0\17\13\1\0\71\13"+
    "\1\0\4\13\2\0\103\13\2\0\3\15\40\0\20\13\20\0\125\13"+
    "\14\0\u026c\13\2\0\21\13\1\0\32\13\5\0\113\13\3\0\3\13"+
    "\17\0\15\13\1\0\4\13\3\15\13\0\22\13\3\15\13\0\22\13"+
    "\2\15\14\0\15\13\1\0\3\13\1\0\2\15\14\0\64\13\40\15"+
    "\3\0\1\13\3\0\2\13\1\15\2\0\12\15\41\0\3\15\2\0"+
    "\12\15\6\0\130\13\10\0\51\13\1\15\1\13\5\0\106\13\12\0"+
    "\35\13\3\0\14\15\4\0\14\15\12\0\12\15\36\13\2\0\5\13"+
    "\13\0\54\13\4\0\21\15\7\13\2\15\6\0\12\15\46\0\27\13"+
    "\5\15\4\0\65\13\12\15\1\0\35\15\2\0\13\15\6\0\12\15"+
    "\15\0\1\13\130\0\5\15\57\13\21\15\7\13\4\0\12\15\21\0"+
    "\11\15\14\0\3\15\36\13\15\15\2\13\12\15\54\13\16\15\14\0"+
    "\44\13\24\15\10\0\12\15\3\0\3\13\12\15\44\13\122\0\3\15"+
    "\1\0\25\15\4\13\1\15\4\13\3\15\2\13\11\0\300\13\47\15"+
    "\25\0\4\15\u0116\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0"+
    "\10\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0"+
    "\65\13\1\0\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0"+
    "\4\13\2\0\6\13\4\0\15\13\5\0\3\13\1\0\7\13\16\0"+
    "\5\15\30\0\1\73\1\73\5\15\20\0\2\13\23\0\1\13\13\0"+
    "\5\15\5\0\6\15\1\0\1\13\15\0\1\13\20\0\15\13\3\0"+
    "\33\13\25\0\15\15\4\0\1\15\3\0\14\15\21\0\1\13\4\0"+
    "\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\4\13\1\0\13\13\2\0\4\13\5\0"+
    "\5\13\4\0\1\13\21\0\51\13\u0a77\0\57\13\1\0\57\13\1\0"+
    "\205\13\6\0\4\13\3\15\2\13\14\0\46\13\1\0\1\13\5\0"+
    "\1\13\2\0\70\13\7\0\1\13\17\0\1\15\27\13\11\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\40\15\57\0\1\13\u01d5\0\3\13"+
    "\31\0\11\13\6\15\1\0\5\13\2\0\5\13\4\0\126\13\2\0"+
    "\2\15\2\0\3\13\1\0\132\13\1\0\4\13\5\0\51\13\3\0"+
    "\136\13\21\0\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0"+
    "\u048d\13\103\0\56\13\2\0\u010d\13\3\0\20\13\12\15\2\13\24\0"+
    "\57\13\1\15\4\0\12\15\1\0\31\13\7\0\1\15\120\13\2\15"+
    "\45\0\11\13\2\0\147\13\2\0\4\13\1\0\4\13\14\0\13\13"+
    "\115\0\12\13\1\15\3\13\1\15\4\13\1\15\27\13\5\15\20\0"+
    "\1\13\7\0\64\13\14\0\2\15\62\13\21\15\13\0\12\15\6\0"+
    "\22\15\6\13\3\0\1\13\4\0\12\15\34\13\10\15\2\0\27\13"+
    "\15\15\14\0\35\13\3\0\4\15\57\13\16\15\16\0\1\13\12\15"+
    "\46\0\51\13\16\15\11\0\3\13\1\15\10\13\2\15\2\0\12\15"+
    "\6\0\27\13\3\0\1\13\1\15\4\0\60\13\1\15\1\13\3\15"+
    "\2\13\2\15\5\13\2\15\1\13\1\15\1\13\30\0\3\13\2\0"+
    "\13\13\5\15\2\0\3\13\2\15\12\0\6\13\2\0\6\13\2\0"+
    "\6\13\11\0\7\13\1\0\7\13\221\0\43\13\10\15\1\0\2\15"+
    "\2\0\12\15\6\0\u2ba4\13\14\0\27\13\4\0\61\13\u2104\0\u016e\13"+
    "\2\0\152\13\46\0\7\13\14\0\5\13\5\0\1\13\1\15\12\13"+
    "\1\0\15\13\1\0\5\13\1\0\1\13\1\0\2\13\1\0\2\13"+
    "\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0\66\13\50\0\15\13"+
    "\3\0\20\15\20\0\7\15\14\0\2\13\30\0\3\13\31\0\1\13"+
    "\6\0\5\13\1\0\207\13\2\0\1\15\4\0\1\13\13\0\12\15"+
    "\7\0\32\13\4\0\1\13\1\0\32\13\13\0\131\13\3\0\6\13"+
    "\2\0\6\13\2\0\6\13\2\0\3\13\3\0\2\13\3\0\2\13"+
    "\22\0\3\15\4\0\14\13\1\0\32\13\1\0\23\13\1\0\2\13"+
    "\1\0\17\13\2\0\16\13\42\0\173\13\105\0\65\13\210\0\1\15"+
    "\202\0\35\13\3\0\61\13\57\0\37\13\21\0\33\13\65\0\36\13"+
    "\2\0\44\13\4\0\10\13\1\0\5\13\52\0\236\13\2\0\12\15"+
    "\u0356\0\6\13\2\0\1\13\1\0\54\13\1\0\2\13\3\0\1\13"+
    "\2\0\27\13\252\0\26\13\12\0\32\13\106\0\70\13\6\0\2\13"+
    "\100\0\1\13\3\15\1\0\2\15\5\0\4\15\4\13\1\0\3\13"+
    "\1\0\33\13\4\0\3\15\4\0\1\15\40\0\35\13\203\0\66\13"+
    "\12\0\26\13\12\0\23\13\215\0\111\13\u03b7\0\3\15\65\13\17\15"+
    "\37\0\12\15\20\0\3\15\55\13\13\15\2\0\1\15\22\0\31\13"+
    "\7\0\12\15\6\0\3\15\44\13\16\15\1\0\12\15\100\0\3\15"+
    "\60\13\16\15\4\13\13\0\12\15\u04a6\0\53\13\15\15\10\0\12\15"+
    "\u0936\0\u036f\13\221\0\143\13\u0b9d\0\u042f\13\u33d1\0\u0239\13\u04c7\0\105\13"+
    "\13\0\1\13\56\15\20\0\4\15\15\13\u4060\0\2\13\u2163\0\5\15"+
    "\3\0\26\15\2\0\7\15\36\0\4\15\224\0\3\15\u01bb\0\125\13"+
    "\1\0\107\13\1\0\2\13\2\0\1\13\2\0\2\13\2\0\4\13"+
    "\1\0\14\13\1\0\1\13\1\0\7\13\1\0\101\13\1\0\4\13"+
    "\2\0\10\13\1\0\7\13\1\0\34\13\1\0\4\13\1\0\5\13"+
    "\1\0\1\13\3\0\7\13\1\0\u0154\13\2\0\31\13\1\0\31\13"+
    "\1\0\37\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13"+
    "\1\0\31\13\1\0\37\13\1\0\31\13\1\0\10\13\2\0\62\15"+
    "\u1600\0\4\13\1\0\33\13\1\0\2\13\1\0\1\13\2\0\1\13"+
    "\1\0\12\13\1\0\4\13\1\0\1\13\1\0\1\13\6\0\1\13"+
    "\4\0\1\13\1\0\1\13\1\0\1\13\1\0\3\13\1\0\2\13"+
    "\1\0\1\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\2\0\4\13\1\0\7\13"+
    "\1\0\4\13\1\0\4\13\1\0\1\13\1\0\12\13\1\0\21\13"+
    "\5\0\3\13\1\0\5\13\1\0\21\13\u1144\0\ua6d7\13\51\0\u1035\13"+
    "\13\0\336\13\u3fe2\0\u021e\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\15\36\0\140\15\200\0\360\15\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\2\2\1\10\1\11\1\12\1\13\1\14\13\2\1\15"+
    "\3\2\1\16\2\2\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\1\3\0"+
    "\1\3\1\32\1\33\1\34\1\35\2\0\1\36\2\0"+
    "\1\37\11\0\1\40\2\0\1\41\1\2\1\42\1\43"+
    "\1\44\2\2\1\45\2\2\1\46\10\2\1\47\15\2"+
    "\1\50\4\2\1\51\1\52\1\53\1\54\1\3\31\0"+
    "\15\2\2\55\2\2\2\56\21\2\21\0\1\33\15\0"+
    "\1\57\1\0\1\60\3\2\1\61\1\2\1\61\6\2"+
    "\1\62\10\2\1\63\6\2\1\64\4\2\16\0\1\65"+
    "\1\66\1\0\1\67\2\0\1\70\3\0\1\71\1\0"+
    "\1\2\1\72\2\73\3\2\2\74\7\2\2\75\2\76"+
    "\2\2\1\77\1\2\1\100\2\2\2\101\4\0\1\102"+
    "\12\0\1\103\1\0\1\104\2\2\2\105\1\106\1\2"+
    "\2\107\3\2\2\110\2\2\1\111\2\112\7\0\1\113"+
    "\1\114\3\0\1\115\1\2\2\116\1\117\5\2\5\0"+
    "\1\120\1\121\4\2\2\122\1\123\1\0\1\124\2\125"+
    "\1\2\1\0\2\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\172\0\u016e"+
    "\0\172\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\172\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\172\0\172\0\u016e\0\172\0\u016e"+
    "\0\172\0\172\0\u07a0\0\172\0\172\0\u07dd\0\u081a\0\u0857"+
    "\0\u016e\0\u0894\0\u08d1\0\u090e\0\u094b\0\u016e\0\267\0\u0988"+
    "\0\u09c5\0\172\0\u0a02\0\u0a3f\0\172\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\172\0\u0ca1"+
    "\0\u0cde\0\172\0\u0d1b\0\267\0\267\0\267\0\u0d58\0\u0d95"+
    "\0\267\0\u0dd2\0\u0e0f\0\267\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\267\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\172\0\u134d\0\u138a\0\u13c7\0\u1404\0\172"+
    "\0\172\0\172\0\u0894\0\u1441\0\u090e\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98"+
    "\0\u1cd5\0\u1d12\0\267\0\u01e8\0\u1d4f\0\u1d8c\0\267\0\u01e8"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c"+
    "\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344"+
    "\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c"+
    "\0\u2569\0\u25a6\0\172\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7"+
    "\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf"+
    "\0\172\0\u28fc\0\267\0\u2939\0\u2976\0\u29b3\0\267\0\u29f0"+
    "\0\u01e8\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\267"+
    "\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46"+
    "\0\267\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\267"+
    "\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c"+
    "\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284"+
    "\0\u32c1\0\u32fe\0\172\0\172\0\u333b\0\172\0\u3378\0\u33b5"+
    "\0\172\0\u33f2\0\u342f\0\u346c\0\172\0\u34a9\0\u34e6\0\267"+
    "\0\267\0\u01e8\0\u3523\0\u3560\0\u359d\0\267\0\u01e8\0\u35da"+
    "\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\267\0\u01e8"+
    "\0\u3785\0\u37c2\0\u37ff\0\u383c\0\267\0\u3879\0\267\0\u38b6"+
    "\0\u38f3\0\267\0\u01e8\0\u3930\0\u396d\0\u39aa\0\u39e7\0\172"+
    "\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf"+
    "\0\u3c0c\0\u3c49\0\172\0\u3c86\0\172\0\u3cc3\0\u3d00\0\267"+
    "\0\u01e8\0\267\0\u3d3d\0\267\0\u01e8\0\u3d7a\0\u3db7\0\u3df4"+
    "\0\267\0\u01e8\0\u3e31\0\u3e6e\0\267\0\267\0\u01e8\0\u3eab"+
    "\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\172\0\172"+
    "\0\u4056\0\u4093\0\u40d0\0\172\0\u410d\0\267\0\u01e8\0\267"+
    "\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5"+
    "\0\u4332\0\u436f\0\172\0\172\0\u43ac\0\u43e9\0\u4426\0\u4463"+
    "\0\267\0\u01e8\0\172\0\u44a0\0\267\0\267\0\u01e8\0\u44dd"+
    "\0\u451a\0\267\0\u01e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\4\1\11"+
    "\1\12\2\11\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\4\1\26"+
    "\1\27\1\30\2\4\1\5\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\4\1\37\1\40\1\4\1\41\3\4"+
    "\1\42\1\43\1\4\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\2\0"+
    "\11\3\1\0\61\3\100\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\14\4\1\13\10\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\1\61\1\5"+
    "\1\60\1\62\2\10\1\0\1\10\3\0\1\10\6\0"+
    "\12\61\1\5\1\61\1\0\10\61\1\0\4\61\1\0"+
    "\1\61\2\0\1\10\1\0\1\10\13\0\1\63\1\64"+
    "\14\0\1\65\14\0\1\63\40\0\2\61\1\60\1\0"+
    "\2\10\1\0\1\10\3\0\1\10\6\0\14\61\1\0"+
    "\10\61\1\0\4\61\1\0\1\61\2\0\1\10\1\0"+
    "\1\10\12\0\2\61\1\60\1\0\2\10\1\0\1\66"+
    "\3\0\1\10\6\0\14\61\1\0\10\61\1\0\4\61"+
    "\1\0\1\61\2\0\1\10\1\0\1\10\12\0\2\13"+
    "\3\0\1\13\4\0\3\13\5\0\25\13\1\0\6\13"+
    "\15\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\67\1\13\5\0\14\4"+
    "\1\13\10\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\70\1\71\1\0"+
    "\2\70\1\0\1\70\3\0\1\70\1\0\1\72\4\0"+
    "\14\70\1\0\10\70\1\0\4\70\1\0\1\70\2\0"+
    "\1\70\1\0\1\70\12\0\2\73\1\74\1\0\2\73"+
    "\1\0\1\73\3\0\1\73\2\0\1\75\3\0\2\73"+
    "\1\76\2\73\1\77\1\100\4\73\1\101\1\102\1\103"+
    "\1\104\1\73\1\105\1\106\3\73\1\0\4\73\1\0"+
    "\1\73\2\0\1\73\1\0\1\73\61\0\1\107\46\0"+
    "\1\110\1\111\24\0\1\112\25\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\4\4\1\113\5\4\1\114\1\4\1\13\1\115"+
    "\7\4\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\1\116\3\4\1\117\1\120\1\121\4\4\1\122\1\123"+
    "\1\124\7\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\4\4\1\125\7\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\13\4\1\126\1\127"+
    "\10\4\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\3\4\1\130\10\4\1\13\10\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\10\4\1\131\2\4\1\132"+
    "\1\133\10\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\10\4\1\134\3\4\1\13\1\135\7\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\14\4\1\13"+
    "\5\4\1\136\2\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\13\3\0"+
    "\1\13\4\0\3\13\5\0\22\13\1\137\2\13\1\0"+
    "\6\13\15\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\4\4\1\140\7\4\1\13\10\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\5\4\1\141\6\4\1\13"+
    "\10\4\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\5\4\1\142\6\4\1\13\1\143\7\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\1\144\2\4\1\145"+
    "\1\4\1\146\2\4\1\147\3\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\10\4\1\150"+
    "\3\4\1\13\10\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\3\4\1\151\4\4\1\152\3\4\1\13"+
    "\10\4\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\50\0\1\153\25\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\1\4\1\154\12\4\1\13\3\4\1\155"+
    "\4\4\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\1\0\2\13\3\0\1\13\4\0"+
    "\3\13\5\0\1\13\1\156\16\13\1\157\4\13\1\0"+
    "\6\13\15\0\1\13\66\0\1\160\56\0\1\161\116\0"+
    "\1\162\4\0\1\61\32\0\1\61\41\0\1\163\32\0"+
    "\1\163\40\0\1\61\1\63\1\60\1\0\2\10\1\0"+
    "\1\10\3\0\1\10\6\0\12\61\1\63\1\61\1\0"+
    "\10\61\1\0\4\61\1\0\1\61\2\0\1\10\1\0"+
    "\1\10\13\0\1\164\1\165\31\0\1\164\40\0\2\65"+
    "\1\166\1\0\2\65\1\0\1\65\1\0\1\65\1\0"+
    "\1\65\2\0\1\167\3\0\14\65\1\0\10\65\1\0"+
    "\4\65\1\0\1\65\2\0\1\65\1\0\1\65\12\0"+
    "\2\70\1\71\1\0\6\70\1\0\1\70\1\0\1\72"+
    "\4\0\14\70\1\0\10\70\1\0\4\70\1\0\1\70"+
    "\2\0\1\70\1\0\1\70\13\0\1\70\32\0\1\70"+
    "\40\0\2\73\1\74\1\0\2\73\4\170\1\0\1\73"+
    "\6\0\14\73\1\0\10\73\1\0\4\73\1\0\1\73"+
    "\2\0\1\73\1\0\1\73\13\0\1\73\32\0\1\73"+
    "\40\0\2\73\1\74\1\0\2\73\4\170\1\0\1\73"+
    "\6\0\10\73\1\171\3\73\1\0\10\73\1\0\4\73"+
    "\1\0\1\73\2\0\1\73\1\0\1\73\12\0\2\73"+
    "\1\74\1\0\2\73\4\170\1\0\1\73\6\0\2\73"+
    "\1\172\11\73\1\0\5\73\1\173\2\73\1\0\1\73"+
    "\1\174\2\73\1\0\1\73\2\0\1\73\1\0\1\73"+
    "\12\0\2\73\1\74\1\0\2\73\4\170\1\0\1\73"+
    "\6\0\4\73\1\175\7\73\1\0\10\73\1\0\4\73"+
    "\1\0\1\73\2\0\1\73\1\0\1\73\12\0\2\73"+
    "\1\74\1\0\2\73\4\170\1\0\1\73\6\0\14\73"+
    "\1\0\10\73\1\0\1\73\1\176\2\73\1\0\1\73"+
    "\2\0\1\73\1\0\1\73\63\0\1\177\23\0\2\73"+
    "\1\74\1\0\2\73\4\170\1\0\1\73\6\0\10\73"+
    "\1\200\3\73\1\0\10\73\1\0\4\73\1\0\1\73"+
    "\2\0\1\73\1\0\1\73\12\0\2\73\1\74\1\0"+
    "\2\73\4\170\1\0\1\73\6\0\4\73\1\201\7\73"+
    "\1\0\10\73\1\0\4\73\1\0\1\73\2\0\1\73"+
    "\1\0\1\73\12\0\2\73\1\74\1\0\2\73\4\170"+
    "\1\0\1\73\6\0\4\73\1\202\7\73\1\0\10\73"+
    "\1\0\4\73\1\0\1\73\2\0\1\73\1\0\1\73"+
    "\12\0\2\73\1\74\1\0\2\73\4\170\1\0\1\73"+
    "\6\0\14\73\1\0\1\203\7\73\1\0\4\73\1\0"+
    "\1\73\2\0\1\73\1\0\1\73\12\0\2\204\1\205"+
    "\1\0\6\204\1\0\1\204\2\0\1\206\2\0\1\207"+
    "\1\210\1\211\4\204\1\212\1\213\4\204\1\0\2\204"+
    "\1\214\5\204\1\0\4\204\1\0\1\204\2\0\1\204"+
    "\1\0\1\204\35\0\1\215\51\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\5\4\1\216\6\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\14\4\1\13\7\4"+
    "\1\217\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\7\4\1\220\4\4\1\13\10\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\1\4\1\221\12\4\1\13"+
    "\2\4\1\222\5\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\13\3\0"+
    "\1\13\4\0\3\13\5\0\1\13\1\223\15\13\1\224"+
    "\5\13\1\0\6\13\15\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\1\4\1\225\12\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\14\4\1\13"+
    "\5\4\1\226\2\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\13\3\0"+
    "\1\13\4\0\3\13\5\0\22\13\1\227\2\13\1\0"+
    "\6\13\15\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\13\4\1\230\1\231\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\14\4\1\13\10\4\1\0\2\4"+
    "\1\232\1\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\14\4"+
    "\1\13\1\4\1\233\6\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\13"+
    "\3\0\1\13\4\0\3\13\5\0\16\13\1\234\6\13"+
    "\1\0\6\13\15\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\6\4\1\235\1\4\1\236\3\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\1\4"+
    "\1\237\12\4\1\13\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\13"+
    "\3\0\1\13\4\0\3\13\5\0\1\13\1\240\23\13"+
    "\1\0\6\13\15\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\14\4\1\13\10\4\1\0\3\4\1\241\1\242"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\14\4\1\13\1\243\7\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\14\4"+
    "\1\13\1\244\7\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\13\4\1\245\1\246\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\5\4\1\247\6\4"+
    "\1\13\10\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\5\4\1\250\6\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\14\4\1\13\5\4"+
    "\1\251\2\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\3\4\1\252\10\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\2\4\1\253\11\4"+
    "\1\13\10\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\10\4\1\254\3\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\14\4\1\13\5\4"+
    "\1\255\2\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\14\4\1\13\1\256\7\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\10\4\1\257\3\4\1\13"+
    "\10\4\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\1\0\2\13\3\0\1\13\4\0"+
    "\3\13\5\0\15\13\1\260\7\13\1\0\6\13\15\0"+
    "\1\13\1\0\2\13\3\0\1\13\4\0\3\13\5\0"+
    "\10\13\1\261\14\13\1\0\6\13\15\0\1\13\2\0"+
    "\1\164\32\0\1\164\41\0\1\65\32\0\1\65\40\0"+
    "\2\262\1\263\1\0\2\262\1\0\1\262\3\0\1\262"+
    "\2\0\1\65\3\0\14\262\1\0\10\262\1\0\4\262"+
    "\1\0\1\262\2\0\1\262\1\0\1\262\12\0\2\170"+
    "\1\264\1\0\6\170\1\0\1\170\2\0\1\75\3\0"+
    "\14\170\1\0\10\170\1\0\4\170\1\0\1\170\2\0"+
    "\1\170\1\0\1\170\12\0\2\73\1\74\1\0\2\73"+
    "\4\170\1\0\1\73\6\0\14\73\1\0\1\265\7\73"+
    "\1\0\4\73\1\0\1\73\2\0\1\73\1\0\1\73"+
    "\12\0\2\73\1\74\1\0\2\73\4\170\1\0\1\73"+
    "\6\0\5\73\1\266\6\73\1\0\10\73\1\0\4\73"+
    "\1\0\1\73\2\0\1\73\1\0\1\73\12\0\2\73"+
    "\1\74\1\0\2\73\4\170\1\0\1\73\6\0\5\73"+
    "\1\267\6\73\1\0\10\73\1\0\4\73\1\0\1\73"+
    "\2\0\1\73\1\0\1\73\12\0\2\73\1\74\1\0"+
    "\2\73\4\170\1\0\1\73\6\0\14\73\1\0\10\73"+
    "\1\0\2\73\1\270\1\73\1\0\1\73\2\0\1\73"+
    "\1\0\1\73\12\0\2\73\1\74\1\0\2\73\4\170"+
    "\1\0\1\73\6\0\14\73\1\0\1\271\7\73\1\0"+
    "\4\73\1\0\1\73\2\0\1\73\1\0\1\73\12\0"+
    "\2\73\1\74\1\0\2\73\4\170\1\0\1\73\6\0"+
    "\14\73\1\0\10\73\1\0\4\73\1\0\1\272\2\0"+
    "\1\73\1\0\1\73\67\0\1\273\17\0\2\73\1\74"+
    "\1\0\2\73\4\170\1\0\1\73\6\0\14\73\1\0"+
    "\10\73\1\0\1\274\3\73\1\0\1\73\2\0\1\73"+
    "\1\0\1\73\12\0\2\73\1\74\1\0\2\73\4\170"+
    "\1\0\1\73\6\0\14\73\1\0\1\275\7\73\1\0"+
    "\4\73\1\0\1\73\2\0\1\73\1\0\1\73\12\0"+
    "\2\73\1\74\1\0\2\73\4\170\1\0\1\73\6\0"+
    "\14\73\1\0\5\73\1\276\2\73\1\0\4\73\1\0"+
    "\1\73\2\0\1\73\1\0\1\73\12\0\2\73\1\74"+
    "\1\0\2\73\4\170\1\0\1\73\6\0\13\73\1\277"+
    "\1\300\10\73\1\0\4\73\1\0\1\73\2\0\1\73"+
    "\1\0\1\73\12\0\2\204\1\205\1\0\6\204\1\0"+
    "\1\204\2\0\1\206\2\0\1\207\14\204\1\0\10\204"+
    "\1\0\4\204\1\0\1\204\2\0\1\204\1\0\1\204"+
    "\13\0\1\204\32\0\1\204\40\0\2\301\1\302\1\0"+
    "\2\301\1\0\1\301\3\0\1\301\2\0\1\204\3\0"+
    "\14\301\1\0\10\301\1\0\4\301\1\0\1\301\2\0"+
    "\1\301\1\0\1\301\31\0\1\303\55\0\2\204\1\205"+
    "\1\0\6\204\1\0\1\204\2\0\1\206\2\0\1\207"+
    "\1\204\1\304\2\204\1\305\7\204\1\0\1\306\7\204"+
    "\1\0\4\204\1\0\1\204\2\0\1\204\1\0\1\204"+
    "\12\0\2\204\1\205\1\0\6\204\1\0\1\204\2\0"+
    "\1\206\2\0\1\207\1\307\4\204\1\310\1\311\4\204"+
    "\1\312\1\313\1\314\7\204\1\0\4\204\1\0\1\204"+
    "\2\0\1\204\1\0\1\204\12\0\2\204\1\205\1\0"+
    "\6\204\1\0\1\204\2\0\1\206\2\0\1\207\13\204"+
    "\1\315\1\316\10\204\1\0\4\204\1\0\1\204\2\0"+
    "\1\204\1\0\1\204\12\0\2\204\1\205\1\0\6\204"+
    "\1\0\1\204\2\0\1\206\2\0\1\207\10\204\1\317"+
    "\3\204\1\0\1\320\7\204\1\0\4\204\1\0\1\204"+
    "\2\0\1\204\1\0\1\204\12\0\2\204\1\205\1\0"+
    "\6\204\1\0\1\204\2\0\1\206\1\321\1\0\1\207"+
    "\14\204\1\0\10\204\1\0\4\204\1\0\1\204\2\0"+
    "\1\204\1\0\1\204\36\0\1\322\50\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\6\4\1\323\5\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\1\4\1\324"+
    "\12\4\1\13\10\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\3\4\1\325\10\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\3\4\1\326"+
    "\10\4\1\13\10\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\10\4\1\327\3\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\13\3\0\1\13\4\0\3\13\5\0"+
    "\3\13\1\330\21\13\1\0\6\13\15\0\1\13\1\0"+
    "\2\13\3\0\1\13\4\0\3\13\5\0\10\13\1\331"+
    "\14\13\1\0\6\13\15\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\10\4\1\332\3\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\4\4\1\333"+
    "\7\4\1\13\10\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\13\3\0"+
    "\1\13\4\0\3\13\5\0\4\13\1\334\20\13\1\0"+
    "\6\13\15\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\14\4\1\13\4\4\1\335\3\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\13\3\0\1\13\4\0\3\13\5\0\21\13\1\336"+
    "\3\13\1\0\6\13\15\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\7\4\1\337\4\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\11\4\1\340"+
    "\2\4\1\13\10\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\3\4\1\341\10\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\14\4\1\13"+
    "\10\4\1\0\2\4\1\342\1\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\13\3\0"+
    "\1\13\4\0\3\13\5\0\25\13\1\0\2\13\1\343"+
    "\3\13\15\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\13\4\1\344\1\345\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\5\4\1\346\6\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\14\4"+
    "\1\13\5\4\1\347\2\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\13"+
    "\3\0\1\13\4\0\3\13\5\0\22\13\1\350\2\13"+
    "\1\0\6\13\15\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\14\4\1\13\1\351\7\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\14\4\1\13\10\4\1\0"+
    "\3\4\1\352\1\353\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\1\4"+
    "\1\354\12\4\1\13\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\10\4\1\355\3\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\7\4"+
    "\1\356\4\4\1\13\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\5\4\1\357\6\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\1\4"+
    "\1\360\12\4\1\13\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\13\4\1\361\1\362\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\14\4\1\13"+
    "\1\363\7\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\13\3\0\1\13"+
    "\4\0\3\13\5\0\13\13\2\362\10\13\1\0\6\13"+
    "\15\0\1\13\1\0\2\13\3\0\1\13\4\0\3\13"+
    "\5\0\15\13\1\364\7\13\1\0\6\13\15\0\1\13"+
    "\1\0\2\262\1\263\1\0\2\262\4\365\1\0\1\262"+
    "\6\0\14\262\1\0\10\262\1\0\4\262\1\0\1\262"+
    "\2\0\1\262\1\0\1\262\13\0\1\262\32\0\1\262"+
    "\41\0\1\170\32\0\1\170\40\0\2\73\1\74\1\0"+
    "\2\73\4\170\1\0\1\73\6\0\5\73\1\366\6\73"+
    "\1\0\10\73\1\0\4\73\1\0\1\73\2\0\1\73"+
    "\1\0\1\73\12\0\2\73\1\74\1\0\2\73\4\170"+
    "\1\0\1\73\6\0\14\73\1\0\1\367\7\73\1\0"+
    "\4\73\1\0\1\73\2\0\1\73\1\0\1\73\12\0"+
    "\2\73\1\74\1\0\2\73\4\170\1\0\1\73\6\0"+
    "\14\73\1\0\1\370\7\73\1\0\4\73\1\0\1\73"+
    "\2\0\1\73\1\0\1\73\12\0\2\73\1\74\1\0"+
    "\2\73\4\170\1\0\1\73\6\0\3\73\1\371\10\73"+
    "\1\0\10\73\1\0\4\73\1\0\1\73\2\0\1\73"+
    "\1\0\1\73\12\0\2\73\1\74\1\0\2\73\4\170"+
    "\1\0\1\73\6\0\4\73\1\372\7\73\1\0\10\73"+
    "\1\0\4\73\1\0\1\73\2\0\1\73\1\0\1\73"+
    "\12\0\2\73\1\74\1\0\2\73\4\170\1\0\1\73"+
    "\6\0\14\73\1\0\10\73\1\0\2\73\1\373\1\73"+
    "\1\0\1\73\2\0\1\73\1\0\1\73\64\0\1\374"+
    "\22\0\2\73\1\74\1\0\2\73\4\170\1\0\1\73"+
    "\6\0\10\73\1\371\3\73\1\0\10\73\1\0\4\73"+
    "\1\0\1\73\2\0\1\73\1\0\1\73\12\0\2\73"+
    "\1\74\1\0\2\73\4\170\1\0\1\73\6\0\6\73"+
    "\1\375\5\73\1\0\10\73\1\0\4\73\1\0\1\73"+
    "\2\0\1\73\1\0\1\73\12\0\2\73\1\74\1\0"+
    "\2\73\4\170\1\0\1\73\6\0\1\73\1\376\12\73"+
    "\1\0\10\73\1\0\4\73\1\0\1\73\2\0\1\73"+
    "\1\0\1\73\12\0\2\73\1\74\1\0\2\73\4\170"+
    "\1\0\1\73\6\0\14\73\1\0\10\73\1\0\3\73"+
    "\1\371\1\377\1\73\2\0\1\73\1\0\1\73\65\0"+
    "\2\377\20\0\2\301\1\302\1\0\2\301\4\u0100\1\0"+
    "\1\301\6\0\14\301\1\0\10\301\1\0\4\301\1\0"+
    "\1\301\2\0\1\301\1\0\1\301\13\0\1\301\32\0"+
    "\1\301\40\0\2\204\1\205\1\0\6\204\1\0\1\204"+
    "\2\0\1\206\2\0\1\207\2\204\1\u0101\11\204\1\0"+
    "\10\204\1\0\4\204\1\0\1\204\2\0\1\204\1\0"+
    "\1\204\12\0\2\204\1\205\1\0\6\204\1\0\1\204"+
    "\2\0\1\206\2\0\1\207\5\204\1\u0102\6\204\1\0"+
    "\10\204\1\0\4\204\1\0\1\204\2\0\1\204\1\0"+
    "\1\204\12\0\2\204\1\205\1\0\6\204\1\0\1\204"+
    "\2\0\1\206\1\u0103\1\0\1\207\14\204\1\0\10\204"+
    "\1\0\4\204\1\0\1\204\2\0\1\204\1\0\1\204"+
    "\12\0\2\204\1\205\1\0\6\204\1\0\1\204\2\0"+
    "\1\206\1\u0104\1\0\1\207\14\204\1\0\10\204\1\0"+
    "\4\204\1\0\1\204\2\0\1\204\1\0\1\204\12\0"+
    "\2\204\1\205\1\0\6\204\1\0\1\204\2\0\1\206"+
    "\2\0\1\207\7\204\1\u0105\4\204\1\0\10\204\1\0"+
    "\4\204\1\0\1\204\2\0\1\204\1\0\1\204\12\0"+
    "\2\204\1\205\1\0\6\204\1\0\1\204\2\0\1\206"+
    "\1\u0106\1\0\1\207\14\204\1\0\10\204\1\0\4\204"+
    "\1\0\1\204\2\0\1\204\1\0\1\204\12\0\2\204"+
    "\1\205\1\0\6\204\1\0\1\204\2\0\1\206\2\0"+
    "\1\207\1\204\1\u0107\12\204\1\0\10\204\1\0\4\204"+
    "\1\0\1\204\2\0\1\204\1\0\1\204\35\0\1\u0108"+
    "\51\0\2\204\1\205\1\0\6\204\1\0\1\204\2\0"+
    "\1\206\1\u0109\1\0\1\207\14\204\1\0\10\204\1\0"+
    "\4\204\1\0\1\204\2\0\1\204\1\0\1\204\12\0"+
    "\2\204\1\205\1\0\6\204\1\0\1\204\2\0\1\206"+
    "\2\0\1\207\14\204\1\0\1\204\1\u010a\6\204\1\0"+
    "\4\204\1\0\1\204\2\0\1\204\1\0\1\204\52\0"+
    "\1\u010b\34\0\2\204\1\205\1\0\6\204\1\0\1\204"+
    "\2\0\1\206\2\0\1\207\6\204\1\u010c\5\204\1\0"+
    "\10\204\1\0\4\204\1\0\1\204\2\0\1\204\1\0"+
    "\1\204\12\0\2\204\1\205\1\0\6\204\1\0\1\204"+
    "\2\0\1\206\1\u010d\1\0\1\207\14\204\1\0\10\204"+
    "\1\0\4\204\1\0\1\204\2\0\1\204\1\0\1\204"+
    "\37\0\1\u010e\47\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\14\4"+
    "\1\13\3\4\1\u010f\4\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\4\4\1\u0110\7\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\4\4"+
    "\1\u0111\7\4\1\13\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\13"+
    "\3\0\1\13\4\0\3\13\5\0\4\13\1\u0112\20\13"+
    "\1\0\6\13\15\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\6\4\1\u0113\5\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\5\4\1\u0114\6\4"+
    "\1\13\10\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\13\3\0\1\13"+
    "\4\0\3\13\5\0\5\13\1\u0115\17\13\1\0\6\13"+
    "\15\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\14\4"+
    "\1\13\5\4\1\u0116\2\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\13"+
    "\3\0\1\13\4\0\3\13\5\0\22\13\1\u0117\2\13"+
    "\1\0\6\13\15\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\3\4\1\u0118\10\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\4\4\1\u0119\7\4"+
    "\1\13\10\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\3\4\1\u011a\10\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\13\3\0\1\13\4\0\3\13\5\0\3\13"+
    "\1\u011b\21\13\1\0\6\13\15\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\5\4\1\u011c\6\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\13\3\0\1\13\4\0\3\13"+
    "\5\0\5\13\1\u011d\17\13\1\0\6\13\15\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\2\4\1\u011e\11\4"+
    "\1\13\10\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\1\4\1\u011f\12\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\13\3\0\1\13\4\0\3\13\5\0\1\13"+
    "\1\u0120\23\13\1\0\6\13\15\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\4\4\1\u0121\7\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\13\3\0\1\13\4\0\3\13"+
    "\5\0\4\13\1\u0122\20\13\1\0\6\13\15\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\13\4\1\u0123\1\u0124"+
    "\10\4\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\14\4\1\13\1\u0125\7\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\14\4\1\13\1\u0126\7\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\1\4\1\u0127"+
    "\12\4\1\13\10\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\14\4\1\13\5\4\1\u0128\2\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\13\3\0\1\13\4\0\3\13\5\0"+
    "\22\13\1\u0129\2\13\1\0\6\13\15\0\1\13\1\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\4\4\1\u012a\7\4\1\13"+
    "\10\4\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\1\0\2\13\3\0\1\13\4\0"+
    "\3\13\5\0\4\13\1\u012b\20\13\1\0\6\13\15\0"+
    "\1\13\1\0\2\365\1\u012c\1\0\6\365\1\0\1\365"+
    "\2\0\1\65\3\0\14\365\1\0\10\365\1\0\4\365"+
    "\1\0\1\365\2\0\1\365\1\0\1\365\12\0\2\73"+
    "\1\74\1\0\2\73\4\170\1\0\1\73\6\0\6\73"+
    "\1\274\5\73\1\0\10\73\1\0\4\73\1\0\1\73"+
    "\2\0\1\73\1\0\1\73\12\0\2\73\1\74\1\0"+
    "\2\73\4\170\1\0\1\73\6\0\13\73\1\u012d\1\u012e"+
    "\10\73\1\0\4\73\1\0\1\73\2\0\1\73\1\0"+
    "\1\73\12\0\2\73\1\74\1\0\2\73\4\170\1\0"+
    "\1\73\6\0\5\73\1\u012f\6\73\1\0\10\73\1\0"+
    "\4\73\1\0\1\73\2\0\1\73\1\0\1\73\12\0"+
    "\2\73\1\74\1\0\2\73\4\170\1\0\1\73\2\0"+
    "\1\u0130\3\0\14\73\1\0\10\73\1\0\4\73\1\0"+
    "\1\73\2\0\1\73\1\0\1\73\12\0\2\73\1\74"+
    "\1\0\2\73\4\170\1\0\1\73\6\0\14\73\1\0"+
    "\3\73\1\u0131\4\73\1\0\4\73\1\0\1\73\2\0"+
    "\1\73\1\0\1\73\12\0\2\73\1\74\1\0\2\73"+
    "\4\170\1\0\1\73\6\0\13\73\1\u0132\1\u0133\10\73"+
    "\1\0\4\73\1\0\1\73\2\0\1\73\1\0\1\73"+
    "\47\0\2\u0133\36\0\2\73\1\74\1\0\2\73\4\170"+
    "\1\0\1\73\6\0\4\73\1\371\7\73\1\0\10\73"+
    "\1\0\4\73\1\0\1\73\2\0\1\73\1\0\1\73"+
    "\12\0\2\73\1\74\1\0\2\73\4\170\1\0\1\73"+
    "\6\0\14\73\1\0\1\u0134\7\73\1\0\4\73\1\0"+
    "\1\73\2\0\1\73\1\0\1\73\30\0\1\u0130\56\0"+
    "\2\u0100\1\u0135\1\0\6\u0100\1\0\1\u0100\2\0\1\204"+
    "\3\0\14\u0100\1\0\10\u0100\1\0\4\u0100\1\0\1\u0100"+
    "\2\0\1\u0100\1\0\1\u0100\12\0\2\204\1\205\1\0"+
    "\6\204\1\0\1\204\2\0\1\206\2\0\1\207\3\204"+
    "\1\u0136\10\204\1\0\10\204\1\0\4\204\1\0\1\204"+
    "\2\0\1\204\1\0\1\204\12\0\2\204\1\205\1\0"+
    "\6\204\1\0\1\204\2\0\1\206\2\0\1\207\6\204"+
    "\1\u0137\5\204\1\0\10\204\1\0\4\204\1\0\1\204"+
    "\2\0\1\204\1\0\1\204\12\0\2\204\1\205\1\0"+
    "\6\204\1\0\1\204\2\0\1\206\2\0\1\207\3\204"+
    "\1\u0138\10\204\1\0\10\204\1\0\4\204\1\0\1\204"+
    "\2\0\1\204\1\0\1\204\12\0\2\204\1\205\1\0"+
    "\6\204\1\0\1\204\2\0\1\206\2\0\1\207\3\204"+
    "\1\u0139\10\204\1\0\10\204\1\0\4\204\1\0\1\204"+
    "\2\0\1\204\1\0\1\204\37\0\1\u013a\47\0\2\204"+
    "\1\205\1\0\6\204\1\0\1\204\2\0\1\206\1\u013b"+
    "\1\0\1\207\14\204\1\0\10\204\1\0\4\204\1\0"+
    "\1\204\2\0\1\204\1\0\1\204\31\0\1\u013b\55\0"+
    "\2\204\1\205\1\0\6\204\1\0\1\204\2\0\1\206"+
    "\2\0\1\207\11\204\1\u013c\2\204\1\0\10\204\1\0"+
    "\4\204\1\0\1\204\2\0\1\204\1\0\1\204\31\0"+
    "\1\u013d\55\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\10\4\1\u013e"+
    "\3\4\1\13\10\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\10\4\1\u013f\3\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\14\4\1\13"+
    "\10\4\1\0\3\4\1\u0140\1\u0141\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\13\3\0\1\13"+
    "\4\0\3\13\5\0\25\13\1\0\3\13\2\u0141\1\13"+
    "\15\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\4\4"+
    "\1\u0142\7\4\1\13\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\5\4\1\u0143\6\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\1\4"+
    "\1\u0144\12\4\1\13\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\13"+
    "\3\0\1\13\4\0\3\13\5\0\1\13\1\u0145\23\13"+
    "\1\0\6\13\15\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\7\4\1\u0146\4\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\13\3\0\1\13\4\0\3\13\5\0\7\13"+
    "\1\u0147\15\13\1\0\6\13\15\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\4\4\1\u0148\7\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\14\4"+
    "\1\13\10\4\1\0\3\4\1\u0149\1\u014a\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\13\3\0"+
    "\1\13\4\0\3\13\5\0\25\13\1\0\3\13\2\u014a"+
    "\1\13\15\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\6\4\1\u014b\5\4\1\13\10\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\13\3\0\1\13\4\0\3\13\5\0\6\13\1\u014c"+
    "\16\13\1\0\6\13\15\0\1\13\1\0\2\4\1\60"+
    "\1\0\1\10\1\4\1\0\1\10\2\0\1\13\1\4"+
    "\1\13\5\0\4\4\1\u014d\7\4\1\13\10\4\1\0"+
    "\4\4\1\13\1\4\2\0\1\10\1\0\1\10\10\0"+
    "\1\13\1\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\14\4\1\13"+
    "\4\4\1\u014e\3\4\1\0\4\4\1\13\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\13\3\0"+
    "\1\13\4\0\3\13\5\0\21\13\1\u014f\3\13\1\0"+
    "\6\13\15\0\1\13\2\0\1\365\32\0\1\365\40\0"+
    "\2\73\1\74\1\0\2\73\4\170\1\0\1\73\6\0"+
    "\3\73\1\u0150\10\73\1\0\10\73\1\0\4\73\1\0"+
    "\1\73\2\0\1\73\1\0\1\73\37\0\1\u0151\47\0"+
    "\2\73\1\74\1\0\2\73\4\170\1\0\1\73\6\0"+
    "\14\73\1\0\5\73\1\u0152\2\73\1\0\4\73\1\0"+
    "\1\73\2\0\1\73\1\0\1\73\12\0\2\73\1\74"+
    "\1\0\2\73\4\170\1\0\1\73\6\0\1\u0153\13\73"+
    "\1\0\10\73\1\0\4\73\1\0\1\73\2\0\1\73"+
    "\1\0\1\73\12\0\2\73\1\74\1\0\2\73\4\170"+
    "\1\0\1\73\6\0\4\73\1\u0154\7\73\1\0\10\73"+
    "\1\0\4\73\1\0\1\73\2\0\1\73\1\0\1\73"+
    "\40\0\1\u0155\46\0\2\73\1\74\1\0\2\73\4\170"+
    "\1\0\1\73\6\0\5\73\1\u0156\6\73\1\0\10\73"+
    "\1\0\4\73\1\0\1\73\2\0\1\73\1\0\1\73"+
    "\13\0\1\u0100\32\0\1\u0100\40\0\2\204\1\205\1\0"+
    "\6\204\1\0\1\204\2\0\1\206\1\u0157\1\0\1\207"+
    "\14\204\1\0\10\204\1\0\4\204\1\0\1\204\2\0"+
    "\1\204\1\0\1\204\12\0\2\204\1\205\1\0\6\204"+
    "\1\0\1\204\2\0\1\206\1\u0158\1\0\1\207\14\204"+
    "\1\0\10\204\1\0\4\204\1\0\1\204\2\0\1\204"+
    "\1\0\1\204\12\0\2\204\1\205\1\0\6\204\1\0"+
    "\1\204\2\0\1\206\2\0\1\207\4\204\1\u0159\7\204"+
    "\1\0\10\204\1\0\4\204\1\0\1\204\2\0\1\204"+
    "\1\0\1\204\12\0\2\204\1\205\1\0\6\204\1\0"+
    "\1\204\2\0\1\206\2\0\1\207\4\204\1\u015a\7\204"+
    "\1\0\10\204\1\0\4\204\1\0\1\204\2\0\1\204"+
    "\1\0\1\204\40\0\1\u015b\46\0\2\204\1\205\1\0"+
    "\6\204\1\0\1\204\2\0\1\206\1\u015c\1\0\1\207"+
    "\14\204\1\0\10\204\1\0\4\204\1\0\1\204\2\0"+
    "\1\204\1\0\1\204\12\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\3\4\1\u015d\10\4\1\13\10\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\14\4\1\13\10\4\1\0"+
    "\3\4\1\u015e\1\u015f\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\14\4"+
    "\1\13\5\4\1\u0160\2\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\3\4\1\u0161\10\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\13\3\0\1\13\4\0\3\13"+
    "\5\0\3\13\1\u0162\21\13\1\0\6\13\15\0\1\13"+
    "\1\0\2\4\1\60\1\0\1\10\1\4\1\0\1\10"+
    "\2\0\1\13\1\4\1\13\5\0\1\4\1\u0163\12\4"+
    "\1\13\10\4\1\0\4\4\1\13\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\5\4\1\u0164\6\4\1\13\10\4\1\0\4\4"+
    "\1\13\1\4\2\0\1\10\1\0\1\10\10\0\1\13"+
    "\1\0\2\13\3\0\1\13\4\0\3\13\5\0\5\13"+
    "\1\u0165\17\13\1\0\6\13\15\0\1\13\1\0\2\73"+
    "\1\74\1\0\2\73\4\170\1\0\1\73\6\0\3\73"+
    "\1\274\10\73\1\0\10\73\1\0\4\73\1\0\1\73"+
    "\2\0\1\73\1\0\1\73\37\0\1\u0166\47\0\2\73"+
    "\1\74\1\0\2\73\4\170\1\0\1\73\6\0\14\73"+
    "\1\0\10\73\1\0\1\265\3\73\1\0\1\73\2\0"+
    "\1\73\1\0\1\73\12\0\2\73\1\74\1\0\2\73"+
    "\4\170\1\0\1\73\6\0\5\73\1\u0167\6\73\1\0"+
    "\10\73\1\0\4\73\1\0\1\73\2\0\1\73\1\0"+
    "\1\73\12\0\2\73\1\74\1\0\2\73\4\170\1\0"+
    "\1\73\6\0\14\73\1\0\1\u0168\7\73\1\0\4\73"+
    "\1\0\1\73\2\0\1\73\1\0\1\73\51\0\1\u0169"+
    "\35\0\2\73\1\74\1\0\2\73\4\170\1\0\1\73"+
    "\6\0\6\73\1\u016a\5\73\1\0\10\73\1\0\4\73"+
    "\1\0\1\73\2\0\1\73\1\0\1\73\12\0\2\204"+
    "\1\205\1\0\6\204\1\0\1\204\2\0\1\206\1\u016b"+
    "\1\0\1\207\14\204\1\0\10\204\1\0\4\204\1\0"+
    "\1\204\2\0\1\204\1\0\1\204\12\0\2\204\1\205"+
    "\1\0\6\204\1\0\1\204\2\0\1\206\1\u016c\1\0"+
    "\1\207\14\204\1\0\10\204\1\0\4\204\1\0\1\204"+
    "\2\0\1\204\1\0\1\204\31\0\1\u016c\55\0\2\4"+
    "\1\60\1\0\1\10\1\4\1\0\1\10\2\0\1\13"+
    "\1\4\1\13\5\0\10\4\1\u016d\3\4\1\13\10\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\4\4"+
    "\1\u016e\7\4\1\13\10\4\1\0\4\4\1\13\1\4"+
    "\2\0\1\10\1\0\1\10\10\0\1\13\1\0\2\13"+
    "\3\0\1\13\4\0\3\13\5\0\4\13\1\u016f\20\13"+
    "\1\0\6\13\15\0\1\13\1\0\2\4\1\60\1\0"+
    "\1\10\1\4\1\0\1\10\2\0\1\13\1\4\1\13"+
    "\5\0\14\4\1\13\1\u0170\7\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\1\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\6\4\1\u0171\5\4\1\13"+
    "\10\4\1\0\4\4\1\13\1\4\2\0\1\10\1\0"+
    "\1\10\10\0\1\13\1\0\2\13\3\0\1\13\4\0"+
    "\3\13\5\0\6\13\1\u0172\16\13\1\0\6\13\15\0"+
    "\1\13\33\0\1\377\42\0\2\73\1\74\1\0\2\73"+
    "\4\170\1\0\1\73\2\0\1\u0173\3\0\14\73\1\0"+
    "\10\73\1\0\4\73\1\0\1\73\2\0\1\73\1\0"+
    "\1\73\12\0\2\73\1\74\1\0\2\73\4\170\1\0"+
    "\1\73\6\0\6\73\1\u0153\5\73\1\0\10\73\1\0"+
    "\4\73\1\0\1\73\2\0\1\73\1\0\1\73\42\0"+
    "\1\u0174\44\0\2\73\1\74\1\0\2\73\4\170\1\0"+
    "\1\73\6\0\10\73\1\u0167\3\73\1\0\10\73\1\0"+
    "\4\73\1\0\1\73\2\0\1\73\1\0\1\73\12\0"+
    "\2\4\1\60\1\0\1\10\1\4\1\0\1\10\2\0"+
    "\1\13\1\4\1\13\5\0\14\4\1\13\1\u0175\7\4"+
    "\1\0\4\4\1\13\1\4\2\0\1\10\1\0\1\10"+
    "\10\0\1\13\1\0\2\4\1\60\1\0\1\10\1\4"+
    "\1\0\1\10\2\0\1\13\1\4\1\13\5\0\14\4"+
    "\1\13\10\4\1\0\3\4\1\u0176\1\u0177\1\4\2\0"+
    "\1\10\1\0\1\10\10\0\1\13\1\0\2\13\3\0"+
    "\1\13\4\0\3\13\5\0\25\13\1\0\3\13\2\u0177"+
    "\1\13\15\0\1\13\1\0\2\4\1\60\1\0\1\10"+
    "\1\4\1\0\1\10\2\0\1\13\1\4\1\13\5\0"+
    "\10\4\1\u0178\3\4\1\13\10\4\1\0\4\4\1\13"+
    "\1\4\2\0\1\10\1\0\1\10\10\0\1\13\30\0"+
    "\1\u0179\45\0\2\4\1\60\1\0\1\10\1\4\1\0"+
    "\1\10\2\0\1\13\1\4\1\13\5\0\14\4\1\13"+
    "\10\4\1\0\3\4\1\u017a\1\u017b\1\4\2\0\1\10"+
    "\1\0\1\10\10\0\1\13\17\0\1\u0173\55\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17751];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\1\1\1\11\7\1\1\11"+
    "\22\1\2\11\1\1\1\11\1\1\2\11\1\1\2\11"+
    "\2\1\3\0\5\1\2\0\1\11\2\0\1\11\11\0"+
    "\1\11\2\0\1\11\40\1\1\11\4\1\3\11\2\1"+
    "\31\0\44\1\21\0\1\11\15\0\1\11\1\0\42\1"+
    "\16\0\2\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\35\1\4\0\1\11\12\0\1\11\1\0\1\11"+
    "\22\1\7\0\2\11\3\0\1\11\11\1\5\0\2\11"+
    "\6\1\1\11\1\0\4\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2928) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Sintactico.errores="error lexico en la fila "+yyline +" y en la columna " + yycolumn;
 System.out.println("error lexico en la fila "+yyline +" y en la columna " + yycolumn);
            }
          case 87: break;
          case 2: 
            { return new Symbol(sym.IDENTIFICADOR,     yyline, yycolumn, yytext());
            }
          case 88: break;
          case 3: 
            { return new Symbol(sym.DIGITO,     yyline, yycolumn, yytext());
            }
          case 89: break;
          case 4: 
            { return new Symbol(sym.MENOS,    yyline, yycolumn, yytext());
            }
          case 90: break;
          case 5: 
            { return new Symbol(sym.PUNTO,    yyline, yycolumn, yytext());
            }
          case 91: break;
          case 6: 
            { return new Symbol(sym.CADENA2,     yyline, yycolumn, yytext());
            }
          case 92: break;
          case 7: 
            { /*no hace nada, aumenta una columna*/
            }
          case 93: break;
          case 8: 
            { return new Symbol(sym.APOS,      yyline, yycolumn, yytext());
            }
          case 94: break;
          case 9: 
            { return new Symbol(sym.COMILLAS,    yyline, yycolumn, yytext());
            }
          case 95: break;
          case 10: 
            { return new Symbol(sym.MAYOR,yyline, yycolumn, yytext());
            }
          case 96: break;
          case 11: 
            { return new Symbol(sym.MENOR,yyline, yycolumn, yytext());
            }
          case 97: break;
          case 12: 
            { return new Symbol(sym.DIVISION,    yyline, yycolumn, yytext());
            }
          case 98: break;
          case 13: 
            { return new Symbol(sym.P,yyline, yycolumn, yytext());
            }
          case 99: break;
          case 14: 
            { return new Symbol(sym.IGUAL,    yyline, yycolumn, yytext());
            }
          case 100: break;
          case 15: 
            { return new Symbol(sym.PARA,      yyline, yycolumn, yytext());
            }
          case 101: break;
          case 16: 
            { return new Symbol(sym.PARC,     yyline, yycolumn, yytext());
            }
          case 102: break;
          case 17: 
            { return new Symbol(sym.COMA,    yyline, yycolumn, yytext());
            }
          case 103: break;
          case 18: 
            { return new Symbol(sym.PUNTOCOMA,     yyline, yycolumn, yytext());
            }
          case 104: break;
          case 19: 
            { return new Symbol(sym.DOSPUNTOS,     yyline, yycolumn, yytext());
            }
          case 105: break;
          case 20: 
            { return new Symbol(sym.OPEN,      yyline, yycolumn, yytext());
            }
          case 106: break;
          case 21: 
            { return new Symbol(sym.CLOSE,     yyline, yycolumn, yytext());
            }
          case 107: break;
          case 22: 
            { return new Symbol(sym.MAS,    yyline, yycolumn, yytext());
            }
          case 108: break;
          case 23: 
            { return new Symbol(sym.MULTIPLICACION,    yyline, yycolumn, yytext());
            }
          case 109: break;
          case 24: 
            { return new Symbol(sym.MODULO,    yyline, yycolumn, yytext());
            }
          case 110: break;
          case 25: 
            { return new Symbol(sym.NOT,     yyline, yycolumn, yytext());
            }
          case 111: break;
          case 26: 
            { return new Symbol(sym.DECREMENTO,     yyline, yycolumn, yytext());
            }
          case 112: break;
          case 27: 
            { return new Symbol(sym.COMENTARIO,     yyline, yycolumn, yytext());
            }
          case 113: break;
          case 28: 
            { return new Symbol(sym.OR,     yyline, yycolumn, yytext());
            }
          case 114: break;
          case 29: 
            { return new Symbol(sym.DOLAR,      yyline, yycolumn, yytext());
            }
          case 115: break;
          case 30: 
            { return new Symbol(sym.CA3,     yyline, yycolumn, yytext());
            }
          case 116: break;
          case 31: 
            { return new Symbol(sym.CADENA,     yyline, yycolumn, yytext());
            }
          case 117: break;
          case 32: 
            { return new Symbol(sym.MAYORIGUAL,yyline, yycolumn, yytext());
            }
          case 118: break;
          case 33: 
            { return new Symbol(sym.MENORIGUAL,yyline, yycolumn, yytext());
            }
          case 119: break;
          case 34: 
            { return new Symbol(sym.H,yyline, yycolumn, yytext());
            }
          case 120: break;
          case 35: 
            { return new Symbol(sym.HR,yyline, yycolumn, yytext());
            }
          case 121: break;
          case 36: 
            { return new Symbol(sym.TH,yyline, yycolumn, yytext());
            }
          case 122: break;
          case 37: 
            { return new Symbol(sym.TD,yyline, yycolumn, yytext());
            }
          case 123: break;
          case 38: 
            { return new Symbol(sym.TR,yyline, yycolumn, yytext());
            }
          case 124: break;
          case 39: 
            { return new Symbol(sym.BR,yyline, yycolumn, yytext());
            }
          case 125: break;
          case 40: 
            { return new Symbol(sym.IGUALIGUAL,     yyline, yycolumn, yytext());
            }
          case 126: break;
          case 41: 
            { return new Symbol(sym.INCREMENTO,     yyline, yycolumn, yytext());
            }
          case 127: break;
          case 42: 
            { return new Symbol(sym.DISTINTO,     yyline, yycolumn, yytext());
            }
          case 128: break;
          case 43: 
            { return new Symbol(sym.AND,     yyline, yycolumn, yytext());
            }
          case 129: break;
          case 44: 
            { return new Symbol(sym.DECIMAL,     yyline, yycolumn, yytext());
            }
          case 130: break;
          case 45: 
            { return new Symbol(sym.DIV,yyline, yycolumn, yytext());
            }
          case 131: break;
          case 46: 
            { return new Symbol(sym.INT,      yyline, yycolumn, yytext());
            }
          case 132: break;
          case 47: 
            { return new Symbol(sym.CLOSEP,yyline, yycolumn, yytext());
            }
          case 133: break;
          case 48: 
            { return new Symbol(sym.HEAD,yyline, yycolumn, yytext());
            }
          case 134: break;
          case 49: 
            { return new Symbol(sym.TIPO,     yyline, yycolumn, yytext());
            }
          case 135: break;
          case 50: 
            { return new Symbol(sym.BODY,yyline, yycolumn, yytext());
            }
          case 136: break;
          case 51: 
            { return new Symbol(sym.CHAR,     yyline, yycolumn, yytext());
            }
          case 137: break;
          case 52: 
            { return new Symbol(sym.FONT,    yyline, yycolumn, yytext());
            }
          case 138: break;
          case 53: 
            { return new Symbol(sym.CLOSEHR,yyline, yycolumn, yytext());
            }
          case 139: break;
          case 54: 
            { return new Symbol(sym.CLOSETH,yyline, yycolumn, yytext());
            }
          case 140: break;
          case 55: 
            { return new Symbol(sym.CLOSETD,yyline, yycolumn, yytext());
            }
          case 141: break;
          case 56: 
            { return new Symbol(sym.CLOSETR,yyline, yycolumn, yytext());
            }
          case 142: break;
          case 57: 
            { return new Symbol(sym.CLOSEBR,yyline, yycolumn, yytext());
            }
          case 143: break;
          case 58: 
            { return new Symbol(sym.TABLE,yyline, yycolumn, yytext());
            }
          case 144: break;
          case 59: 
            { return new Symbol(sym.TITLE,yyline, yycolumn, yytext());
            }
          case 145: break;
          case 60: 
            { return new Symbol(sym.ALIGN,    yyline, yycolumn, yytext());
            }
          case 146: break;
          case 61: 
            { return new Symbol(sym.PRINT,     yyline, yycolumn, yytext());
            }
          case 147: break;
          case 62: 
            { return new Symbol(sym.CLASE,     yyline, yycolumn, yytext());
            }
          case 148: break;
          case 63: 
            { return new Symbol(sym.ACOLOR,    yyline, yycolumn, yytext());
            }
          case 149: break;
          case 64: 
            { return new Symbol(sym.FLOAT,      yyline, yycolumn, yytext());
            }
          case 150: break;
          case 65: 
            { return new Symbol(sym.SCORE,     yyline, yycolumn, yytext());
            }
          case 151: break;
          case 66: 
            { return new Symbol(sym.COLORES,    yyline, yycolumn, yytext());
            }
          case 152: break;
          case 67: 
            { return new Symbol(sym.CLOSEDIV,yyline, yycolumn, yytext());
            }
          case 153: break;
          case 68: 
            { return new Symbol(sym.OPENHTML,yyline, yycolumn, yytext());
            }
          case 154: break;
          case 69: 
            { return new Symbol(sym.LINEAS,     yyline, yycolumn, yytext());
            }
          case 155: break;
          case 70: 
            { return new Symbol(sym.DOUBLE,     yyline, yycolumn, yytext());
            }
          case 156: break;
          case 71: 
            { return new Symbol(sym.RESULT,     yyline, yycolumn, yytext());
            }
          case 157: break;
          case 72: 
            { return new Symbol(sym.CLASES,     yyline, yycolumn, yytext());
            }
          case 158: break;
          case 73: 
            { return new Symbol(sym.NOMBRE,     yyline, yycolumn, yytext());
            }
          case 159: break;
          case 74: 
            { return new Symbol(sym.STRING,     yyline, yycolumn, yytext());
            }
          case 160: break;
          case 75: 
            { return new Symbol(sym.CLOSEHTML,yyline, yycolumn, yytext());
            }
          case 161: break;
          case 76: 
            { return new Symbol(sym.CLOSEHEAD,yyline, yycolumn, yytext());
            }
          case 162: break;
          case 77: 
            { return new Symbol(sym.CLOSEBODY,yyline, yycolumn, yytext());
            }
          case 163: break;
          case 78: 
            { return new Symbol(sym.METODOS,     yyline, yycolumn, yytext());
            }
          case 164: break;
          case 79: 
            { return new Symbol(sym.BOOLEAN,      yyline, yycolumn, yytext());
            }
          case 165: break;
          case 80: 
            { return new Symbol(sym.CLOSETABLE,yyline, yycolumn, yytext());
            }
          case 166: break;
          case 81: 
            { return new Symbol(sym.CLOSETITLE,yyline, yycolumn, yytext());
            }
          case 167: break;
          case 82: 
            { return new Symbol(sym.CANTIDAD,     yyline, yycolumn, yytext());
            }
          case 168: break;
          case 83: 
            { return new Symbol(sym.ALINEACION,    yyline, yycolumn, yytext());
            }
          case 169: break;
          case 84: 
            { return new Symbol(sym.TEXTCOLOR,    yyline, yycolumn, yytext());
            }
          case 170: break;
          case 85: 
            { return new Symbol(sym.VARIABLES,     yyline, yycolumn, yytext());
            }
          case 171: break;
          case 86: 
            { return new Symbol(sym.PARAMETROS,     yyline, yycolumn, yytext());
            }
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
