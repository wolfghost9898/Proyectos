
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package examenfinal;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import examenfinal.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\004\000\002\005" +
    "\010\000\002\005\006\000\002\005\006\000\002\005\002" +
    "\000\002\004\003\000\002\007\004\000\002\007\002\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\010\005\000\002\020\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\012\005\000\002\012\003\000\002\013\005\000\002\013" +
    "\007\000\002\014\004\000\002\014\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\002\000\002\016\007\000\002" +
    "\016\005\000\002\021\005\000\002\021\002\000\002\026" +
    "\012\000\002\024\005\000\002\024\004\000\002\024\002" +
    "\000\002\025\004\000\002\025\002\000\002\027\005\000" +
    "\002\027\004\000\002\030\011\000\002\031\012\000\002" +
    "\033\006\000\002\032\006\000\002\032\003\000\002\032" +
    "\006\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\003\000\002\034\002\000\002\036\011\000" +
    "\002\037\006\000\002\037\005\000\002\037\002\000\002" +
    "\040\011\000\002\041\014\000\002\042\011\000\002\043" +
    "\011\000\002\044\007\000\002\045\005\000\002\045\003" +
    "\000\002\046\007\000\002\047\007\000\002\051\004\000" +
    "\002\051\002\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\054\002\ufffc\022\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\047\005\050\004\051\ufffc" +
    "\053\ufffc\055\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\071\ufffc\001\002\000\006\073\332" +
    "\074\331\001\002\000\004\071\324\001\002\000\050\002" +
    "\ufff9\022\050\041\030\042\012\043\021\044\016\045\047" +
    "\046\046\051\037\053\014\055\044\060\022\061\027\062" +
    "\045\063\033\064\015\065\017\066\013\071\023\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\056\002\ufff1\022\ufff1\026\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\051\ufff1\053\ufff1\055\ufff1\056" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\071\ufff1\072\ufff1\001\002\000\014\071\uffe6\072" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\001\002\000\004\057\316" +
    "\001\002\000\004\057\303\001\002\000\004\057\274\001" +
    "\002\000\014\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1" +
    "\001\002\000\004\057\270\001\002\000\056\002\ufff0\022" +
    "\ufff0\026\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\051\ufff0\053\ufff0\055\ufff0\056\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\071\ufff0" +
    "\072\ufff0\001\002\000\014\071\uffe2\072\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\001\002\000\004\057\262\001\002\000\010" +
    "\010\uffda\016\224\057\122\001\002\000\056\002\ufff2\022" +
    "\ufff2\026\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\051\ufff2\053\ufff2\055\ufff2\056\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\071\ufff2" +
    "\072\ufff2\001\002\000\004\017\261\001\002\000\004\002" +
    "\ufffb\001\002\000\004\057\253\001\002\000\014\071\uffe3" +
    "\072\uffe3\073\uffe3\074\uffe3\075\uffe3\001\002\000\056\002" +
    "\uffef\022\uffef\026\uffef\041\uffef\042\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\051\uffef\053\uffef\055\uffef\056\uffef\060" +
    "\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef" +
    "\071\uffef\072\uffef\001\002\000\056\002\uffe9\022\uffe9\026" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\051\uffe9\053\uffe9\055\uffe9\056\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\071\uffe9\072\uffe9" +
    "\001\002\000\004\017\252\001\002\000\056\002\uffea\022" +
    "\uffea\026\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\046\uffea\051\uffea\053\uffea\055\uffea\056\uffea\060\uffea\061" +
    "\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\071\uffea" +
    "\072\uffea\001\002\000\056\002\ufff6\022\ufff6\026\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\051\ufff6" +
    "\053\ufff6\055\ufff6\056\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\071\ufff6\072\ufff6\001\002" +
    "\000\056\002\ufff9\022\050\026\ufff9\041\030\042\012\043" +
    "\021\044\016\045\047\046\046\051\037\053\014\055\044" +
    "\056\ufff9\060\022\061\027\062\045\063\033\064\015\065" +
    "\017\066\013\071\023\072\ufff9\001\002\000\016\017\246" +
    "\071\072\072\074\073\076\074\075\075\067\001\002\000" +
    "\004\010\214\001\002\000\004\002\000\001\002\000\056" +
    "\002\uffeb\022\uffeb\026\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\051\uffeb\053\uffeb\055\uffeb\056\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\071\uffeb\072\uffeb\001\002\000\004\071\212\001\002" +
    "\000\004\057\155\001\002\000\004\017\154\001\002\000" +
    "\006\052\146\071\uffe4\001\002\000\014\071\uffe5\072\uffe5" +
    "\073\uffe5\074\uffe5\075\uffe5\001\002\000\004\057\056\001" +
    "\002\000\056\002\ufff8\022\ufff8\026\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\051\ufff8\053\ufff8\055" +
    "\ufff8\056\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\071\ufff8\072\ufff8\001\002\000\056\002" +
    "\ufff3\022\ufff3\026\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\051\ufff3\053\ufff3\055\ufff3\056\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\071\ufff3\072\ufff3\001\002\000\056\002\ufff7\022\ufff7\026" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\051\ufff7\053\ufff7\055\ufff7\056\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\071\ufff7\072\ufff7" +
    "\001\002\000\056\002\ufff5\022\ufff5\026\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\051\ufff5\053\ufff5" +
    "\055\ufff5\056\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\071\ufff5\072\ufff5\001\002\000\056" +
    "\002\uffee\022\uffee\026\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\051\uffee\053\uffee\055\uffee\056\uffee" +
    "\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066" +
    "\uffee\071\uffee\072\uffee\001\002\000\004\044\057\001\002" +
    "\000\004\071\065\001\002\000\004\023\061\001\002\000" +
    "\004\025\062\001\002\000\050\022\050\026\ufff9\041\030" +
    "\042\012\043\021\044\016\045\047\046\046\051\037\053" +
    "\014\055\044\060\022\061\027\062\045\063\033\064\015" +
    "\065\017\066\013\071\023\001\002\000\004\026\064\001" +
    "\002\000\056\002\uffa7\022\uffa7\026\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\051\uffa7\053\uffa7\055" +
    "\uffa7\056\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\071\uffa7\072\uffa7\001\002\000\004\010" +
    "\066\001\002\000\014\071\072\072\074\073\076\074\075" +
    "\075\067\001\002\000\066\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\016\uffde" +
    "\017\uffde\023\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\071\uffde\072\uffde\073\uffde" +
    "\074\uffde\075\uffde\077\uffde\001\002\000\044\011\134\012" +
    "\135\013\137\014\132\016\uffd0\017\uffd0\023\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\077\136\001\002\000\044\011\134\012\135" +
    "\013\137\014\132\016\uffd0\017\uffd0\023\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0" +
    "\075\uffd0\077\136\001\002\000\070\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\016\uffdf\017\uffdf\023\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\057\122\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\075\uffdf\077\uffdf\001\002\000" +
    "\004\017\077\001\002\000\066\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\016" +
    "\uffe0\017\uffe0\023\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\075\uffe0\077\uffe0\001\002\000\066\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\016\uffdd\017\uffdd\023\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\071" +
    "\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\077\uffdd\001\002" +
    "\000\066\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\023\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc" +
    "\077\uffdc\001\002\000\004\071\100\001\002\000\034\004" +
    "\106\005\101\006\110\007\104\010\111\011\107\012\103" +
    "\013\113\014\105\027\112\030\114\035\115\036\116\001" +
    "\002\000\016\023\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7" +
    "\075\uffb7\001\002\000\014\071\072\072\074\073\076\074" +
    "\075\075\067\001\002\000\016\023\uffb4\071\uffb4\072\uffb4" +
    "\073\uffb4\074\uffb4\075\uffb4\001\002\000\016\023\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002\000\016" +
    "\023\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\001" +
    "\002\000\016\023\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc" +
    "\075\uffbc\001\002\000\016\023\uffb6\071\uffb6\072\uffb6\073" +
    "\uffb6\074\uffb6\075\uffb6\001\002\000\016\023\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\001\002\000\016\023" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\001\002" +
    "\000\016\023\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075" +
    "\uffb8\001\002\000\016\023\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\001\002\000\016\023\uffba\071\uffba\072" +
    "\uffba\073\uffba\074\uffba\075\uffba\001\002\000\016\023\uffb5" +
    "\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000" +
    "\016\023\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\001\002\000\004\017\120\001\002\000\034\004\106\005" +
    "\101\006\110\007\104\010\111\011\107\012\103\013\113" +
    "\014\105\027\112\030\114\035\115\036\116\001\002\000" +
    "\004\023\uffa6\001\002\000\016\023\124\071\072\072\074" +
    "\073\076\074\075\075\067\001\002\000\006\016\125\023" +
    "\uffcc\001\002\000\066\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\016\uffce\017" +
    "\uffce\023\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\071\uffce\072\uffce\073\uffce\074" +
    "\uffce\075\uffce\077\uffce\001\002\000\014\071\072\072\074" +
    "\073\076\074\075\075\067\001\002\000\004\023\127\001" +
    "\002\000\066\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\023" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075" +
    "\uffcf\077\uffcf\001\002\000\006\016\125\023\uffcc\001\002" +
    "\000\004\023\uffcd\001\002\000\014\071\072\072\074\073" +
    "\076\074\075\075\067\001\002\000\032\016\uffd7\017\uffd7" +
    "\023\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\071\uffd7\072" +
    "\uffd7\073\uffd7\074\uffd7\075\uffd7\001\002\000\014\071\072" +
    "\072\074\073\076\074\075\075\067\001\002\000\014\071" +
    "\072\072\074\073\076\074\075\075\067\001\002\000\014" +
    "\071\072\072\074\073\076\074\075\075\067\001\002\000" +
    "\014\071\072\072\074\073\076\074\075\075\067\001\002" +
    "\000\032\016\uffd3\017\uffd3\023\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3" +
    "\001\002\000\032\016\uffd1\017\uffd1\023\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\075\uffd1\001\002\000\032\016\uffd4\017\uffd4\023\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\075\uffd4\001\002\000\032\016\uffd5\017\uffd5\023" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\071\uffd5\072\uffd5" +
    "\073\uffd5\074\uffd5\075\uffd5\001\002\000\032\016\uffd2\017" +
    "\uffd2\023\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\071\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\075\uffd2\001\002\000\032\016" +
    "\uffd6\017\uffd6\023\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\001\002\000" +
    "\004\057\147\001\002\000\004\023\150\001\002\000\004" +
    "\025\151\001\002\000\050\022\050\026\ufff9\041\030\042" +
    "\012\043\021\044\016\045\047\046\046\051\037\053\014" +
    "\055\044\060\022\061\027\062\045\063\033\064\015\065" +
    "\017\066\013\071\023\001\002\000\004\026\153\001\002" +
    "\000\056\002\uffc3\022\uffc3\026\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\051\uffc3\053\uffc3\055\uffc3" +
    "\056\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\071\uffc3\072\uffc3\001\002\000\056\002\uffed" +
    "\022\uffed\026\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\051\uffed\053\uffed\055\uffed\056\uffed\060\uffed" +
    "\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\071" +
    "\uffed\072\uffed\001\002\000\014\071\072\072\074\073\076" +
    "\074\075\075\067\001\002\000\034\004\106\005\101\006" +
    "\110\007\104\010\111\011\107\012\103\013\113\014\105" +
    "\027\112\030\114\035\115\036\116\001\002\000\050\004" +
    "\106\005\101\006\110\007\104\010\111\011\107\012\103" +
    "\013\113\014\105\023\uffbf\027\112\030\114\035\115\036" +
    "\116\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002" +
    "\000\004\023\161\001\002\000\004\025\162\001\002\000" +
    "\010\026\uffa8\056\163\072\165\001\002\000\004\024\172" +
    "\001\002\000\004\026\171\001\002\000\004\024\166\001" +
    "\002\000\054\022\050\026\ufff9\041\030\042\012\043\021" +
    "\044\016\045\047\046\046\051\037\053\014\055\044\056" +
    "\ufff9\060\022\061\027\062\045\063\033\064\015\065\017" +
    "\066\013\071\023\072\ufff9\001\002\000\010\026\uffa8\056" +
    "\163\072\165\001\002\000\004\026\uffaa\001\002\000\056" +
    "\002\uffab\022\uffab\026\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\051\uffab\053\uffab\055\uffab\056\uffab" +
    "\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066" +
    "\uffab\071\uffab\072\uffab\001\002\000\050\022\050\026\ufff9" +
    "\041\030\042\012\043\021\044\016\045\047\046\046\051" +
    "\037\053\014\055\044\060\022\061\027\062\045\063\033" +
    "\064\015\065\017\066\013\071\023\001\002\000\004\026" +
    "\uffa9\001\002\000\014\071\175\072\074\073\076\074\075" +
    "\075\067\001\002\000\030\016\uffdf\023\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf" +
    "\075\uffdf\001\002\000\026\023\uffac\031\200\032\203\033" +
    "\177\034\202\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac" +
    "\001\002\000\014\071\072\072\074\073\076\074\075\075" +
    "\067\001\002\000\014\071\072\072\074\073\076\074\075" +
    "\075\067\001\002\000\016\023\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\001\002\000\016\023\uffad\071\uffad" +
    "\072\uffad\073\uffad\074\uffad\075\uffad\001\002\000\014\071" +
    "\072\072\074\073\076\074\075\075\067\001\002\000\016" +
    "\023\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\001" +
    "\002\000\016\023\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0" +
    "\075\uffb0\001\002\000\016\023\uffae\071\uffae\072\uffae\073" +
    "\uffae\074\uffae\075\uffae\001\002\000\014\071\072\072\074" +
    "\073\076\074\075\075\067\001\002\000\026\023\uffac\031" +
    "\200\032\203\033\177\034\202\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\075\uffac\001\002\000\016\023\uffbe\071\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\001\002\000\010\010\uffda" +
    "\016\224\057\225\001\002\000\004\010\214\001\002\000" +
    "\016\057\216\071\072\072\074\073\076\074\075\075\067" +
    "\001\002\000\056\002\uffe8\022\uffe8\026\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\051\uffe8\053\uffe8" +
    "\055\uffe8\056\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\071\uffe8\072\uffe8\001\002\000\014" +
    "\071\072\072\074\073\076\074\075\075\067\001\002\000" +
    "\004\017\220\001\002\000\056\002\uffd9\022\uffd9\026\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\051" +
    "\uffd9\053\uffd9\055\uffd9\056\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\066\uffd9\071\uffd9\072\uffd9\001" +
    "\002\000\004\023\222\001\002\000\004\017\223\001\002" +
    "\000\056\002\uffd8\022\uffd8\026\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\051\uffd8\053\uffd8\055\uffd8" +
    "\056\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065" +
    "\uffd8\066\uffd8\071\uffd8\072\uffd8\001\002\000\004\071\243" +
    "\001\002\000\032\023\uffc8\041\030\042\012\043\021\044" +
    "\016\045\047\046\227\071\175\072\074\073\076\074\075" +
    "\075\067\001\002\000\014\071\175\072\074\073\076\074" +
    "\075\075\067\001\002\000\014\071\uffe4\072\uffe4\073\uffe4" +
    "\074\uffe4\075\uffe4\001\002\000\006\016\236\023\uffc6\001" +
    "\002\000\004\023\232\001\002\000\004\025\233\001\002" +
    "\000\050\022\050\026\ufff9\041\030\042\012\043\021\044" +
    "\016\045\047\046\046\051\037\053\014\055\044\060\022" +
    "\061\027\062\045\063\033\064\015\065\017\066\013\071" +
    "\023\001\002\000\004\026\235\001\002\000\056\002\uffcb" +
    "\022\uffcb\026\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\051\uffcb\053\uffcb\055\uffcb\056\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\071" +
    "\uffcb\072\uffcb\001\002\000\032\023\uffc8\041\030\042\012" +
    "\043\021\044\016\045\047\046\227\071\175\072\074\073" +
    "\076\074\075\075\067\001\002\000\004\023\uffc9\001\002" +
    "\000\004\023\uffc7\001\002\000\006\016\236\023\uffc6\001" +
    "\002\000\004\023\uffca\001\002\000\006\010\uffda\016\224" +
    "\001\002\000\004\010\uffdb\001\002\000\056\002\uffe7\022" +
    "\uffe7\026\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\051\uffe7\053\uffe7\055\uffe7\056\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\071\uffe7" +
    "\072\uffe7\001\002\000\056\002\uffc4\022\uffc4\026\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\051\uffc4" +
    "\053\uffc4\055\uffc4\056\uffc4\060\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\071\uffc4\072\uffc4\001\002" +
    "\000\004\017\250\001\002\000\056\002\uffc5\022\uffc5\026" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\051\uffc5\053\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\071\uffc5\072\uffc5" +
    "\001\002\000\012\002\ufffa\026\ufffa\056\ufffa\072\ufffa\001" +
    "\002\000\056\002\uffec\022\uffec\026\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\051\uffec\053\uffec\055" +
    "\uffec\056\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\071\uffec\072\uffec\001\002\000\014\071" +
    "\072\072\074\073\076\074\075\075\067\001\002\000\004" +
    "\023\255\001\002\000\004\025\256\001\002\000\050\022" +
    "\050\026\ufff9\041\030\042\012\043\021\044\016\045\047" +
    "\046\046\051\037\053\014\055\044\060\022\061\027\062" +
    "\045\063\033\064\015\065\017\066\013\071\023\001\002" +
    "\000\004\026\260\001\002\000\056\002\uffa4\022\uffa4\026" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\051\uffa4\053\uffa4\055\uffa4\056\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\071\uffa4\072\uffa4" +
    "\001\002\000\056\002\ufff4\022\ufff4\026\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\051\ufff4\053\ufff4" +
    "\055\ufff4\056\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\071\ufff4\072\ufff4\001\002\000\014" +
    "\071\072\072\074\073\076\074\075\075\067\001\002\000" +
    "\004\023\264\001\002\000\004\025\265\001\002\000\050" +
    "\022\050\026\ufff9\041\030\042\012\043\021\044\016\045" +
    "\047\046\046\051\037\053\014\055\044\060\022\061\027" +
    "\062\045\063\033\064\015\065\017\066\013\071\023\001" +
    "\002\000\004\026\267\001\002\000\056\002\uffa5\022\uffa5" +
    "\026\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\051\uffa5\053\uffa5\055\uffa5\056\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\071\uffa5\072" +
    "\uffa5\001\002\000\004\071\271\001\002\000\004\023\272" +
    "\001\002\000\004\017\273\001\002\000\056\002\uffa0\022" +
    "\uffa0\026\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\051\uffa0\053\uffa0\055\uffa0\056\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\071\uffa0" +
    "\072\uffa0\001\002\000\014\071\175\072\074\073\076\074" +
    "\075\075\067\001\002\000\006\016\301\023\uffa1\001\002" +
    "\000\004\023\277\001\002\000\004\017\300\001\002\000" +
    "\056\002\uffa3\022\uffa3\026\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\051\uffa3\053\uffa3\055\uffa3\056" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\071\uffa3\072\uffa3\001\002\000\014\071\175\072" +
    "\074\073\076\074\075\075\067\001\002\000\004\023\uffa2" +
    "\001\002\000\014\071\072\072\074\073\076\074\075\075" +
    "\067\001\002\000\004\023\305\001\002\000\004\025\306" +
    "\001\002\000\050\022\050\026\ufff9\041\030\042\012\043" +
    "\021\044\016\045\047\046\046\051\037\053\014\055\044" +
    "\060\022\061\027\062\045\063\033\064\015\065\017\066" +
    "\013\071\023\001\002\000\004\026\310\001\002\000\004" +
    "\054\312\001\002\000\056\002\uffc2\022\uffc2\026\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\051\uffc2" +
    "\053\uffc2\055\uffc2\056\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\071\uffc2\072\uffc2\001\002" +
    "\000\004\025\313\001\002\000\050\022\050\026\ufff9\041" +
    "\030\042\012\043\021\044\016\045\047\046\046\051\037" +
    "\053\014\055\044\060\022\061\027\062\045\063\033\064" +
    "\015\065\017\066\013\071\023\001\002\000\004\026\315" +
    "\001\002\000\056\002\uffc1\022\uffc1\026\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\051\uffc1\053\uffc1" +
    "\055\uffc1\056\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\071\uffc1\072\uffc1\001\002\000\016" +
    "\023\uff9d\071\072\072\074\073\076\074\075\075\067\001" +
    "\002\000\004\023\322\001\002\000\016\023\uff9d\071\072" +
    "\072\074\073\076\074\075\075\067\001\002\000\004\023" +
    "\uff9e\001\002\000\004\017\323\001\002\000\056\002\uff9f" +
    "\022\uff9f\026\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\051\uff9f\053\uff9f\055\uff9f\056\uff9f\060\uff9f" +
    "\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\071" +
    "\uff9f\072\uff9f\001\002\000\004\015\325\001\002\000\004" +
    "\071\326\001\002\000\004\017\327\001\002\000\054\002" +
    "\ufffc\022\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\047\005\050\004\051\ufffc\053\ufffc\055\ufffc\060" +
    "\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc" +
    "\071\ufffc\001\002\000\050\002\uffff\022\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\051\uffff\053\uffff" +
    "\055\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065" +
    "\uffff\066\uffff\071\uffff\001\002\000\004\017\335\001\002" +
    "\000\004\017\333\001\002\000\054\002\ufffc\022\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\005" +
    "\050\004\051\ufffc\053\ufffc\055\ufffc\060\ufffc\061\ufffc\062" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\071\ufffc\001\002" +
    "\000\050\002\ufffd\022\ufffd\041\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\051\ufffd\053\ufffd\055\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\071" +
    "\ufffd\001\002\000\054\002\ufffc\022\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\005\050\004\051" +
    "\ufffc\053\ufffc\055\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc" +
    "\064\ufffc\065\ufffc\066\ufffc\071\ufffc\001\002\000\050\002" +
    "\ufffe\022\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\051\ufffe\053\ufffe\055\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\071\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\006\002\006\005\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\004\040\006\035\007\025" +
    "\010\050\011\042\012\037\016\024\020\052\026\034\027" +
    "\053\030\051\031\023\036\010\040\017\042\030\043\054" +
    "\044\041\046\033\047\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\006\035" +
    "\007\250\010\050\011\042\012\037\016\024\020\052\026" +
    "\034\027\053\030\051\031\023\036\010\040\017\042\030" +
    "\043\054\044\041\046\033\047\031\001\001\000\010\014" +
    "\246\016\067\017\070\001\001\000\004\013\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\006\035\007\062" +
    "\010\050\011\042\012\037\016\024\020\052\026\034\027" +
    "\053\030\051\031\023\036\010\040\017\042\030\043\054" +
    "\044\041\046\033\047\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\072\016\067" +
    "\017\070\001\001\000\002\001\001\000\004\015\144\001" +
    "\001\000\004\015\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\101\001\001\000\002" +
    "\001\001\000\010\014\116\016\067\017\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\120\001\001\000\002\001\001\000\010\014\122" +
    "\016\067\017\070\001\001\000\004\021\125\001\001\000" +
    "\002\001\001\000\010\014\127\016\067\017\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\130\001" +
    "\001\000\002\001\001\000\010\014\143\016\067\017\070" +
    "\001\001\000\002\001\001\000\010\014\142\016\067\017" +
    "\070\001\001\000\010\014\141\016\067\017\070\001\001" +
    "\000\010\014\140\016\067\017\070\001\001\000\010\014" +
    "\137\016\067\017\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\006\035\007\151\010\050\011" +
    "\042\012\037\016\024\020\052\026\034\027\053\030\051" +
    "\031\023\036\010\040\017\042\030\043\054\044\041\046" +
    "\033\047\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\155\017\156\032\157\001" +
    "\001\000\004\035\206\001\001\000\004\035\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\006\035\007\166\010\050\011\042\012\037\016" +
    "\024\020\052\026\034\027\053\030\051\031\023\036\010" +
    "\040\017\042\030\043\054\044\041\046\033\047\031\001" +
    "\001\000\004\037\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\006\035\007\172\010\050\011\042\012" +
    "\037\016\024\020\052\026\034\027\053\030\051\031\023" +
    "\036\010\040\017\042\030\043\054\044\041\046\033\047" +
    "\031\001\001\000\002\001\001\000\004\017\175\001\001" +
    "\000\002\001\001\000\004\034\200\001\001\000\010\016" +
    "\155\017\156\032\205\001\001\000\010\016\155\017\156" +
    "\032\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\155\017\156\032\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\207\016" +
    "\067\017\070\001\001\000\004\034\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\214\001\001\000" +
    "\010\014\216\016\067\017\070\001\001\000\002\001\001" +
    "\000\010\014\220\016\067\017\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\243\001\001\000\010\011" +
    "\225\017\227\024\230\001\001\000\004\017\240\001\001" +
    "\000\002\001\001\000\004\025\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\006\035\007\233\010\050" +
    "\011\042\012\037\016\024\020\052\026\034\027\053\030" +
    "\051\031\023\036\010\040\017\042\030\043\054\044\041" +
    "\046\033\047\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\225\017\227\024\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\155" +
    "\017\156\032\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\006\035\007\256\010\050\011\042\012\037" +
    "\016\024\020\052\026\034\027\053\030\051\031\023\036" +
    "\010\040\017\042\030\043\054\044\041\046\033\047\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\155\017\156\032\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\006\035\007\265\010" +
    "\050\011\042\012\037\016\024\020\052\026\034\027\053" +
    "\030\051\031\023\036\010\040\017\042\030\043\054\044" +
    "\041\046\033\047\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\274\045\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\274\045\301\001\001\000\002" +
    "\001\001\000\010\016\155\017\156\032\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\006\035\007\306" +
    "\010\050\011\042\012\037\016\024\020\052\026\034\027" +
    "\053\030\051\031\023\036\010\040\017\042\030\043\054" +
    "\044\041\046\033\047\031\001\001\000\002\001\001\000" +
    "\004\033\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\006\035\007\313\010\050\011\042\012\037\016" +
    "\024\020\052\026\034\027\053\030\051\031\023\036\010" +
    "\040\017\042\030\043\054\044\041\046\033\047\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\155" +
    "\017\156\032\317\051\316\001\001\000\002\001\001\000" +
    "\012\016\155\017\156\032\317\051\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\333\001\001\000\002\001\001\000\004" +
    "\005\335\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/**---------------CUANDO HAY ERROR SINTACTICO IMPRIME EN CONSOLA-----------------**/
	public void syntax_error(Symbol  s){

Sintactico.error="Error Sintactico en la Linea "+(s.left+1) + " Y Columna "+s.right+". Identificador "
		+s.value+" "+s.sym+" no reconocido";  

		System.out.println("Error Sintactico en la Linea "+(s.left+1) + " Columna "+s.right+". Identificador "
		+s.value+" "+s.sym+" no reconocido");


	}

	/**----------------Si no es posible recuperacion de errores-----**/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{

	}

    public static Nodo padre;
      public static ArrayList<Object[]> Variables;
      public static ArrayList<Object[]> MetodosFunc;
      public static ArrayList<String> comentarios;
      public static int parametro=0;
      public static int lineas=0;
      public static String clase="";
   public static String error="";
       public static int cont = 0;




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= importar cuerpo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo nd = new Nodo();
    nd.setEtiqueta("INICIO");
    nd.setValor("inicio");
    nd.setId(Sintactico.cont);
    Sintactico.cont++;
    //nd2.setEtiqueta("CUERPO");
    //nd2.setId(parser.cont);
    //parser.cont++;
    nd.AddHijos((Nodo) n);
    nd.AddHijos((Nodo)n1);
    //nd.AddHijos((Nodo)nd2);
    //nd.AddHijos((Nodo)nd3);
    Sintactico.padre = (Nodo) nd;
    RESULT = nd;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // importar ::= IMPORTAR IDENTIFICADOR PUNTO IDENTIFICADOR PUNTOCOMA importar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

  Nodo nd=new Nodo(); nd.setEtiqueta("IMPORTAR"); nd.setId(Sintactico.cont); nd.setValor(n.toString());
  Sintactico.cont++;

  Nodo nd2=new Nodo(); nd2.setEtiqueta("ID"); nd2.setId(Sintactico.cont); nd2.setValor(n1.toString());
  Sintactico.cont++;

  Nodo nd3=new Nodo(); nd3.setEtiqueta("Punto"); nd3.setId(Sintactico.cont); nd3.setValor(n2.toString());
  Sintactico.cont++;

  Nodo nd4=new Nodo(); nd4.setEtiqueta("ID"); nd4.setId(Sintactico.cont); nd4.setValor(n3.toString());
  Sintactico.cont++;

  Nodo nd5=new Nodo(); nd5.setEtiqueta("PUNTOYCOMA"); nd5.setId(Sintactico.cont); nd5.setValor(n4.toString());
  Sintactico.cont++;

  nd.AddHijos((Nodo)nd2);
  nd.AddHijos((Nodo)nd3);
  nd.AddHijos((Nodo)nd4);
  if(n5!=null) nd.AddHijos((Nodo)n5);
  RESULT= nd;



              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // importar ::= DEFINIR DECIMAL PUNTOCOMA importar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
 
  Nodo nd=new Nodo();
  nd.setEtiqueta("Definir");
  nd.setId(Sintactico.cont);
  nd.setValor(n.toString());
  Sintactico.cont++;


  Nodo nd2=new Nodo(); nd2.setEtiqueta("DECiMAL"); nd2.setId(Sintactico.cont); nd2.setValor(n1.toString());
  Sintactico.cont++;

  Nodo nd3=new Nodo(); nd3.setEtiqueta("PUNTOCOMA"); nd3.setId(Sintactico.cont); nd3.setValor(n2.toString());
  Sintactico.cont++;

 nd.AddHijos((Nodo)nd2);
  nd.AddHijos((Nodo)nd3);
  if(n3!=null) nd.AddHijos((Nodo)n3);
  RESULT= nd;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importar ::= DEFINIR CADENA PUNTOCOMA importar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
 
  Nodo nd=new Nodo();
  nd.setEtiqueta("Definir");
  nd.setId(Sintactico.cont);
  nd.setValor(n.toString());
  Sintactico.cont++;
  String cadena=n1.toString();
  cadena=cadena.replace("\"","");


  Nodo nd2=new Nodo(); nd2.setEtiqueta("CADENA"); nd2.setId(Sintactico.cont); nd2.setValor(cadena);
  Sintactico.cont++;

  Nodo nd3=new Nodo(); nd3.setEtiqueta("PUNTOCOMA"); nd3.setId(Sintactico.cont); nd3.setValor(n2.toString());
  Sintactico.cont++;

  nd.AddHijos((Nodo)nd2);
  nd.AddHijos((Nodo)nd3);
  if(n3!=null) nd.AddHijos((Nodo)n3);
  RESULT= nd;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importar ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= lista 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
 Nodo nd=new Nodo();
  nd.setEtiqueta("CUERPO");
  nd.setId(Sintactico.cont);
  nd.setValor("Cuerpo");
  Sintactico.cont++;

  nd.AddHijos((Nodo)n);
RESULT=nd;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista ::= estructura lista 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo nd=new Nodo();
  nd.setEtiqueta("Lista");
  nd.setId(Sintactico.cont);
  nd.setValor("Lista");
  Sintactico.cont++;

  if(n!=null)nd.AddHijos((Nodo)n);
  if(n1!=null) nd.AddHijos((Nodo)n1);
  RESULT=nd;

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // estructura ::= declaracion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo nd=new Nodo();
                 nd.setEtiqueta("Declaracion");
                nd.setId(Sintactico.cont);
                nd.setValor("declaracion");
                Sintactico.cont++;

                nd.AddHijos((Nodo)n);
                RESULT=nd;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // estructura ::= asignacion 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructura ::= metodofuncion 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estructura ::= retorno 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura ::= llamadas PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estructura ::= principal 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura ::= sentenciasi 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura ::= sentenciaselecciona 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura ::= sentenciapara 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estructura ::= condicionhasta 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura ::= condicionmientras 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estructura ::= DETENER PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estructura ::= CONTINUAR PUNTOCOMA 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // estructura ::= mostrar 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estructura ::= dibujarast 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructura ::= dibujarexp 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estructura",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion ::= ctipo varios expresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("Declaracion");
                    nd.setId(Sintactico.cont);
                    nd.setValor("declaracion");
                    Sintactico.cont++;

                    nd.AddHijos((Nodo)n);
                    nd.AddHijos((Nodo)n1);
                    nd.AddHijos((Nodo)n2);
                    RESULT=nd;

                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion ::= varios expresion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ctipo ::= CHAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("Char");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ctipo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ctipo ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("STRING");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ctipo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ctipo ::= VACIO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("VACIO");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ctipo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ctipo ::= BOOL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("BOOL");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ctipo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ctipo ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("INT");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ctipo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ctipo ::= DOUBLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("DOUBLE");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ctipo",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo ::= DIGITO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("DIGITO");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("IDENTIFICADOR");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("ID");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("DECIMAL");
                    nd.setId(Sintactico.cont);
                    nd.setValor(n.toString());
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo nd=new Nodo();
                    nd.setEtiqueta("CADENA");
                    nd.setId(Sintactico.cont);
                    String caden=n.toString();
                    caden=caden.replace("\"","");
                    nd.setValor(caden);
                    Sintactico.cont++;
                    RESULT=nd;

          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // varios ::= IDENTIFICADOR COMA varios 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
  Nodo nd=new Nodo();
  nd.setEtiqueta("VARIOS");
  nd.setId(Sintactico.cont);
  nd.setValor("varios");
  Sintactico.cont++;

  Nodo nd2=new Nodo(); nd2.setEtiqueta("IDENTIFICADOR"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
  Sintactico.cont++;

  Nodo nd3=new Nodo(); nd3.setEtiqueta("COMA"); nd3.setId(Sintactico.cont); nd3.setValor(n1.toString());
  Sintactico.cont++;

  nd.AddHijos((Nodo)nd2);
  nd.AddHijos((Nodo)nd3);
  nd.AddHijos((Nodo)n2);

RESULT=nd;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varios",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // varios ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
     Nodo nd2=new Nodo(); nd2.setEtiqueta("IDENTIFICADOR"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
      Sintactico.cont++;
      RESULT=nd2;

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varios",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= IGUAL listaexp PUNTOCOMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
 Nodo nd=new Nodo();
  nd.setEtiqueta("EXPRESION");
  nd.setId(Sintactico.cont);
  nd.setValor("expresion");
  Sintactico.cont++;

  Nodo nd2=new Nodo(); nd2.setEtiqueta("IGUAL"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
  Sintactico.cont++;

  Nodo nd3=new Nodo(); nd3.setEtiqueta("PUNTOCOMA"); nd3.setId(Sintactico.cont); nd3.setValor(n2.toString());
  Sintactico.cont++;

  nd.AddHijos((Nodo)nd2);
  nd.AddHijos((Nodo)n1);
  nd.AddHijos((Nodo)nd3);
RESULT=nd;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= IGUAL PARAB listaexp PARC PUNTOCOMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
 Nodo nd=new Nodo();
  nd.setEtiqueta("EXPRESION");
  nd.setId(Sintactico.cont);
  nd.setValor("expresion");
  Sintactico.cont++;

  Nodo nd2=new Nodo(); nd2.setEtiqueta("IGUAL"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
  Sintactico.cont++;

  Nodo nd3=new Nodo(); nd3.setEtiqueta("PUNTOCOMA"); nd3.setId(Sintactico.cont); nd3.setValor(n4.toString());
  Sintactico.cont++;

  Nodo nd4=new Nodo(); nd4.setEtiqueta("PARAB"); nd4.setId(Sintactico.cont); nd4.setValor(n1.toString());
  Sintactico.cont++;

  Nodo nd5=new Nodo(); nd5.setEtiqueta("PARC"); nd5.setId(Sintactico.cont); nd5.setValor(n3.toString());
  Sintactico.cont++;

  nd.AddHijos((Nodo)nd2);
  nd.AddHijos((Nodo)nd3);
  nd.AddHijos((Nodo)nd4);
  nd.AddHijos((Nodo)nd5);
  nd.AddHijos((Nodo)n2);
RESULT=nd;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaexp ::= tipo operador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

    Nodo nd=new Nodo();
    nd.setEtiqueta("LISTAEXP");
    nd.setId(Sintactico.cont);
    nd.setValor("listaexp");
    Sintactico.cont++;

    nd.AddHijos((Nodo)n);
    if(n1!=null)nd.AddHijos((Nodo)n1);
    RESULT=nd;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexp",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaexp ::= llamadas operador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo nd=new Nodo();
    nd.setEtiqueta("LISTAEXP");
    nd.setId(Sintactico.cont);
    nd.setValor("listaexp");
    Sintactico.cont++;

    nd.AddHijos((Nodo)n);
    if(n1!=null)nd.AddHijos((Nodo)n1);
    RESULT=nd;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexp",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operador ::= MAS listaexp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo nd=new Nodo();
    nd.setEtiqueta("OPERADOR");
    nd.setId(Sintactico.cont);
    nd.setValor("operador");
    Sintactico.cont++;

    Nodo nd2=new Nodo(); nd2.setEtiqueta("MAS"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
    Sintactico.cont++;
    
    nd.AddHijos((Nodo)nd2);
    nd.AddHijos((Nodo)n1);
    RESULT=nd;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operador ::= MENOS listaexp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo nd=new Nodo();
    nd.setEtiqueta("OPERADOR");
    nd.setId(Sintactico.cont);
    nd.setValor("operador");
    Sintactico.cont++;

    Nodo nd2=new Nodo(); nd2.setEtiqueta("MENOS"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
    Sintactico.cont++;
    
    nd.AddHijos((Nodo)nd2);
    nd.AddHijos((Nodo)n1);
    RESULT=nd;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operador ::= DIVISION listaexp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo nd=new Nodo();
    nd.setEtiqueta("OPERADOR");
    nd.setId(Sintactico.cont);
    nd.setValor("operador");
    Sintactico.cont++;

    Nodo nd2=new Nodo(); nd2.setEtiqueta("DIVISON"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
    Sintactico.cont++;
    
    nd.AddHijos((Nodo)nd2);
    nd.AddHijos((Nodo)n1);
    RESULT=nd;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operador ::= MULTIPLICACION listaexp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Nodo nd=new Nodo();
    nd.setEtiqueta("OPERADOR");
    nd.setId(Sintactico.cont);
    nd.setValor("operador");
    Sintactico.cont++;

    Nodo nd2=new Nodo(); nd2.setEtiqueta("MULTIPLICACION"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
    Sintactico.cont++;
    
    nd.AddHijos((Nodo)nd2);
    nd.AddHijos((Nodo)n1);
    RESULT=nd;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operador ::= POT listaexp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
   Nodo nd=new Nodo();
    nd.setEtiqueta("OPERADOR");
    nd.setId(Sintactico.cont);
    nd.setValor("operador");
    Sintactico.cont++;

    Nodo nd2=new Nodo(); nd2.setEtiqueta("POTENCIA"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
    Sintactico.cont++;
    
    nd.AddHijos((Nodo)nd2);
    nd.AddHijos((Nodo)n1);
    RESULT=nd;
   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operador ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // llamadas ::= IDENTIFICADOR PARAB listaexp paraenvio PARC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
  Nodo nd=new Nodo();
  nd.setEtiqueta("LLAMADAS");
  nd.setId(Sintactico.cont);
  nd.setValor("llamadas");
  Sintactico.cont++;

  Nodo nd2=new Nodo(); nd2.setEtiqueta("IDENTIFICADOR"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
  Sintactico.cont++;

  Nodo nd3=new Nodo(); nd3.setEtiqueta("PARAB"); nd3.setId(Sintactico.cont); nd3.setValor(n1.toString());
  Sintactico.cont++;
  
  Nodo nd4=new Nodo(); nd4.setEtiqueta("PARC"); nd4.setId(Sintactico.cont); nd4.setValor(n4.toString());
  Sintactico.cont++;

  nd.AddHijos((Nodo)nd2);
  nd.AddHijos((Nodo)nd3);
  nd.AddHijos((Nodo)nd4);
  nd.AddHijos((Nodo)n2);
  if(n3!=null)nd.AddHijos((Nodo)n3);
  RESULT=nd;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadas",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // llamadas ::= IDENTIFICADOR PARAB PARC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
  Nodo nd=new Nodo();
  nd.setEtiqueta("LLAMADAS");
  nd.setId(Sintactico.cont);
  nd.setValor("llamadas");
  Sintactico.cont++;

  Nodo nd2=new Nodo(); nd2.setEtiqueta("IDENTIFICADOR"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
  Sintactico.cont++;

  Nodo nd3=new Nodo(); nd3.setEtiqueta("PARAB"); nd3.setId(Sintactico.cont); nd3.setValor(n1.toString());
  Sintactico.cont++;
  
  Nodo nd4=new Nodo(); nd4.setEtiqueta("PARC"); nd4.setId(Sintactico.cont); nd4.setValor(n2.toString());
  Sintactico.cont++;

  nd.AddHijos((Nodo)nd2);
  nd.AddHijos((Nodo)nd3);
  nd.AddHijos((Nodo)nd4);
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadas",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paraenvio ::= COMA listaexp paraenvio 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                 Nodo nd=new Nodo();
                  nd.setEtiqueta("paraenvio");
                  nd.setId(Sintactico.cont);
                  nd.setValor("paraenvio");
                  Sintactico.cont++;

                  Nodo nd2=new Nodo(); nd2.setEtiqueta("COMA"); nd2.setId(Sintactico.cont); nd2.setValor(n.toString());
                  Sintactico.cont++;

                  nd.AddHijos((Nodo)nd2);
                  nd.AddHijos((Nodo)n1);
                  if(n2!=null)nd.AddHijos((Nodo)n2);
                  RESULT=nd;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paraenvio",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // paraenvio ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paraenvio",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // metodofuncion ::= ctipo IDENTIFICADOR PARAB parametros PARC LLAVEA lista LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodofuncion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros ::= ctipo tipo separador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros ::= tipo separador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // separador ::= COMA parametros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("separador",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // separador ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("separador",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // retorno ::= RETORNO listaexp PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // retorno ::= RETORNO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // principal ::= VACIO PRINCIPAL PARAB PARC LLAVEA lista LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("principal",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentenciasi ::= SI PARAB condicion PARC LLAVEA lista LLAVEC sentenciasino 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciasi",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentenciasino ::= SINO LLAVEA lista LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciasino",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicion ::= tipo simbolo tipo partop 
            {
              Object RESULT =null;
		
String adena="";
RESULT=adena;


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicion ::= tipo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicion ::= llamadas simbolo listaexp partop 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simbolo ::= MAYOR 
            {
              Object RESULT =null;
		
 String dato=">";
 RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simbolo ::= MAYORIGUAL 
            {
              Object RESULT =null;
		
 String dato=">=";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simbolo ::= IGUAL 
            {
              Object RESULT =null;
		
 String dato="==";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simbolo ::= DISTINTO 
            {
              Object RESULT =null;
		
 String dato="!=";
  RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simbolo ::= MENOR 
            {
              Object RESULT =null;
		
 String dato="<";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simbolo ::= IGUALIGUAL 
            {
              Object RESULT =null;
		
 String dato="<";
 RESULT=dato;
 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simbolo ::= MENORIGUAL 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simbolo ::= MAS 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simbolo ::= INCREMENTO 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simbolo ::= MENOS 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simbolo ::= DECREMENTO 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simbolo ::= DIVISION 
            {
              Object RESULT =null;
		
 String dato="<=";
  RESULT=dato;
  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simbolo ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // partop ::= AND condicion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            String dato="&& "+n1;
            RESULT=dato;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("partop",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // partop ::= OR condicion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            String dato="|| "+n1;
            RESULT=dato;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("partop",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // partop ::= NOT condicion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            String dato="!"+n1;
            RESULT=dato;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("partop",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // partop ::= XOR 
            {
              Object RESULT =null;
		
            String dato="";
            RESULT=dato;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("partop",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // partop ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("partop",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaselecciona ::= SELECCIONA PARAB condicion PARC LLAVEA estrucselec LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaselecciona",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // estrucselec ::= DIGITO DOSPUNTOS lista estrucselec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estrucselec",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // estrucselec ::= DEFECTO DOSPUNTOS lista 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estrucselec",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // estrucselec ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("estrucselec",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciapara ::= PARA PARAB condicionpara PARC LLAVEA lista LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciapara",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicionpara ::= DOUBLE IDENTIFICADOR IGUAL listaexp PUNTOCOMA IDENTIFICADOR simbolo listaexp PUNTOCOMA simbolo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionpara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicionhasta ::= HASTA PARAB condicion PARC LLAVEA lista LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionhasta",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicionmientras ::= MIENTRAS PARAB condicion PARC LLAVEA lista LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionmientras",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // mostrar ::= MOSTRAR PARAB condmostrar PARC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mostrar",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condmostrar ::= tipo COMA condmostrar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condmostrar",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condmostrar ::= tipo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condmostrar",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dibujarast ::= DIBUJARAST PARAB IDENTIFICADOR PARC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dibujarast",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dibujarexp ::= DIBUJAREXP PARAB condicionexp PARC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dibujarexp",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // condicionexp ::= condicion condicionexp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionexp",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condicionexp ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionexp",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // dibujarts ::= DIBUJARTS PARAB PARC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dibujarts",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
