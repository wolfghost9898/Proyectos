
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package practica1;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import practica1.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analizadosin extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public analizadosin() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analizadosin(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizadosin(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\007\000\002\005" +
    "\004\000\002\005\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\006\007" +
    "\000\002\006\010\000\002\006\010\000\002\006\007\000" +
    "\002\011\005\000\002\011\002\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\012\004\000" +
    "\002\012\005\000\002\013\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\002\000" +
    "\002\004\006\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\002\000\002\026\004\000\002\026" +
    "\002\000\002\027\004\000\002\016\006\000\002\017\005" +
    "\000\002\020\005\000\002\020\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\010\000\002\022\006\000\002" +
    "\022\005\000\002\023\005\000\002\023\005\000\002\030" +
    "\013\000\002\030\011\000\002\031\007\000\002\031\002" +
    "\000\002\024\004\000\002\024\002\000\002\032\015\000" +
    "\002\033\012\000\002\034\006\000\002\034\004\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\002\000" +
    "\002\035\004\000\002\035\002\000\002\041\006\000\002" +
    "\036\004\000\002\036\002\000\002\042\007\000\002\043" +
    "\016\000\002\044\007\000\002\045\010\000\002\046\004" +
    "\000\002\046\004\000\002\051\005\000\002\052\005\000" +
    "\002\052\002\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\047\005\000\002\047\002\000\002\053" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\016\004\001\002\000\004\071\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\040\017\ufffe\021\021\024\030\027\015\030\023\034" +
    "\013\035\040\041\031\044\011\051\010\052\026\053\012" +
    "\054\036\055\027\071\024\001\002\000\006\034\333\035" +
    "\332\001\002\000\004\045\314\001\002\000\010\024\uffe8" +
    "\026\uffe8\071\uffe8\001\002\000\010\071\064\072\063\073" +
    "\067\001\002\000\052\017\ufff6\021\ufff6\024\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\044\ufff6\045\ufff6\051\ufff6\052\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\071\ufff6\001\002\000\010\071\127\072" +
    "\126\073\133\001\002\000\004\017\305\001\002\000\010" +
    "\024\217\026\220\071\216\001\002\000\052\017\ufff4\021" +
    "\ufff4\024\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\040\ufff4\041\ufff4\042\ufff4\044\ufff4\045\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\071\ufff4\001\002" +
    "\000\004\065\211\001\002\000\052\017\ufff7\021\ufff7\024" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\044\ufff7\045\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\071\ufff7\001\002\000\010" +
    "\071\064\072\063\073\067\001\002\000\010\011\120\066" +
    "\121\074\116\001\002\000\052\017\ufffc\021\ufffc\024\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\040" +
    "\ufffc\041\ufffc\042\ufffc\044\ufffc\045\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\071\ufffc\001\002\000\010\024" +
    "\uffe9\026\uffe9\071\uffe9\001\002\000\010\024\uffe6\026\uffe6" +
    "\071\uffe6\001\002\000\004\071\110\001\002\000\040\021" +
    "\021\024\030\027\015\030\023\034\013\035\040\041\031" +
    "\042\ufffe\044\011\051\010\052\026\053\012\054\036\055" +
    "\027\071\024\001\002\000\052\017\ufffd\021\ufffd\024\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\044\ufffd\045\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\071\ufffd\001\002\000\052\017" +
    "\ufff9\021\ufff9\024\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\040\ufff9\041\ufff9\042\ufff9\044\ufff9\045" +
    "\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\071\ufff9" +
    "\001\002\000\052\017\ufff8\021\ufff8\024\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\044\ufff8\045\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\071\ufff8\001\002\000\052\017\ufff0\021\ufff0" +
    "\024\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\044\ufff0\045\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\071\ufff0\001\002\000" +
    "\010\024\uffe7\026\uffe7\071\uffe7\001\002\000\052\017\ufffa" +
    "\021\ufffa\024\ufffa\027\ufffa\030\ufffa\031\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\040\ufffa\041\ufffa\042\ufffa\044\ufffa\045\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\071\ufffa\001" +
    "\002\000\004\071\045\001\002\000\052\017\ufff5\021\ufff5" +
    "\024\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\044\ufff5\045\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\071\ufff5\001\002\000" +
    "\052\017\ufffb\021\ufffb\024\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\040\ufffb\041\ufffb\042\ufffb\044" +
    "\ufffb\045\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\071\ufffb\001\002\000\052\017\ufffe\021\021\024\030\027" +
    "\015\030\023\031\ufffe\033\ufffe\034\013\035\040\040\ufffe" +
    "\041\031\042\ufffe\044\011\045\ufffe\051\010\052\026\053" +
    "\012\054\036\055\027\071\024\001\002\000\016\017\uffff" +
    "\031\uffff\033\uffff\040\uffff\042\uffff\045\uffff\001\002\000" +
    "\004\020\046\001\002\000\004\061\047\001\002\000\004" +
    "\011\050\001\002\000\004\072\051\001\002\000\004\036" +
    "\052\001\002\000\004\072\053\001\002\000\004\037\054" +
    "\001\002\000\004\072\055\001\002\000\040\021\021\024" +
    "\030\027\015\030\023\034\013\035\040\040\ufffe\041\031" +
    "\044\011\051\010\052\026\053\012\054\036\055\027\071" +
    "\024\001\002\000\004\040\057\001\002\000\052\017\uffa4" +
    "\021\uffa4\024\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\040\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\071\uffa4\001" +
    "\002\000\004\042\061\001\002\000\004\043\062\001\002" +
    "\000\010\071\064\072\063\073\067\001\002\000\076\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\017\uff9a" +
    "\021\uff9a\024\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\040\uff9a\041\uff9a\042\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\071\uff9a\001\002\000\076\004\uff9c" +
    "\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\017\uff9c\021" +
    "\uff9c\024\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\040\uff9c\041\uff9c\042\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\071\uff9c\001\002\000\052\017\uffa3\021" +
    "\uffa3\024\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\040\uffa3\041\uffa3\042\uffa3\044\uffa3\045\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\071\uffa3\001\002" +
    "\000\076\004\101\005\075\006\071\007\076\010\073\011" +
    "\077\017\uffab\021\uffab\024\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\034\uffab\035\uffab\040\uffab\041\uffab\042" +
    "\uffab\044\uffab\045\uffab\046\070\047\102\050\100\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\071\uffab\001\002\000" +
    "\076\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\017\uff9b\021\uff9b\024\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\071\uff9b\001\002\000\010" +
    "\071\064\072\063\073\067\001\002\000\010\071\uffaf\072" +
    "\uffaf\073\uffaf\001\002\000\010\071\064\072\063\073\067" +
    "\001\002\000\010\071\uffb0\072\uffb0\073\uffb0\001\002\000" +
    "\054\017\uffb5\021\uffb5\024\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\044\uffb5\045\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\071\uffb5\001\002\000\010\071\uffb3\072\uffb3\073" +
    "\uffb3\001\002\000\010\071\uffb4\072\uffb4\073\uffb4\001\002" +
    "\000\010\071\uffb2\072\uffb2\073\uffb2\001\002\000\010\071" +
    "\064\072\063\073\067\001\002\000\010\071\uffb1\072\uffb1" +
    "\073\uffb1\001\002\000\010\071\064\072\063\073\067\001" +
    "\002\000\054\017\uffad\021\uffad\024\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\040\uffad\041" +
    "\uffad\042\uffad\044\uffad\045\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\071\uffad\001\002\000\054\017\uffac\021" +
    "\uffac\024\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\040\uffac\041\uffac\042\uffac\044\uffac\045" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\071\uffac" +
    "\001\002\000\062\017\uffab\021\uffab\024\uffab\027\uffab\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\040\uffab" +
    "\041\uffab\042\uffab\044\uffab\045\uffab\046\070\047\102\050" +
    "\100\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\071\uffab" +
    "\001\002\000\054\017\uffb6\021\uffb6\024\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\044\uffb6\045\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\071\uffb6\001\002\000\054\017\uffae" +
    "\021\uffae\024\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\040\uffae\041\uffae\042\uffae\044\uffae" +
    "\045\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\071" +
    "\uffae\001\002\000\004\074\111\001\002\000\004\075\112" +
    "\001\002\000\040\017\ufffe\021\021\024\030\027\015\030" +
    "\023\034\013\035\040\041\031\044\011\051\010\052\026" +
    "\053\012\054\036\055\027\071\024\001\002\000\004\017" +
    "\114\001\002\000\004\024\115\001\002\000\052\017\uffbd" +
    "\021\uffbd\024\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\071\uffbd\001" +
    "\002\000\012\071\155\072\154\073\157\075\uffcd\001\002" +
    "\000\004\011\120\001\002\000\010\071\127\072\126\073" +
    "\133\001\002\000\004\071\123\001\002\000\052\017\uffdf" +
    "\021\uffdf\024\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\071\uffdf\001" +
    "\002\000\004\067\124\001\002\000\072\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\017\uffc1\021\uffc1\024\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\044\uffc1\045\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\066\121\070\uffc1\071\uffc1\075\uffc1" +
    "\001\002\000\070\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\017\uffc2\021\uffc2\024\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\040\uffc2\041\uffc2\042\uffc2\044" +
    "\uffc2\045\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\070\uffc2\071\uffc2\075\uffc2\001\002\000\066\012\136\013" +
    "\140\014\137\015\134\017\uffd2\021\uffd2\024\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\044\uffd2\045\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\070\141\071\uffd2\075\uffd2\001\002\000" +
    "\072\012\136\013\140\014\137\015\134\017\uffd2\021\uffd2" +
    "\024\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\066\121\070\141\071" +
    "\uffd2\074\151\075\uffd2\001\002\000\052\017\uffdd\021\uffdd" +
    "\024\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\071\uffdd\001\002\000" +
    "\066\012\136\013\140\014\137\015\134\017\uffd2\021\uffd2" +
    "\024\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\070\141\071\uffd2\075" +
    "\uffd2\001\002\000\066\012\136\013\140\014\137\015\134" +
    "\017\uffd2\021\uffd2\024\uffd2\027\uffd2\030\uffd2\031\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2" +
    "\045\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\070" +
    "\141\071\uffd2\075\uffd2\001\002\000\066\012\136\013\140" +
    "\014\137\015\134\017\uffd2\021\uffd2\024\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\044\uffd2\045\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\070\141\071\uffd2\075\uffd2\001\002\000\010" +
    "\071\127\072\126\073\133\001\002\000\054\017\uffdb\021" +
    "\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb\045\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\071\uffdb\075\uffdb" +
    "\001\002\000\010\071\127\072\126\073\133\001\002\000" +
    "\010\071\127\072\126\073\133\001\002\000\010\071\127" +
    "\072\126\073\133\001\002\000\010\071\127\072\126\073" +
    "\133\001\002\000\054\017\uffd3\021\uffd3\024\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\044\uffd3\045\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\071\uffd3\075\uffd3\001\002\000\054\017" +
    "\uffd6\021\uffd6\024\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\045" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\071\uffd6" +
    "\075\uffd6\001\002\000\054\017\uffd5\021\uffd5\024\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\044\uffd5\045\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\071\uffd5\075\uffd5\001\002\000\054" +
    "\017\uffd7\021\uffd7\024\uffd7\027\uffd7\030\uffd7\031\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7" +
    "\045\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\071" +
    "\uffd7\075\uffd7\001\002\000\054\017\uffd4\021\uffd4\024\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\044\uffd4\045\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\071\uffd4\075\uffd4\001\002\000" +
    "\054\017\uffd9\021\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\040\uffd9\041\uffd9\042\uffd9\044" +
    "\uffd9\045\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\071\uffd9\075\uffd9\001\002\000\054\017\uffd8\021\uffd8\024" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\071\uffd8\075\uffd8\001\002" +
    "\000\012\071\155\072\154\073\157\075\uffcd\001\002\000" +
    "\054\017\uffda\021\uffda\024\uffda\027\uffda\030\uffda\031\uffda" +
    "\033\uffda\034\uffda\035\uffda\040\uffda\041\uffda\042\uffda\044" +
    "\uffda\045\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda" +
    "\071\uffda\075\uffda\001\002\000\066\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\017\uffca\021\uffca\024\uffca\027\uffca\030\uffca" +
    "\031\uffca\033\uffca\034\uffca\035\uffca\040\uffca\041\uffca\042" +
    "\uffca\044\uffca\045\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\070\uffca\071\uffca\075\uffca\001\002\000\006\064" +
    "\160\075\uffcb\001\002\000\006\064\160\075\uffcb\001\002" +
    "\000\004\075\163\001\002\000\006\064\160\075\uffcb\001" +
    "\002\000\012\071\155\072\154\073\157\075\uffcd\001\002" +
    "\000\004\075\uffce\001\002\000\004\075\uffcc\001\002\000" +
    "\066\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\021\uffd1" +
    "\024\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\044\uffd1\045\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\070\uffd1\071\uffd1\075" +
    "\uffd1\001\002\000\004\075\uffd0\001\002\000\004\075\uffcf" +
    "\001\002\000\054\017\uffdc\021\uffdc\024\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\044\uffdc\045\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\071\uffdc\075\uffdc\001\002\000\052\017\uffde" +
    "\021\uffde\024\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034" +
    "\uffde\035\uffde\040\uffde\041\uffde\042\uffde\044\uffde\045\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\071\uffde\001" +
    "\002\000\004\075\171\001\002\000\052\017\uff97\021\uff97" +
    "\024\uff97\027\uff97\030\uff97\031\uff97\033\uff97\034\uff97\035" +
    "\uff97\040\uff97\041\uff97\042\uff97\044\uff97\045\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\071\uff97\001\002\000" +
    "\004\032\173\001\002\000\044\017\ufffe\021\021\024\030" +
    "\027\015\030\023\031\ufffe\033\ufffe\034\013\035\040\041" +
    "\031\044\011\051\010\052\026\053\012\054\036\055\027" +
    "\071\024\001\002\000\010\017\uffa9\031\uffa9\033\177\001" +
    "\002\000\006\017\uffa6\031\204\001\002\000\010\017\uffa9" +
    "\031\uffa9\033\177\001\002\000\010\071\064\072\063\073" +
    "\067\001\002\000\004\032\201\001\002\000\044\017\ufffe" +
    "\021\021\024\030\027\015\030\023\031\ufffe\033\ufffe\034" +
    "\013\035\040\041\031\044\011\051\010\052\026\053\012" +
    "\054\036\055\027\071\024\001\002\000\010\017\uffa8\031" +
    "\uffa8\033\uffa8\001\002\000\006\017\uffaa\031\uffaa\001\002" +
    "\000\040\017\ufffe\021\021\024\030\027\015\030\023\034" +
    "\013\035\040\041\031\044\011\051\010\052\026\053\012" +
    "\054\036\055\027\071\024\001\002\000\004\017\206\001" +
    "\002\000\004\030\207\001\002\000\052\017\uffb7\021\uffb7" +
    "\024\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\071\uffb7\001\002\000" +
    "\004\017\uffa7\001\002\000\004\023\212\001\002\000\004" +
    "\074\213\001\002\000\010\071\127\072\126\073\133\001" +
    "\002\000\004\075\215\001\002\000\052\017\uffc3\021\uffc3" +
    "\024\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\045\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\071\uffc3\001\002\000" +
    "\010\020\uffea\064\uffea\066\260\001\002\000\004\071\247" +
    "\001\002\000\004\071\221\001\002\000\004\074\222\001" +
    "\002\000\006\025\224\075\uffbb\001\002\000\004\075\241" +
    "\001\002\000\004\071\225\001\002\000\004\020\226\001" +
    "\002\000\016\056\234\057\235\060\233\061\227\062\232" +
    "\063\231\001\002\000\060\011\uffe2\017\uffe2\021\uffe2\024" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\044\uffe2\045\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\064\uffe2\071\uffe2\075\uffe2" +
    "\001\002\000\006\064\236\075\uffb9\001\002\000\060\011" +
    "\uffe0\017\uffe0\021\uffe0\024\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\040\uffe0\041\uffe0\042\uffe0\044" +
    "\uffe0\045\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\064\uffe0\071\uffe0\075\uffe0\001\002\000\060\011\uffe1\017" +
    "\uffe1\021\uffe1\024\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\045" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\064\uffe1" +
    "\071\uffe1\075\uffe1\001\002\000\060\011\uffe3\017\uffe3\021" +
    "\uffe3\024\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\045\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\064\uffe3\071\uffe3" +
    "\075\uffe3\001\002\000\060\011\uffe5\017\uffe5\021\uffe5\024" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\044\uffe5\045\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\064\uffe5\071\uffe5\075\uffe5" +
    "\001\002\000\060\011\uffe4\017\uffe4\021\uffe4\024\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\044\uffe4\045\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\064\uffe4\071\uffe4\075\uffe4\001\002" +
    "\000\006\025\224\075\uffbb\001\002\000\004\075\uffbc\001" +
    "\002\000\004\075\uffba\001\002\000\004\020\242\001\002" +
    "\000\016\056\234\057\235\060\233\061\227\062\232\063" +
    "\231\001\002\000\040\017\ufffe\021\021\024\030\027\015" +
    "\030\023\034\013\035\040\041\031\044\011\051\010\052" +
    "\026\053\012\054\036\055\027\071\024\001\002\000\004" +
    "\017\245\001\002\000\004\026\246\001\002\000\052\017" +
    "\uffb8\021\uffb8\024\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\040\uffb8\041\uffb8\042\uffb8\044\uffb8\045" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\071\uffb8" +
    "\001\002\000\004\074\250\001\002\000\006\025\224\075" +
    "\uffbb\001\002\000\004\075\252\001\002\000\040\017\ufffe" +
    "\021\021\024\030\027\015\030\023\034\013\035\040\041" +
    "\031\044\011\051\010\052\026\053\012\054\036\055\027" +
    "\071\024\001\002\000\004\017\254\001\002\000\004\024" +
    "\255\001\002\000\052\017\uffbe\021\uffbe\024\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\044\uffbe\045\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\071\uffbe\001\002\000\004\020\303\001" +
    "\002\000\006\020\272\064\271\001\002\000\006\071\262" +
    "\072\261\001\002\000\006\064\267\067\uffc6\001\002\000" +
    "\006\064\265\067\uffc4\001\002\000\004\067\264\001\002" +
    "\000\004\020\uffc8\001\002\000\006\071\262\072\261\001" +
    "\002\000\004\067\uffc5\001\002\000\006\071\262\072\261" +
    "\001\002\000\004\067\uffc7\001\002\000\004\071\302\001" +
    "\002\000\016\056\234\057\235\060\233\061\227\062\232" +
    "\063\231\001\002\000\054\011\274\017\uffef\021\uffef\024" +
    "\uffef\027\uffef\030\uffef\031\uffef\033\uffef\034\uffef\035\uffef" +
    "\040\uffef\041\uffef\042\uffef\044\uffef\045\uffef\051\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\071\uffef\001\002\000\012" +
    "\021\277\071\127\072\126\073\133\001\002\000\052\017" +
    "\uffed\021\uffed\024\uffed\027\uffed\030\uffed\031\uffed\033\uffed" +
    "\034\uffed\035\uffed\040\uffed\041\uffed\042\uffed\044\uffed\045" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\071\uffed" +
    "\001\002\000\052\017\uffee\021\uffee\024\uffee\027\uffee\030" +
    "\uffee\031\uffee\033\uffee\034\uffee\035\uffee\040\uffee\041\uffee" +
    "\042\uffee\044\uffee\045\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\071\uffee\001\002\000\004\065\300\001\002" +
    "\000\004\022\301\001\002\000\052\017\uffc9\021\uffc9\024" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\044\uffc9\045\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\071\uffc9\001\002\000\006" +
    "\020\uffeb\064\uffeb\001\002\000\016\056\234\057\235\060" +
    "\233\061\227\062\232\063\231\001\002\000\052\017\uffec" +
    "\021\uffec\024\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034" +
    "\uffec\035\uffec\040\uffec\041\uffec\042\uffec\044\uffec\045\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\071\uffec\001" +
    "\002\000\004\016\306\001\002\000\004\002\000\001\002" +
    "\000\052\017\ufff3\021\ufff3\024\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\044\ufff3\045\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\071\ufff3\001\002\000\040\017\ufffe\021\021\024\030" +
    "\027\015\030\023\034\013\035\040\041\031\044\011\051" +
    "\010\052\026\053\012\054\036\055\027\071\024\001\002" +
    "\000\004\017\312\001\002\000\004\034\313\001\002\000" +
    "\052\017\uffa5\021\uffa5\024\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\040\uffa5\041\uffa5\042\uffa5\044" +
    "\uffa5\045\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\071\uffa5\001\002\000\004\071\315\001\002\000\004\045" +
    "\316\001\002\000\010\071\064\072\063\073\067\001\002" +
    "\000\006\017\uff9d\045\323\001\002\000\004\017\321\001" +
    "\002\000\004\044\322\001\002\000\052\017\uffa2\021\uffa2" +
    "\024\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\044\uffa2\045\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\055\uffa2\071\uffa2\001\002\000" +
    "\012\031\326\071\064\072\063\073\067\001\002\000\004" +
    "\017\uffa1\001\002\000\004\017\uffa0\001\002\000\040\017" +
    "\ufffe\021\021\024\030\027\015\030\023\034\013\035\040" +
    "\041\031\044\011\051\010\052\026\053\012\054\036\055" +
    "\027\071\024\001\002\000\042\017\ufffe\021\021\024\030" +
    "\027\015\030\023\034\013\035\040\041\031\044\011\045" +
    "\ufffe\051\010\052\026\053\012\054\036\055\027\071\024" +
    "\001\002\000\006\017\uff9f\045\uff9f\001\002\000\004\017" +
    "\uff9e\001\002\000\052\017\ufff1\021\ufff1\024\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1\041" +
    "\ufff1\042\ufff1\044\ufff1\045\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\071\ufff1\001\002\000\052\017\ufff2\021" +
    "\ufff2\024\ufff2\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\040\ufff2\041\ufff2\042\ufff2\044\ufff2\045\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\071\ufff2\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\042\005\015" +
    "\006\031\007\016\012\024\021\041\030\036\032\032\033" +
    "\033\042\021\043\013\044\040\045\017\053\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\307\050\065\001\001\000\002\001\001\000\010" +
    "\004\131\014\306\027\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\171\050\065\001\001\000\006\013" +
    "\121\022\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\042\005" +
    "\057\006\031\007\016\012\024\021\041\030\036\032\032" +
    "\033\033\042\021\043\013\044\040\045\017\053\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\042\005\043\006\031\007\016\012\024\021\041\030" +
    "\036\032\032\033\033\042\021\043\013\044\040\045\017" +
    "\053\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\042\005\055\006\031\007\016\012\024" +
    "\021\041\030\036\032\032\033\033\042\021\043\013\044" +
    "\040\045\017\053\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\064\050\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\071\040\073\001\001\000" +
    "\002\001\001\000\006\034\106\050\065\001\001\000\002" +
    "\001\001\000\004\050\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\103\050\065\001\001\000\002\001" +
    "\001\000\006\034\102\050\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\042\005\112\006\031\007\016\012\024\021" +
    "\041\030\036\032\032\033\033\042\021\043\013\044\040" +
    "\045\017\053\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\167\001\001\000\004" +
    "\013\166\001\001\000\010\004\131\014\127\027\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\124\001\001\000\002\001\001\000\004\015" +
    "\165\001\001\000\006\015\151\022\152\001\001\000\002" +
    "\001\001\000\004\015\147\001\001\000\004\015\146\001" +
    "\001\000\004\015\134\001\001\000\010\004\131\014\145" +
    "\027\130\001\001\000\002\001\001\000\010\004\131\014" +
    "\144\027\130\001\001\000\010\004\131\014\143\027\130" +
    "\001\001\000\010\004\131\014\142\027\130\001\001\000" +
    "\010\004\131\014\141\027\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\164\001\001\000\004\026\163\001\001\000\002" +
    "\001\001\000\004\026\160\001\001\000\004\025\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\042\005\173\006\031\007\016\012" +
    "\024\021\041\030\036\032\032\033\033\042\021\043\013" +
    "\044\040\045\017\053\034\001\001\000\006\035\174\041" +
    "\175\001\001\000\004\036\204\001\001\000\006\035\202" +
    "\041\175\001\001\000\006\034\177\050\065\001\001\000" +
    "\002\001\001\000\036\003\042\005\201\006\031\007\016" +
    "\012\024\021\041\030\036\032\032\033\033\042\021\043" +
    "\013\044\040\045\017\053\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\042\005\207\006\031\007" +
    "\016\012\024\021\041\030\036\032\032\033\033\042\021" +
    "\043\013\044\040\045\017\053\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\131\014" +
    "\213\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\256\017\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\227\001\001\000\002\001\001\000\004\024\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\242\001\001\000\036\003\042\005\243" +
    "\006\031\007\016\012\024\021\041\030\036\032\032\033" +
    "\033\042\021\043\013\044\040\045\017\053\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\250\001\001\000\002\001\001" +
    "\000\036\003\042\005\252\006\031\007\016\012\024\021" +
    "\041\030\036\032\032\033\033\042\021\043\013\044\040" +
    "\045\017\053\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\265" +
    "\001\001\000\002\001\001\000\004\020\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\272\001\001" +
    "\000\006\013\275\016\274\001\001\000\010\004\131\014" +
    "\127\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\042\005\310\006\031\007\016\012\024\021\041" +
    "\030\036\032\032\033\033\042\021\043\013\044\040\045" +
    "\017\053\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\046\317\051" +
    "\316\001\001\000\004\050\326\001\001\000\010\046\323" +
    "\051\316\052\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\042\005\330\006" +
    "\031\007\016\012\024\021\041\030\036\032\032\033\033" +
    "\042\021\043\013\044\040\045\017\053\034\001\001\000" +
    "\036\003\042\005\327\006\031\007\016\012\024\021\041" +
    "\030\036\032\032\033\033\042\021\043\013\044\040\045" +
    "\017\053\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizadosin$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizadosin$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizadosin$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/**---------------Si hay Error Sintactico-----------------**/
	public void syntax_error(Symbol  s){
      analizadosin.errores="Error en la Fila "+(s.left+1) + " Columna "+s.right+". Identificador "
      +s.value+" "+s.sym+" no reconocido";
		System.out.println("Error en la Fila "+(s.left+1) + " Columna "+s.right+". Identificador "
		+s.value+" "+s.sym+" no reconocido");
	}

	/**----------------Si no es posible recuperacion de errores-----**/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{

	}


      public static ArrayList<String> traduccion= new ArrayList<String>();
      public static String errores= "";
      public static String nombrearchivo="";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analizadosin$actions {
  private final analizadosin parser;

  /** Constructor */
  CUP$analizadosin$actions(analizadosin parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analizadosin$do_action_part00000000(
    int                        CUP$analizadosin$act_num,
    java_cup.runtime.lr_parser CUP$analizadosin$parser,
    java.util.Stack            CUP$analizadosin$stack,
    int                        CUP$analizadosin$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizadosin$result;

      /* select the action based on the action number */
      switch (CUP$analizadosin$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		RESULT = start_val;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizadosin$parser.done_parsing();
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= MODULE ID lista END MODULE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object cuerpo = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		
   analizadosin.nombrearchivo=(String)id;
String cadena="import java.util.Scanner;\n public class "+id+"{\n"+cuerpo+"\n}";
analizadosin.traduccion.add(cadena);
RESULT=cadena;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista ::= ESTRUCTURA lista 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena;
cadena=(String)n+(String)n1;
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("lista",3, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista ::= 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("lista",3, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA ::= declaracion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n1;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA ::= asignacion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURA ::= mostrar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURA ::= declaMetodo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA ::= declaFuncion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA ::= sentenciaIf 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA ::= sentenciaWhile 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA ::= sentenciaFor 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA ::= sentenciaDoWhile 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA ::= sentenciaSwitch 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURA ::= RETURN listexpresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
                  String dato="return "+n+";";
                  RESULT=dato;
               
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURA ::= EXIT WHILE 
            {
              Object RESULT =null;
		String dato="break;";RESULT=dato;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURA ::= EXIT FOR 
            {
              Object RESULT =null;
		String dato="break;";RESULT=dato;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTRUCTURA ::= llamadaMetodo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		RESULT=n+";";
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= acceso ID partid AS tipodato 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena;
cadena="\n"+"\t"+(String)n1+" "+n2+" "+n3+n+";";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= acceso ID partid AS tipodato expresion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena;
cadena="\n"+"\t"+(String)n1+" "+n2+" "+n3+n+n4;
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= acceso ID partid AS tipodato pedirdato 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		
String cadena;
cadena="\n"+"\t"+" Scanner sc = new Scanner(System.in);";
if(n2=="String"){
cadena+="\n"+"\t"+n2+" "+n3+n+"=sc.nextLine();";
}else if(n2=="int"){
cadena+="\n"+"\t"+n2+" "+n3+n+"=sc.nextInt();";
}else{

}
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= acceso ID partArreglo AS tipodato 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String conver=(String)n3;
   String temp[]=conver.split(",");
   String concatenacion="";
   for(int i=0;i<temp.length;i++){
      concatenacion+="[]";
   }
   String cadena="\n"+"\t"+(String)n+" "+(String)n4 +concatenacion+" "+(String)n2+"= new "+(String)n4+(String)n3+";";
      RESULT=cadena;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // partid ::= partid COMA ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena=n1+","+n;
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partid",7, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // partid ::= 
            {
              Object RESULT =null;
		
String cadena="";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partid",7, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // acceso ::= PUBLIC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="public";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("acceso",5, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // acceso ::= PRIVATE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="private";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("acceso",5, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // acceso ::= DIM 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="private";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("acceso",5, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // acceso ::= STATIC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="static";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("acceso",5, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipodato ::= BOOLEAN 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="boolean";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("tipodato",6, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipodato ::= CHAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="char";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("tipodato",6, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipodato ::= DOUBLE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="double";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("tipodato",6, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipodato ::= INTEGER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="int";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("tipodato",6, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipodato ::= LONG 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="long";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("tipodato",6, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipodato ::= STRING 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
String cadena="String";
RESULT=cadena;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("tipodato",6, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignacion ::= ID expresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato="\n"+"\t"+(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("asignacion",8, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= ID asigArre expresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
      String cadena="\n"+"\t"+(String)n+(String)n1+(String)n2;
      RESULT=cadena;
      
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("asignacion",8, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= IGUAL listexpresion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
      String dato="="+n1+";";
      RESULT=dato;
      
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listexpresion ::= NUMERO operador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listexpresion",10, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listexpresion ::= CADENA operador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listexpresion",10, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listexpresion ::= ID operador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listexpresion",10, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listexpresion ::= llamadaFuncion operador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listexpresion",10, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listexpresion ::= llamadaArreglo operador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listexpresion",10, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operador ::= MAS listexpresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operador ::= MENOS listexpresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operador ::= DIVISION listexpresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operador ::= MULTIPLICACION listexpresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato=(String)n+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operador ::= CONCATENAR listexpresion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
   String dato="+"+(String)n1;
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operador ::= 
            {
              Object RESULT =null;
		
   String dato="";
   RESULT=dato;
   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("operador",11, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // llamadaFuncion ::= ID OPENPA listparametro CLOSEPA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		
      String dato=(String)n+"("+(String)n1+")";
      RESULT=dato;
      
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",2, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listparametro ::= ID tipoparametro 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
                     String dato=(String)n+(String)n1;
                     RESULT=dato;
                   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listparametro",19, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listparametro ::= NUMERO tipoparametro 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
                     String dato=(String)n+(String)n1;
                     RESULT=dato;
                   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listparametro",19, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listparametro ::= CADENA tipoparametro 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
                     String dato=(String)n+(String)n1;
                     RESULT=dato;
                   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listparametro",19, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listparametro ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listparametro",19, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoparametro ::= COMA listparametro 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
                     String dato=","+(String)n;
                     RESULT=dato;
                   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("tipoparametro",20, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoparametro ::= 
            {
              Object RESULT =null;
		
                     String dato="";
                     RESULT=dato;
                   
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("tipoparametro",20, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // llamadaArreglo ::= ID asigArre 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
         String dato=(String)n+(String)n1;
         RESULT=dato;
      
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("llamadaArreglo",21, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // pedirdato ::= IGUAL CONSOLE PUNTO READLINE 
            {
              Object RESULT =null;

              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("pedirdato",12, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // partArreglo ::= OPEN listArreglo CLOSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
      String cadena=(String)n+(String)n1+(String)n2;
      RESULT=cadena;
      
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partArreglo",13, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listArreglo ::= NUMERO COMA listArreglo 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
      String cadena=(String)n1+","+(String)n;
      RESULT=cadena;
      
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listArreglo",14, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listArreglo ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
         String cadena=(String)n;
         RESULT=cadena;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listArreglo",14, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listArreglo ::= ID COMA listArreglo 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
      String cadena=(String)n1+","+(String)n;
      RESULT=cadena;
      
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listArreglo",14, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listArreglo ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
         String cadena=(String)n;
         RESULT=cadena;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listArreglo",14, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mostrar ::= CONSOLE PUNTO WRITELINE OPENPA listexpresion CLOSEPA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		
            String cadena="\n"+"\t"+"System.out.println("+(String)n+");";
            RESULT=cadena;
            
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("mostrar",15, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asigArre ::= OPEN ID CLOSE asigArre 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
                           String cadena="["+(String)n+"]"+(String)n1;
                           RESULT= cadena;
                        
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("asigArre",16, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asigArre ::= OPEN ID CLOSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		
                           String cadena="["+(String)n+"]";
                           RESULT=cadena;
                           
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("asigArre",16, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listAsigArre ::= OPEN NUMERO CLOSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		
                           String cadena="["+(String)n+"]";
                           RESULT=cadena;
                           
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listAsigArre",17, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listAsigArre ::= OPEN ID CLOSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		
                           String cadena="["+(String)n+"]";
                           RESULT=cadena;
                           
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("listAsigArre",17, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaMetodo ::= acceso SUB ID OPENPA parametroMetod CLOSEPA lista END SUB 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-8)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		
         String cadena="\n"+"\t"+n+" void "+n1+"("+n2+"){"+"\n"+"\t"+"\t"+n3+"\n"+"\t"+"}";
         RESULT=cadena;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("declaMetodo",22, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-8)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaMetodo ::= SUB ID OPENPA CLOSEPA lista END SUB 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		
            String cadena="";
            if(n1.equals("Main")){
            cadena="\n"+"\t"+"public static void main(String args[]){"+"\n"+"\t"+"\t"+n2+"\n"+"\t"+"}"; 
            RESULT=cadena;
            }else{
               analizadosin.errores="No se reconoce la etiqueta main";
            }

            
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("declaMetodo",22, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametroMetod ::= BYVAL ID AS tipodato parametro 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato=(String)n1+" "+(String)n+(String)n2;
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("parametroMetod",23, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametroMetod ::= 
            {
              Object RESULT =null;
		
               String dato="";
               RESULT=dato;
            
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("parametroMetod",23, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametro ::= COMA parametroMetod 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato=","+(String)n;
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("parametro",18, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametro ::= 
            {
              Object RESULT =null;
		
            String dato="";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("parametro",18, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaFuncion ::= acceso FUNCTION ID OPENPA parametroMetod CLOSEPA AS tipodato lista END FUNCTION 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-10)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		
            String dato=n+" "+n3+" "+n1+"("+n2+"){\n"+n4+"\n}";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("declaFuncion",24, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-10)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciaIf ::= IF condicion THEN lista sentenciaElseIf sentenciaElse END IF 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		
             String dato="\n"+"\t"+"if("+n+"){\n"+n1+"\n"+"\t"+"}"+n2+n3;
             RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("sentenciaIf",25, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-7)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicion ::= caseTipo simbolo caseTipo partOperador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato=(String)n+(String)n1+(String)n2+" "+n3;
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion ::= caseTipo partOperador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato=(String)n+" "+n1;
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simbolo ::= MAYOR 
            {
              Object RESULT =null;
		
            String dato=">";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("simbolo",29, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simbolo ::= MAYORIGUAL 
            {
              Object RESULT =null;
		
            String dato=">=";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("simbolo",29, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simbolo ::= IGUAL 
            {
              Object RESULT =null;
		
            String dato="==";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("simbolo",29, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simbolo ::= DIFERENTE 
            {
              Object RESULT =null;
		
            String dato="!=";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("simbolo",29, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simbolo ::= MENOR 
            {
              Object RESULT =null;
		
            String dato="<";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("simbolo",29, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simbolo ::= MENORIGUAL 
            {
              Object RESULT =null;
		
            String dato="<=";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("simbolo",29, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // partOperador ::= AND condicion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato="&& "+n1;
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partOperador",30, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // partOperador ::= OR condicion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato="|| "+n1;
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partOperador",30, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // partOperador ::= NOT condicion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato="!"+n1;
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partOperador",30, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // partOperador ::= 
            {
              Object RESULT =null;
		
            String dato="";
            RESULT=dato;
            
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partOperador",30, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaElseIf ::= partElseIf sentenciaElseIf 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato=(String)n+(String)n1;
            RESULT= dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("sentenciaElseIf",27, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaElseIf ::= 
            {
              Object RESULT =null;
		
               String dato="";
               RESULT=dato;
            
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("sentenciaElseIf",27, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // partElseIf ::= ELSELF condicion THEN lista 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato="else if("+n+"){\n"+n1+"\n"+"\t"+"}";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partElseIf",31, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaElse ::= ELSE lista 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato="else {\n"+n+"\n"+"\t"+"}";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("sentenciaElse",28, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaElse ::= 
            {
              Object RESULT =null;
		
               String dato="";
               RESULT=dato;
            
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("sentenciaElse",28, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentenciaWhile ::= WHILE condicion lista END WHILE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		
            String dato="while ("+n+"){\n"+n1+"\n}";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",32, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaFor ::= FOR ID AS INTEGER IGUAL NUMERO TO NUMERO STEP NUMERO lista NEXT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-10)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		
            int inicial=Integer.parseInt((String)n1);
            int finaln=Integer.parseInt((String)n2);
            int salto=Integer.parseInt((String)n3);
            String dato="";
            if((inicial<finaln) && salto>0){
                dato="\n"+"\t"+"for(int "+n+"="+n1+";"+n+"<"+n2+";"+n+"="+n+"("+n3+")){\n"+n4+"\n"+"\t"+"}";
            }else if((inicial>finaln) && salto<0){
                dato="\n"+"\t"+"for(int "+n+"="+n1+";"+n+">"+n2+";"+n+"="+n+"("+n3+")){\n"+n4+"\n"+"\t"+"}";
            }
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("sentenciaFor",33, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-11)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentenciaDoWhile ::= DO lista LOOP UNTIL condicion 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato="\n"+"\t"+"do{\n"+n+"\n"+"\t"+"}while("+n1+");";
            RESULT=dato;

         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",34, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-4)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciaSwitch ::= SELECT CASE ID parteCase END SELECT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)).value;
		
            String dato="\n"+"\t"+"switch("+n+"){\n"+n1+"\n"+"\t"+"}";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",35, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-5)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parteCase ::= estructuraSwitch parteCase 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
                        String dato=(String)n+(String)n1;
                        RESULT=dato;
                     
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("parteCase",36, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parteCase ::= estructuraSwitch cuerposwitch 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
                        String dato=(String)n+(String)n1;
                        RESULT=dato;
                     
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("parteCase",36, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // estructuraSwitch ::= CASE caseTipo lista 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
                              String dato="\tcase "+n+":\n"+n1+"\n"+"\t"+"break;";
                              RESULT=dato;
                           
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("estructuraSwitch",39, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerposwitch ::= CASE ELSE lista 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		String dato="\n" +"\t"+"default:\n"+n+"\n"+"\t"+"break;"; RESULT=dato;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("cuerposwitch",40, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerposwitch ::= 
            {
              Object RESULT =null;
		String dato="";RESULT=dato;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("cuerposwitch",40, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // caseTipo ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String cadena=(String)n;
            RESULT=cadena;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("caseTipo",38, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // caseTipo ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String cadena=(String)n;
            RESULT=cadena;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("caseTipo",38, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // caseTipo ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String cadena=(String)n;
            RESULT=cadena;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("caseTipo",38, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // partCaseElse ::= CASE ELSE lista 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.peek()).value;
		
            String dato="default:\n"+n+"\nbreak;\n";
            RESULT=dato;
         
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partCaseElse",37, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-2)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // partCaseElse ::= 
            {
              Object RESULT =null;
		
            String dato="";
            RESULT=dato;
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("partCaseElse",37, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // llamadaMetodo ::= ID OPENPA listparametro CLOSEPA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-1)).value;
		
      String dato=(String)n+"("+(String)n1+")";
      RESULT=dato;
      
              CUP$analizadosin$result = parser.getSymbolFactory().newSymbol("llamadaMetodo",41, ((java_cup.runtime.Symbol)CUP$analizadosin$stack.elementAt(CUP$analizadosin$top-3)), ((java_cup.runtime.Symbol)CUP$analizadosin$stack.peek()), RESULT);
            }
          return CUP$analizadosin$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analizadosin$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analizadosin$do_action(
    int                        CUP$analizadosin$act_num,
    java_cup.runtime.lr_parser CUP$analizadosin$parser,
    java.util.Stack            CUP$analizadosin$stack,
    int                        CUP$analizadosin$top)
    throws java.lang.Exception
    {
              return CUP$analizadosin$do_action_part00000000(
                               CUP$analizadosin$act_num,
                               CUP$analizadosin$parser,
                               CUP$analizadosin$stack,
                               CUP$analizadosin$top);
    }
}

}
