// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Proyecto1.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::proyecto1;

class Proyecto1Handler : virtual public Proyecto1If {
 public:
  Proyecto1Handler() {
    // Your initialization goes here
  }

  bool accesoNivel(const int32_t num1) {
    // Your implementation goes here
    printf("accesoNivel\n");
  }

  void generadorEnemigos() {
    // Your implementation goes here
    printf("generadorEnemigos\n");
  }

  void pararGeneradorEnemigos() {
    // Your implementation goes here
    printf("pararGeneradorEnemigos\n");
  }

  int32_t obtenerTamanio() {
    // Your implementation goes here
    printf("obtenerTamanio\n");
  }

  int32_t moverJugador(const int32_t num1, const int32_t num2, const int32_t num3, const int32_t errores) {
    // Your implementation goes here
    printf("moverJugador\n");
  }

  int32_t obtenerNivel() {
    // Your implementation goes here
    printf("obtenerNivel\n");
  }

  void guardarUsuario(const std::string& nombre) {
    // Your implementation goes here
    printf("guardarUsuario\n");
  }

  void regresarUsuario(std::string& _return, const int32_t numero) {
    // Your implementation goes here
    printf("regresarUsuario\n");
  }

  void setUsuario(const int32_t numero) {
    // Your implementation goes here
    printf("setUsuario\n");
  }

  int32_t obtenerUsuario() {
    // Your implementation goes here
    printf("obtenerUsuario\n");
  }

  void desbloquearNivel(const int32_t numero) {
    // Your implementation goes here
    printf("desbloquearNivel\n");
  }

  void graficarEnemigos(const int32_t usuario) {
    // Your implementation goes here
    printf("graficarEnemigos\n");
  }

  void guardarPuntaje(const int32_t usuario, const int32_t nivel, const int32_t puntaje) {
    // Your implementation goes here
    printf("guardarPuntaje\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<Proyecto1Handler> handler(new Proyecto1Handler());
  shared_ptr<TProcessor> processor(new Proyecto1Processor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

