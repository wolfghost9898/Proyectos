/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto1edd;
import java.awt.Image;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TSocket;

/**
 *
 * @author wolfghost
 */
public class FrontEnd extends javax.swing.JFrame implements Runnable {
    Thread hilo;
    boolean jugando=true;
    int tamanio;
    int posx;
    int posy;
    int errores=0;
    int num_nivel;
    int num_usuario;
    TSocket transport;
    TProtocol protocol;
    Proyecto1.Client cliente;
    //--------------------------- ------------Matriz ortogonal------------------------
     Cabeceras columnaprimero=new Cabeceras();
     Cabeceras columnaultimo=new Cabeceras();
    Cabeceras filaprimero= new Cabeceras();
    Cabeceras filaultimo=new Cabeceras();
    
    private JLabel etiqueta;
    
    /**
     * Creates new form FrontEnd
     */
    public FrontEnd() {
        initComponents();
        addWindowListener(new WindowAdapter(){
           @Override
           public void windowClosing(WindowEvent e){
                cerrarNivel();
                dispose();
           }
        });
        tamanioMatriz();
        obtenerTamanio();
        ejecutarHilo();
        columnaprimero=null;
        filaprimero=null;
        crearCabeceras(tamanio);
        guardarMatriz(tamanio);
        guardarenGraphiz();
        if(hilo==null){
            hilo=new Thread(this);
            hilo.start();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        foto = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(169, 64, 100));

        jLabel3.setText("Nivel:");

        jLabel4.setText("0");

        jLabel5.setText("0");

        jLabel9.setText("0");

        jLabel10.setText(":");

        jLabel11.setText("00");

        jButton2.setText("Pausar");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Renaudar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("r");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(108, 108, 108)
                .addComponent(jButton4)
                .addGap(46, 46, 46)
                .addComponent(jLabel5)
                .addGap(139, 139, 139)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addGap(62, 62, 62))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(jLabel9)
                        .addComponent(jLabel10)
                        .addComponent(jLabel11)
                        .addComponent(jButton4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton3))))
        );

        jLabel4.getAccessibleContext().setAccessibleName("nivel_estado");
        jLabel5.getAccessibleContext().setAccessibleName("puntaje");
        jLabel9.getAccessibleContext().setAccessibleName("minutos");
        jLabel11.getAccessibleContext().setAccessibleName("segundos");

        jPanel2.setBackground(new java.awt.Color(192, 109, 113));
        jPanel2.setAlignmentX(0.0F);
        jPanel2.setAlignmentY(0.0F);
        jPanel2.setAutoscrolls(true);

        foto.setText("Foto");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foto, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foto, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel1.setText("x:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("y:");

        jButton1.setText("Mover");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(jLabel1))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    
    //----------------------------Mover Jugador---------------------------------
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(jugando==true){
          posy=Integer.parseInt(jTextField2.getText());
          posx=Integer.parseInt(jTextField1.getText());
          try{
            transport= new TSocket("localhost",9090);
            transport.open();
            protocol= new TBinaryProtocol(transport);
            cliente=new Proyecto1.Client(protocol); 
            int resultado=cliente.moverJugador(posx, posy,num_usuario,errores);
            int actual=Integer.parseInt(jLabel5.getText());
            if(resultado==1){
              JOptionPane.showMessageDialog(this, "Enemigo aun tiene vidas");
            }else{
                if(resultado==-100){
                    if(errores==4){
                        errores=0;
                        actual+=resultado;
                    }else{
                        JOptionPane.showMessageDialog(null, "Ataque Erroneo");
                        errores++;
                    }
                }else{
                    errores=0;
                   actual+=resultado;
                }
            }
          jLabel5.setText(String.valueOf(actual));
          System.out.println(resultado);
          transport.close();
          }catch(Exception e){
              System.out.println("Error de Conexion");
          }  
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cerrarNivel();
        jugando=false;
        hilo.suspend();
        
    }//GEN-LAST:event_jButton2ActionPerformed
//-----------------------------------boton que renauda---------------------------------------------
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jugando=true;
        hilo=new Thread(this);
        hilo.start();
        ejecutarHilo();

        

    }//GEN-LAST:event_jButton3ActionPerformed
   //-------------------------Boton Que Pausa-----------------------------

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked

    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        mostrarImagen();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrontEnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrontEnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrontEnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrontEnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrontEnd().setVisible(true);
                
            }
        });
    
    }

    //----------------------------------------cierra el nivel-----------------------------------------
        public void cerrarNivel(){
        try{
        transport= new TSocket("localhost",9090);
        transport.open();
         protocol= new TBinaryProtocol(transport);
        cliente=new Proyecto1.Client(protocol); 
        cliente.pararGeneradorEnemigos();
        System.out.println("Cerrando enemigos");
        jugando=false;
        hilo.stop();
        transport.close();
        }catch(Exception e){
            System.out.println("Error de Conexion");
        }
    }

    //------------------------------------------Comienza Hilos------------------------------------------------------
        void ejecutarHilo(){
            try{
        transport= new TSocket("localhost",9090);
        transport.open();
         protocol= new TBinaryProtocol(transport);
        cliente=new Proyecto1.Client(protocol); 
        cliente.generadorEnemigos();
        System.out.println("Empezando hilos enemigos");
        transport.close();
        }catch(Exception e){
            System.out.println("Error de Conexion");
        }
        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel foto;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

        public void crearCabeceras(int numero){
            for(int i=0;i<numero;i++){
                nuevaCabecera(i);
            }
        }
        //---------------------------------Agregar las cabeceras a la lista----------------
        public void nuevaCabecera(int numero){
            Cabeceras nuevo=new Cabeceras();
            Cabeceras nuevo2=new Cabeceras();
            nuevo.numero=numero;
            nuevo.primero=null;
            
            nuevo2.numero=numero;
            nuevo2.primero=null;
            //-------------------------en x---------------------------------------------
            if(columnaprimero==null){
                nuevo.siguiente=null;
                columnaprimero=nuevo;
                columnaultimo=nuevo;
            }else{
                nuevo.siguiente=null;
                columnaultimo.siguiente=nuevo;
                columnaultimo=nuevo;
            }
            
            //---------------------------------------en y------------------------------------
            if(filaprimero==null){
                nuevo2.siguiente=null;
                filaprimero=nuevo2;
                filaultimo=nuevo2;
            }else{
                filaultimo.siguiente=nuevo2;
                nuevo2.siguiente=null;
                filaultimo=nuevo2;
            }
        }

        
        //------------------------------------Guarda las los nodos de la matriz---------------
        public void guardarMatriz(int numero){
            int y=0;
            int x=0;
            Cabeceras temp=columnaprimero;
            //--------------------for filas-------------------------------------
            while(temp!=null){
                Cabeceras temporal=filaprimero;
                for(int i=0;i<numero;i++){
                    Nodo nuevo=new Nodo();
                    nuevo.x=x;
                    nuevo.y=i;
                    if(temp.primero==null){
                        nuevo.abajo=null;
                        temp.primero=nuevo;
                        temp.ultimo=nuevo;
                        
                    }else{
                        temp.ultimo.abajo=nuevo;
                        nuevo.arriba=temp.ultimo;
                        temp.ultimo=nuevo;
                    }
                    if(temporal.primero==null){
                        nuevo.siguiente=null;
                        temporal.primero=nuevo;
                        temporal.ultimo=nuevo;
                    }else{
                        nuevo.siguiente=null;
                        Nodo aux=temporal.ultimo;
                        aux.siguiente=nuevo;
                        nuevo.anterior=aux;
                        temporal.ultimo=nuevo;
                    }
                temporal=temporal.siguiente;
                }
                x++;
                temp=temp.siguiente;
            }
        }

        //------------------------------Genera la imagen para graphviz
        public void guardarenGraphiz(){
             FileWriter fichero = null;
             PrintWriter pw = null;
             try{
                 fichero = new FileWriter( "Matriz.dot");
                 pw = new PrintWriter(fichero);
                 Cabeceras tempo=columnaprimero;
                 pw.println("digraph G{");
                 pw.println("subgraph matriz{");
                 pw.println("{rank=same raiz ");
                 //-----------------------------------modo horizontal cabecera x-------------
                 while(tempo!=null){
                    pw.print(tempo.hashCode()+" ");
                    tempo=tempo.siguiente;
                 }
                  pw.println("}");
                 tempo=columnaprimero;
                 if(tempo!=null){
                    pw.println("subgraph lista_matriz{"); 
                    pw.println("raiz[shape=box,label=\"*\"];");
                    pw.print("raiz->"+tempo.hashCode()+";");
                    while(tempo!=null){
                        if(tempo.siguiente!=null){
                            pw.println(tempo.hashCode()+"[shape=box,label=\""+tempo.numero+"\"];");
                            pw.println(tempo.siguiente.hashCode()+"[shape=box,label=\""+tempo.siguiente.numero+"\"];");
                            pw.println(tempo.hashCode()+"->"+tempo.siguiente.hashCode()+";");
                        }else if(tempo==columnaprimero){
                            pw.println(tempo.hashCode()+"[shape=box,label=\""+tempo.numero+"\"];");
                        }
                        
                        //-------------------------------------matriz de columas---------------------------
                        Nodo nodo=tempo.primero;
                        if(nodo!=null){
                            pw.println(tempo.hashCode()+"->"+nodo.hashCode()+";");
                            while(nodo!=null){
                                if(nodo!=tempo.ultimo){
                                    pw.println(nodo.hashCode()+"->"+nodo.abajo.hashCode()+";");
                                    pw.println(nodo.hashCode()+"[label=\""+nodo.x+","+nodo.y+"\"];");
                                    pw.println(nodo.abajo.hashCode()+"->"+nodo.hashCode()+";");
                                }else if(nodo==tempo.primero || nodo==tempo.ultimo){
                                   pw.println(nodo.hashCode()+"[label=\""+nodo.x+","+nodo.y+"\"];"); 
                                }
                                nodo=nodo.abajo;
                            }
                        }
                        
                        
                        tempo=tempo.siguiente;
                    }
                    
                    //-----------------------------------------------------Fila---------------------------------
                    Cabeceras auxiliar=filaprimero;
                    if(auxiliar!= null){
                        pw.println("raiz->"+auxiliar.hashCode()+";");
                        int contador=0;
                        while(auxiliar!=null){
                            if(auxiliar.siguiente!=null){
                               pw.println(auxiliar.hashCode()+"[shape=box,label=\""+auxiliar.numero+"\"];"); 
                               pw.println(auxiliar.siguiente.hashCode()+"[shape=box,label=\""+auxiliar.siguiente.numero+"\"];");
                               pw.println(auxiliar.hashCode()+"->"+auxiliar.siguiente.hashCode()+";");
                            }else if(auxiliar==filaprimero){
                               pw.println(auxiliar.hashCode()+"[shape=box,label=\""+auxiliar.numero+"\"];");                                 
                            }
                            
                            //------------------------------------------Alinear Horizontalmente---------------
                            Nodo nodo=auxiliar.primero;
                            pw.print("{rank=same "+auxiliar.hashCode()+" ");
                            while(nodo!=null){
                                pw.print(nodo.hashCode()+" ");
                                nodo=nodo.siguiente;
                            }
                            pw.println("}");
                            nodo=auxiliar.primero;
                            
                            //--------------------------Matriz Ortogonal-----------------------------------
                            if(nodo!=null){
                                pw.println(auxiliar.hashCode()+"->"+nodo.hashCode()+";");
                                while(nodo!=null){
                                    if(nodo!=auxiliar.ultimo){
                                        pw.println(nodo.hashCode()+"->"+nodo.siguiente.hashCode()+";");
                                        pw.println(nodo.siguiente.hashCode()+"->"+nodo.hashCode()+";");
                                    }else if(nodo==auxiliar.primero || nodo==auxiliar.ultimo){
                                        
                                    }
                                    nodo=nodo.siguiente;
                                }
                            }
                            auxiliar=auxiliar.siguiente;
                        }
                    }
                    pw.println("}");
                 }
                pw.println("}");
                pw.println("}");
                fichero.close();
                    String [] cmd = {"dot","-Tpng", "Matriz.dot","-o","Matriz.png"};
                    Runtime.getRuntime().exec(cmd); 
             }catch(Exception e){}
             mostrarImagen();
        }
        
        //---------------------------------Mostrar Imagen--------------------------------------
        public void mostrarImagen(){
            try{
            BufferedImage bufimg=ImageIO.read(new File("/home/wolfghost/Escritorio/5to semestre/Estructuras/Proyecto1/Proyecto1_java/PROYECTO1EDD/Matriz.png"));
            Image dimg = bufimg.getScaledInstance(foto.getWidth(), foto.getHeight(),Image.SCALE_SMOOTH);
            ImageIcon icon=new ImageIcon(dimg);
            foto.setIcon(icon);
        }catch(IOException e){}
        }        
        
        
        //--------------------------obtener tamaño de matriz-------------------------------
        public void tamanioMatriz(){
            try{
        transport= new TSocket("localhost",9090);
        transport.open();
         protocol= new TBinaryProtocol(transport);
        cliente=new Proyecto1.Client(protocol); 
        tamanio=cliente.obtenerTamanio();
        transport.close();
        }catch(Exception e){
            System.out.println("Error de Conexion");
        }
        }

        //-----------------------------obtener el nivel actual-------------------------------
        public void obtenerTamanio(){
            try{
                transport= new TSocket("localhost",9090);
                transport.open();
                protocol= new TBinaryProtocol(transport);
                cliente=new Proyecto1.Client(protocol); 
                int numero=cliente.obtenerNivel();
                num_nivel=numero;
                num_usuario=cliente.obtenerUsuario();
                jLabel4.setText(String.valueOf(numero));
                //---------------------------------Cantidad de tiempo--------------------------
                if(numero==0 || numero==1){
                    jLabel9.setText("1");
                    jLabel11.setText("00");
                }else if(numero==2 || numero==3){
                    jLabel9.setText("1");
                    jLabel11.setText("30");
                }else if(numero==4 || numero==5){
                    jLabel9.setText("2");
                    jLabel11.setText("00");
                }else{
                    jLabel9.setText("3");
                    jLabel11.setText("00");
                }
                transport.close();
                }catch(Exception e){
                    System.out.println("Error de Conexion");
                }
        }
        //---------------------------------Metodo de Hilo----------------------------------------------
        @Override
        public void run(){
            Thread ct=Thread.currentThread();
                while(jugando){
                    try{
                        jugando=true;
                        cronometro();
                        Thread.sleep(1000);
                    }catch(InterruptedException rr){}
                
            }
        }
        
        //------------------------------------Temporizador----------------------------------------------
        public void cronometro(){
            int segundos=Integer.parseInt(jLabel11.getText());
            int minutos=Integer.parseInt(jLabel9.getText());
            
            if(segundos==0){
                segundos=59;
                minutos=minutos-1;
                if(minutos==-1){
                    int punta=puntajeGanador(num_nivel);
                    int puntaacutal=Integer.parseInt(jLabel5.getText());
                    if(puntaacutal>=punta){
                        try{
                            transport= new TSocket("localhost",9090);
                            transport.open();
                             protocol= new TBinaryProtocol(transport);
                            cliente=new Proyecto1.Client(protocol); 
                            cliente.desbloquearNivel(num_nivel);
                            int dialogResult=JOptionPane.showConfirmDialog(null,
                                    "Felicidades Has ganado \n deseas ver tus enemigos eliminados");
                            if(dialogResult==0){
                                cliente.graficarEnemigos(num_usuario);
                                ListEnemigos enemigos=new ListEnemigos();
                                enemigos.show();
                            }
                            transport.close();
                        }catch(Exception e){
                            System.out.println("Error de Conexion");
                        }
                        System.out.println("Has Ganado");
                        
                    }else{
                        JOptionPane.showMessageDialog(this,"Has perdido :(");
                    }
                    try{
                        transport= new TSocket("localhost",9090);
                        transport.open();
                         protocol= new TBinaryProtocol(transport);
                        cliente=new Proyecto1.Client(protocol); 
                        cliente.guardarPuntaje(num_usuario, num_nivel, puntaacutal);
                        cliente.pararGeneradorEnemigos();
                        System.out.println("Cerrando enemigos");
                        transport.close();
                    }catch(Exception e){
                        System.out.println("Error de Conexion");
                    }
                    hilo.stop();

                }
            }else{
                segundos=segundos-1;
            }
            
            jLabel9.setText(String.valueOf(minutos));
            jLabel11.setText(String.valueOf(segundos));
            
        }

        //-----------------------------------------puntaje----------------------------------------------
        public int puntajeGanador(int puntaje){
            if(puntaje==0) return 80;
                return puntajeGanador(puntaje-1)+20;
            
        }

}
