/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package proyecto1edd;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-19")
public class Proyecto1 {

  public interface Iface {

    public boolean accesoNivel(int num1) throws org.apache.thrift.TException;

    public void generadorEnemigos() throws org.apache.thrift.TException;

    public void pararGeneradorEnemigos() throws org.apache.thrift.TException;

    public int obtenerTamanio() throws org.apache.thrift.TException;

    public int moverJugador(int num1, int num2, int num3, int errores) throws org.apache.thrift.TException;

    public int obtenerNivel() throws org.apache.thrift.TException;

    public void guardarUsuario(String nombre) throws org.apache.thrift.TException;

    public String regresarUsuario(int numero) throws org.apache.thrift.TException;

    public void setUsuario(int numero) throws org.apache.thrift.TException;

    public int obtenerUsuario() throws org.apache.thrift.TException;

    public void desbloquearNivel(int numero) throws org.apache.thrift.TException;

    public void graficarEnemigos(int usuario) throws org.apache.thrift.TException;

    public void guardarPuntaje(int usuario, int nivel, int puntaje) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void accesoNivel(int num1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generadorEnemigos(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pararGeneradorEnemigos(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtenerTamanio(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void moverJugador(int num1, int num2, int num3, int errores, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtenerNivel(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void guardarUsuario(String nombre, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void regresarUsuario(int numero, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setUsuario(int numero, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtenerUsuario(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void desbloquearNivel(int numero, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void graficarEnemigos(int usuario, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void guardarPuntaje(int usuario, int nivel, int puntaje, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean accesoNivel(int num1) throws org.apache.thrift.TException
    {
      send_accesoNivel(num1);
      return recv_accesoNivel();
    }

    public void send_accesoNivel(int num1) throws org.apache.thrift.TException
    {
      accesoNivel_args args = new accesoNivel_args();
      args.setNum1(num1);
      sendBase("accesoNivel", args);
    }

    public boolean recv_accesoNivel() throws org.apache.thrift.TException
    {
      accesoNivel_result result = new accesoNivel_result();
      receiveBase(result, "accesoNivel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "accesoNivel failed: unknown result");
    }

    public void generadorEnemigos() throws org.apache.thrift.TException
    {
      send_generadorEnemigos();
      recv_generadorEnemigos();
    }

    public void send_generadorEnemigos() throws org.apache.thrift.TException
    {
      generadorEnemigos_args args = new generadorEnemigos_args();
      sendBase("generadorEnemigos", args);
    }

    public void recv_generadorEnemigos() throws org.apache.thrift.TException
    {
      generadorEnemigos_result result = new generadorEnemigos_result();
      receiveBase(result, "generadorEnemigos");
      return;
    }

    public void pararGeneradorEnemigos() throws org.apache.thrift.TException
    {
      send_pararGeneradorEnemigos();
      recv_pararGeneradorEnemigos();
    }

    public void send_pararGeneradorEnemigos() throws org.apache.thrift.TException
    {
      pararGeneradorEnemigos_args args = new pararGeneradorEnemigos_args();
      sendBase("pararGeneradorEnemigos", args);
    }

    public void recv_pararGeneradorEnemigos() throws org.apache.thrift.TException
    {
      pararGeneradorEnemigos_result result = new pararGeneradorEnemigos_result();
      receiveBase(result, "pararGeneradorEnemigos");
      return;
    }

    public int obtenerTamanio() throws org.apache.thrift.TException
    {
      send_obtenerTamanio();
      return recv_obtenerTamanio();
    }

    public void send_obtenerTamanio() throws org.apache.thrift.TException
    {
      obtenerTamanio_args args = new obtenerTamanio_args();
      sendBase("obtenerTamanio", args);
    }

    public int recv_obtenerTamanio() throws org.apache.thrift.TException
    {
      obtenerTamanio_result result = new obtenerTamanio_result();
      receiveBase(result, "obtenerTamanio");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerTamanio failed: unknown result");
    }

    public int moverJugador(int num1, int num2, int num3, int errores) throws org.apache.thrift.TException
    {
      send_moverJugador(num1, num2, num3, errores);
      return recv_moverJugador();
    }

    public void send_moverJugador(int num1, int num2, int num3, int errores) throws org.apache.thrift.TException
    {
      moverJugador_args args = new moverJugador_args();
      args.setNum1(num1);
      args.setNum2(num2);
      args.setNum3(num3);
      args.setErrores(errores);
      sendBase("moverJugador", args);
    }

    public int recv_moverJugador() throws org.apache.thrift.TException
    {
      moverJugador_result result = new moverJugador_result();
      receiveBase(result, "moverJugador");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "moverJugador failed: unknown result");
    }

    public int obtenerNivel() throws org.apache.thrift.TException
    {
      send_obtenerNivel();
      return recv_obtenerNivel();
    }

    public void send_obtenerNivel() throws org.apache.thrift.TException
    {
      obtenerNivel_args args = new obtenerNivel_args();
      sendBase("obtenerNivel", args);
    }

    public int recv_obtenerNivel() throws org.apache.thrift.TException
    {
      obtenerNivel_result result = new obtenerNivel_result();
      receiveBase(result, "obtenerNivel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerNivel failed: unknown result");
    }

    public void guardarUsuario(String nombre) throws org.apache.thrift.TException
    {
      send_guardarUsuario(nombre);
      recv_guardarUsuario();
    }

    public void send_guardarUsuario(String nombre) throws org.apache.thrift.TException
    {
      guardarUsuario_args args = new guardarUsuario_args();
      args.setNombre(nombre);
      sendBase("guardarUsuario", args);
    }

    public void recv_guardarUsuario() throws org.apache.thrift.TException
    {
      guardarUsuario_result result = new guardarUsuario_result();
      receiveBase(result, "guardarUsuario");
      return;
    }

    public String regresarUsuario(int numero) throws org.apache.thrift.TException
    {
      send_regresarUsuario(numero);
      return recv_regresarUsuario();
    }

    public void send_regresarUsuario(int numero) throws org.apache.thrift.TException
    {
      regresarUsuario_args args = new regresarUsuario_args();
      args.setNumero(numero);
      sendBase("regresarUsuario", args);
    }

    public String recv_regresarUsuario() throws org.apache.thrift.TException
    {
      regresarUsuario_result result = new regresarUsuario_result();
      receiveBase(result, "regresarUsuario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "regresarUsuario failed: unknown result");
    }

    public void setUsuario(int numero) throws org.apache.thrift.TException
    {
      send_setUsuario(numero);
      recv_setUsuario();
    }

    public void send_setUsuario(int numero) throws org.apache.thrift.TException
    {
      setUsuario_args args = new setUsuario_args();
      args.setNumero(numero);
      sendBase("setUsuario", args);
    }

    public void recv_setUsuario() throws org.apache.thrift.TException
    {
      setUsuario_result result = new setUsuario_result();
      receiveBase(result, "setUsuario");
      return;
    }

    public int obtenerUsuario() throws org.apache.thrift.TException
    {
      send_obtenerUsuario();
      return recv_obtenerUsuario();
    }

    public void send_obtenerUsuario() throws org.apache.thrift.TException
    {
      obtenerUsuario_args args = new obtenerUsuario_args();
      sendBase("obtenerUsuario", args);
    }

    public int recv_obtenerUsuario() throws org.apache.thrift.TException
    {
      obtenerUsuario_result result = new obtenerUsuario_result();
      receiveBase(result, "obtenerUsuario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtenerUsuario failed: unknown result");
    }

    public void desbloquearNivel(int numero) throws org.apache.thrift.TException
    {
      send_desbloquearNivel(numero);
      recv_desbloquearNivel();
    }

    public void send_desbloquearNivel(int numero) throws org.apache.thrift.TException
    {
      desbloquearNivel_args args = new desbloquearNivel_args();
      args.setNumero(numero);
      sendBase("desbloquearNivel", args);
    }

    public void recv_desbloquearNivel() throws org.apache.thrift.TException
    {
      desbloquearNivel_result result = new desbloquearNivel_result();
      receiveBase(result, "desbloquearNivel");
      return;
    }

    public void graficarEnemigos(int usuario) throws org.apache.thrift.TException
    {
      send_graficarEnemigos(usuario);
      recv_graficarEnemigos();
    }

    public void send_graficarEnemigos(int usuario) throws org.apache.thrift.TException
    {
      graficarEnemigos_args args = new graficarEnemigos_args();
      args.setUsuario(usuario);
      sendBase("graficarEnemigos", args);
    }

    public void recv_graficarEnemigos() throws org.apache.thrift.TException
    {
      graficarEnemigos_result result = new graficarEnemigos_result();
      receiveBase(result, "graficarEnemigos");
      return;
    }

    public void guardarPuntaje(int usuario, int nivel, int puntaje) throws org.apache.thrift.TException
    {
      send_guardarPuntaje(usuario, nivel, puntaje);
      recv_guardarPuntaje();
    }

    public void send_guardarPuntaje(int usuario, int nivel, int puntaje) throws org.apache.thrift.TException
    {
      guardarPuntaje_args args = new guardarPuntaje_args();
      args.setUsuario(usuario);
      args.setNivel(nivel);
      args.setPuntaje(puntaje);
      sendBase("guardarPuntaje", args);
    }

    public void recv_guardarPuntaje() throws org.apache.thrift.TException
    {
      guardarPuntaje_result result = new guardarPuntaje_result();
      receiveBase(result, "guardarPuntaje");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void accesoNivel(int num1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      accesoNivel_call method_call = new accesoNivel_call(num1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class accesoNivel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num1;
      public accesoNivel_call(int num1, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num1 = num1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("accesoNivel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        accesoNivel_args args = new accesoNivel_args();
        args.setNum1(num1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_accesoNivel();
      }
    }

    public void generadorEnemigos(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generadorEnemigos_call method_call = new generadorEnemigos_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generadorEnemigos_call extends org.apache.thrift.async.TAsyncMethodCall {
      public generadorEnemigos_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generadorEnemigos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generadorEnemigos_args args = new generadorEnemigos_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_generadorEnemigos();
      }
    }

    public void pararGeneradorEnemigos(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pararGeneradorEnemigos_call method_call = new pararGeneradorEnemigos_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pararGeneradorEnemigos_call extends org.apache.thrift.async.TAsyncMethodCall {
      public pararGeneradorEnemigos_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pararGeneradorEnemigos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pararGeneradorEnemigos_args args = new pararGeneradorEnemigos_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_pararGeneradorEnemigos();
      }
    }

    public void obtenerTamanio(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerTamanio_call method_call = new obtenerTamanio_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerTamanio_call extends org.apache.thrift.async.TAsyncMethodCall {
      public obtenerTamanio_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerTamanio", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerTamanio_args args = new obtenerTamanio_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerTamanio();
      }
    }

    public void moverJugador(int num1, int num2, int num3, int errores, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      moverJugador_call method_call = new moverJugador_call(num1, num2, num3, errores, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class moverJugador_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num1;
      private int num2;
      private int num3;
      private int errores;
      public moverJugador_call(int num1, int num2, int num3, int errores, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num1 = num1;
        this.num2 = num2;
        this.num3 = num3;
        this.errores = errores;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("moverJugador", org.apache.thrift.protocol.TMessageType.CALL, 0));
        moverJugador_args args = new moverJugador_args();
        args.setNum1(num1);
        args.setNum2(num2);
        args.setNum3(num3);
        args.setErrores(errores);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_moverJugador();
      }
    }

    public void obtenerNivel(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerNivel_call method_call = new obtenerNivel_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerNivel_call extends org.apache.thrift.async.TAsyncMethodCall {
      public obtenerNivel_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerNivel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerNivel_args args = new obtenerNivel_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerNivel();
      }
    }

    public void guardarUsuario(String nombre, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      guardarUsuario_call method_call = new guardarUsuario_call(nombre, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class guardarUsuario_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nombre;
      public guardarUsuario_call(String nombre, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nombre = nombre;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("guardarUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        guardarUsuario_args args = new guardarUsuario_args();
        args.setNombre(nombre);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_guardarUsuario();
      }
    }

    public void regresarUsuario(int numero, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      regresarUsuario_call method_call = new regresarUsuario_call(numero, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class regresarUsuario_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int numero;
      public regresarUsuario_call(int numero, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numero = numero;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("regresarUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        regresarUsuario_args args = new regresarUsuario_args();
        args.setNumero(numero);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_regresarUsuario();
      }
    }

    public void setUsuario(int numero, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setUsuario_call method_call = new setUsuario_call(numero, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUsuario_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int numero;
      public setUsuario_call(int numero, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numero = numero;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setUsuario_args args = new setUsuario_args();
        args.setNumero(numero);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setUsuario();
      }
    }

    public void obtenerUsuario(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtenerUsuario_call method_call = new obtenerUsuario_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtenerUsuario_call extends org.apache.thrift.async.TAsyncMethodCall {
      public obtenerUsuario_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtenerUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtenerUsuario_args args = new obtenerUsuario_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtenerUsuario();
      }
    }

    public void desbloquearNivel(int numero, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      desbloquearNivel_call method_call = new desbloquearNivel_call(numero, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class desbloquearNivel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int numero;
      public desbloquearNivel_call(int numero, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numero = numero;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("desbloquearNivel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        desbloquearNivel_args args = new desbloquearNivel_args();
        args.setNumero(numero);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_desbloquearNivel();
      }
    }

    public void graficarEnemigos(int usuario, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      graficarEnemigos_call method_call = new graficarEnemigos_call(usuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class graficarEnemigos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int usuario;
      public graficarEnemigos_call(int usuario, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("graficarEnemigos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        graficarEnemigos_args args = new graficarEnemigos_args();
        args.setUsuario(usuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_graficarEnemigos();
      }
    }

    public void guardarPuntaje(int usuario, int nivel, int puntaje, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      guardarPuntaje_call method_call = new guardarPuntaje_call(usuario, nivel, puntaje, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class guardarPuntaje_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int usuario;
      private int nivel;
      private int puntaje;
      public guardarPuntaje_call(int usuario, int nivel, int puntaje, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
        this.nivel = nivel;
        this.puntaje = puntaje;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("guardarPuntaje", org.apache.thrift.protocol.TMessageType.CALL, 0));
        guardarPuntaje_args args = new guardarPuntaje_args();
        args.setUsuario(usuario);
        args.setNivel(nivel);
        args.setPuntaje(puntaje);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_guardarPuntaje();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("accesoNivel", new accesoNivel());
      processMap.put("generadorEnemigos", new generadorEnemigos());
      processMap.put("pararGeneradorEnemigos", new pararGeneradorEnemigos());
      processMap.put("obtenerTamanio", new obtenerTamanio());
      processMap.put("moverJugador", new moverJugador());
      processMap.put("obtenerNivel", new obtenerNivel());
      processMap.put("guardarUsuario", new guardarUsuario());
      processMap.put("regresarUsuario", new regresarUsuario());
      processMap.put("setUsuario", new setUsuario());
      processMap.put("obtenerUsuario", new obtenerUsuario());
      processMap.put("desbloquearNivel", new desbloquearNivel());
      processMap.put("graficarEnemigos", new graficarEnemigos());
      processMap.put("guardarPuntaje", new guardarPuntaje());
      return processMap;
    }

    public static class accesoNivel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, accesoNivel_args> {
      public accesoNivel() {
        super("accesoNivel");
      }

      public accesoNivel_args getEmptyArgsInstance() {
        return new accesoNivel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public accesoNivel_result getResult(I iface, accesoNivel_args args) throws org.apache.thrift.TException {
        accesoNivel_result result = new accesoNivel_result();
        result.success = iface.accesoNivel(args.num1);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class generadorEnemigos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generadorEnemigos_args> {
      public generadorEnemigos() {
        super("generadorEnemigos");
      }

      public generadorEnemigos_args getEmptyArgsInstance() {
        return new generadorEnemigos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generadorEnemigos_result getResult(I iface, generadorEnemigos_args args) throws org.apache.thrift.TException {
        generadorEnemigos_result result = new generadorEnemigos_result();
        iface.generadorEnemigos();
        return result;
      }
    }

    public static class pararGeneradorEnemigos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pararGeneradorEnemigos_args> {
      public pararGeneradorEnemigos() {
        super("pararGeneradorEnemigos");
      }

      public pararGeneradorEnemigos_args getEmptyArgsInstance() {
        return new pararGeneradorEnemigos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pararGeneradorEnemigos_result getResult(I iface, pararGeneradorEnemigos_args args) throws org.apache.thrift.TException {
        pararGeneradorEnemigos_result result = new pararGeneradorEnemigos_result();
        iface.pararGeneradorEnemigos();
        return result;
      }
    }

    public static class obtenerTamanio<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerTamanio_args> {
      public obtenerTamanio() {
        super("obtenerTamanio");
      }

      public obtenerTamanio_args getEmptyArgsInstance() {
        return new obtenerTamanio_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerTamanio_result getResult(I iface, obtenerTamanio_args args) throws org.apache.thrift.TException {
        obtenerTamanio_result result = new obtenerTamanio_result();
        result.success = iface.obtenerTamanio();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class moverJugador<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moverJugador_args> {
      public moverJugador() {
        super("moverJugador");
      }

      public moverJugador_args getEmptyArgsInstance() {
        return new moverJugador_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public moverJugador_result getResult(I iface, moverJugador_args args) throws org.apache.thrift.TException {
        moverJugador_result result = new moverJugador_result();
        result.success = iface.moverJugador(args.num1, args.num2, args.num3, args.errores);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class obtenerNivel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerNivel_args> {
      public obtenerNivel() {
        super("obtenerNivel");
      }

      public obtenerNivel_args getEmptyArgsInstance() {
        return new obtenerNivel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerNivel_result getResult(I iface, obtenerNivel_args args) throws org.apache.thrift.TException {
        obtenerNivel_result result = new obtenerNivel_result();
        result.success = iface.obtenerNivel();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class guardarUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, guardarUsuario_args> {
      public guardarUsuario() {
        super("guardarUsuario");
      }

      public guardarUsuario_args getEmptyArgsInstance() {
        return new guardarUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public guardarUsuario_result getResult(I iface, guardarUsuario_args args) throws org.apache.thrift.TException {
        guardarUsuario_result result = new guardarUsuario_result();
        iface.guardarUsuario(args.nombre);
        return result;
      }
    }

    public static class regresarUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, regresarUsuario_args> {
      public regresarUsuario() {
        super("regresarUsuario");
      }

      public regresarUsuario_args getEmptyArgsInstance() {
        return new regresarUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public regresarUsuario_result getResult(I iface, regresarUsuario_args args) throws org.apache.thrift.TException {
        regresarUsuario_result result = new regresarUsuario_result();
        result.success = iface.regresarUsuario(args.numero);
        return result;
      }
    }

    public static class setUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUsuario_args> {
      public setUsuario() {
        super("setUsuario");
      }

      public setUsuario_args getEmptyArgsInstance() {
        return new setUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setUsuario_result getResult(I iface, setUsuario_args args) throws org.apache.thrift.TException {
        setUsuario_result result = new setUsuario_result();
        iface.setUsuario(args.numero);
        return result;
      }
    }

    public static class obtenerUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtenerUsuario_args> {
      public obtenerUsuario() {
        super("obtenerUsuario");
      }

      public obtenerUsuario_args getEmptyArgsInstance() {
        return new obtenerUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtenerUsuario_result getResult(I iface, obtenerUsuario_args args) throws org.apache.thrift.TException {
        obtenerUsuario_result result = new obtenerUsuario_result();
        result.success = iface.obtenerUsuario();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class desbloquearNivel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, desbloquearNivel_args> {
      public desbloquearNivel() {
        super("desbloquearNivel");
      }

      public desbloquearNivel_args getEmptyArgsInstance() {
        return new desbloquearNivel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public desbloquearNivel_result getResult(I iface, desbloquearNivel_args args) throws org.apache.thrift.TException {
        desbloquearNivel_result result = new desbloquearNivel_result();
        iface.desbloquearNivel(args.numero);
        return result;
      }
    }

    public static class graficarEnemigos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, graficarEnemigos_args> {
      public graficarEnemigos() {
        super("graficarEnemigos");
      }

      public graficarEnemigos_args getEmptyArgsInstance() {
        return new graficarEnemigos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public graficarEnemigos_result getResult(I iface, graficarEnemigos_args args) throws org.apache.thrift.TException {
        graficarEnemigos_result result = new graficarEnemigos_result();
        iface.graficarEnemigos(args.usuario);
        return result;
      }
    }

    public static class guardarPuntaje<I extends Iface> extends org.apache.thrift.ProcessFunction<I, guardarPuntaje_args> {
      public guardarPuntaje() {
        super("guardarPuntaje");
      }

      public guardarPuntaje_args getEmptyArgsInstance() {
        return new guardarPuntaje_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public guardarPuntaje_result getResult(I iface, guardarPuntaje_args args) throws org.apache.thrift.TException {
        guardarPuntaje_result result = new guardarPuntaje_result();
        iface.guardarPuntaje(args.usuario, args.nivel, args.puntaje);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("accesoNivel", new accesoNivel());
      processMap.put("generadorEnemigos", new generadorEnemigos());
      processMap.put("pararGeneradorEnemigos", new pararGeneradorEnemigos());
      processMap.put("obtenerTamanio", new obtenerTamanio());
      processMap.put("moverJugador", new moverJugador());
      processMap.put("obtenerNivel", new obtenerNivel());
      processMap.put("guardarUsuario", new guardarUsuario());
      processMap.put("regresarUsuario", new regresarUsuario());
      processMap.put("setUsuario", new setUsuario());
      processMap.put("obtenerUsuario", new obtenerUsuario());
      processMap.put("desbloquearNivel", new desbloquearNivel());
      processMap.put("graficarEnemigos", new graficarEnemigos());
      processMap.put("guardarPuntaje", new guardarPuntaje());
      return processMap;
    }

    public static class accesoNivel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, accesoNivel_args, Boolean> {
      public accesoNivel() {
        super("accesoNivel");
      }

      public accesoNivel_args getEmptyArgsInstance() {
        return new accesoNivel_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            accesoNivel_result result = new accesoNivel_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            accesoNivel_result result = new accesoNivel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, accesoNivel_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.accesoNivel(args.num1,resultHandler);
      }
    }

    public static class generadorEnemigos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generadorEnemigos_args, Void> {
      public generadorEnemigos() {
        super("generadorEnemigos");
      }

      public generadorEnemigos_args getEmptyArgsInstance() {
        return new generadorEnemigos_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            generadorEnemigos_result result = new generadorEnemigos_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generadorEnemigos_result result = new generadorEnemigos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generadorEnemigos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.generadorEnemigos(resultHandler);
      }
    }

    public static class pararGeneradorEnemigos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pararGeneradorEnemigos_args, Void> {
      public pararGeneradorEnemigos() {
        super("pararGeneradorEnemigos");
      }

      public pararGeneradorEnemigos_args getEmptyArgsInstance() {
        return new pararGeneradorEnemigos_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            pararGeneradorEnemigos_result result = new pararGeneradorEnemigos_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pararGeneradorEnemigos_result result = new pararGeneradorEnemigos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pararGeneradorEnemigos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.pararGeneradorEnemigos(resultHandler);
      }
    }

    public static class obtenerTamanio<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerTamanio_args, Integer> {
      public obtenerTamanio() {
        super("obtenerTamanio");
      }

      public obtenerTamanio_args getEmptyArgsInstance() {
        return new obtenerTamanio_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            obtenerTamanio_result result = new obtenerTamanio_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtenerTamanio_result result = new obtenerTamanio_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerTamanio_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.obtenerTamanio(resultHandler);
      }
    }

    public static class moverJugador<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, moverJugador_args, Integer> {
      public moverJugador() {
        super("moverJugador");
      }

      public moverJugador_args getEmptyArgsInstance() {
        return new moverJugador_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            moverJugador_result result = new moverJugador_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            moverJugador_result result = new moverJugador_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, moverJugador_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.moverJugador(args.num1, args.num2, args.num3, args.errores,resultHandler);
      }
    }

    public static class obtenerNivel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerNivel_args, Integer> {
      public obtenerNivel() {
        super("obtenerNivel");
      }

      public obtenerNivel_args getEmptyArgsInstance() {
        return new obtenerNivel_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            obtenerNivel_result result = new obtenerNivel_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtenerNivel_result result = new obtenerNivel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerNivel_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.obtenerNivel(resultHandler);
      }
    }

    public static class guardarUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, guardarUsuario_args, Void> {
      public guardarUsuario() {
        super("guardarUsuario");
      }

      public guardarUsuario_args getEmptyArgsInstance() {
        return new guardarUsuario_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            guardarUsuario_result result = new guardarUsuario_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            guardarUsuario_result result = new guardarUsuario_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, guardarUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.guardarUsuario(args.nombre,resultHandler);
      }
    }

    public static class regresarUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, regresarUsuario_args, String> {
      public regresarUsuario() {
        super("regresarUsuario");
      }

      public regresarUsuario_args getEmptyArgsInstance() {
        return new regresarUsuario_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            regresarUsuario_result result = new regresarUsuario_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            regresarUsuario_result result = new regresarUsuario_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, regresarUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.regresarUsuario(args.numero,resultHandler);
      }
    }

    public static class setUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setUsuario_args, Void> {
      public setUsuario() {
        super("setUsuario");
      }

      public setUsuario_args getEmptyArgsInstance() {
        return new setUsuario_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setUsuario_result result = new setUsuario_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setUsuario_result result = new setUsuario_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setUsuario(args.numero,resultHandler);
      }
    }

    public static class obtenerUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtenerUsuario_args, Integer> {
      public obtenerUsuario() {
        super("obtenerUsuario");
      }

      public obtenerUsuario_args getEmptyArgsInstance() {
        return new obtenerUsuario_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            obtenerUsuario_result result = new obtenerUsuario_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtenerUsuario_result result = new obtenerUsuario_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtenerUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.obtenerUsuario(resultHandler);
      }
    }

    public static class desbloquearNivel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, desbloquearNivel_args, Void> {
      public desbloquearNivel() {
        super("desbloquearNivel");
      }

      public desbloquearNivel_args getEmptyArgsInstance() {
        return new desbloquearNivel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            desbloquearNivel_result result = new desbloquearNivel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            desbloquearNivel_result result = new desbloquearNivel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, desbloquearNivel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.desbloquearNivel(args.numero,resultHandler);
      }
    }

    public static class graficarEnemigos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, graficarEnemigos_args, Void> {
      public graficarEnemigos() {
        super("graficarEnemigos");
      }

      public graficarEnemigos_args getEmptyArgsInstance() {
        return new graficarEnemigos_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            graficarEnemigos_result result = new graficarEnemigos_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            graficarEnemigos_result result = new graficarEnemigos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, graficarEnemigos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.graficarEnemigos(args.usuario,resultHandler);
      }
    }

    public static class guardarPuntaje<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, guardarPuntaje_args, Void> {
      public guardarPuntaje() {
        super("guardarPuntaje");
      }

      public guardarPuntaje_args getEmptyArgsInstance() {
        return new guardarPuntaje_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            guardarPuntaje_result result = new guardarPuntaje_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            guardarPuntaje_result result = new guardarPuntaje_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, guardarPuntaje_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.guardarPuntaje(args.usuario, args.nivel, args.puntaje,resultHandler);
      }
    }

  }

  public static class accesoNivel_args implements org.apache.thrift.TBase<accesoNivel_args, accesoNivel_args._Fields>, java.io.Serializable, Cloneable, Comparable<accesoNivel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accesoNivel_args");

    private static final org.apache.thrift.protocol.TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new accesoNivel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new accesoNivel_argsTupleSchemeFactory());
    }

    public int num1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM1((short)1, "num1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM1
            return NUM1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM1_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accesoNivel_args.class, metaDataMap);
    }

    public accesoNivel_args() {
    }

    public accesoNivel_args(
      int num1)
    {
      this();
      this.num1 = num1;
      setNum1IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public accesoNivel_args(accesoNivel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num1 = other.num1;
    }

    public accesoNivel_args deepCopy() {
      return new accesoNivel_args(this);
    }

    @Override
    public void clear() {
      setNum1IsSet(false);
      this.num1 = 0;
    }

    public int getNum1() {
      return this.num1;
    }

    public accesoNivel_args setNum1(int num1) {
      this.num1 = num1;
      setNum1IsSet(true);
      return this;
    }

    public void unsetNum1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    /** Returns true if field num1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum1() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    public void setNum1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          setNum1((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM1:
        return getNum1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM1:
        return isSetNum1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof accesoNivel_args)
        return this.equals((accesoNivel_args)that);
      return false;
    }

    public boolean equals(accesoNivel_args that) {
      if (that == null)
        return false;

      boolean this_present_num1 = true;
      boolean that_present_num1 = true;
      if (this_present_num1 || that_present_num1) {
        if (!(this_present_num1 && that_present_num1))
          return false;
        if (this.num1 != that.num1)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_num1 = true;
      list.add(present_num1);
      if (present_num1)
        list.add(num1);

      return list.hashCode();
    }

    @Override
    public int compareTo(accesoNivel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("accesoNivel_args(");
      boolean first = true;

      sb.append("num1:");
      sb.append(this.num1);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class accesoNivel_argsStandardSchemeFactory implements SchemeFactory {
      public accesoNivel_argsStandardScheme getScheme() {
        return new accesoNivel_argsStandardScheme();
      }
    }

    private static class accesoNivel_argsStandardScheme extends StandardScheme<accesoNivel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, accesoNivel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num1 = iprot.readI32();
                struct.setNum1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, accesoNivel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM1_FIELD_DESC);
        oprot.writeI32(struct.num1);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class accesoNivel_argsTupleSchemeFactory implements SchemeFactory {
      public accesoNivel_argsTupleScheme getScheme() {
        return new accesoNivel_argsTupleScheme();
      }
    }

    private static class accesoNivel_argsTupleScheme extends TupleScheme<accesoNivel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, accesoNivel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNum1()) {
          oprot.writeI32(struct.num1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, accesoNivel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.num1 = iprot.readI32();
          struct.setNum1IsSet(true);
        }
      }
    }

  }

  public static class accesoNivel_result implements org.apache.thrift.TBase<accesoNivel_result, accesoNivel_result._Fields>, java.io.Serializable, Cloneable, Comparable<accesoNivel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accesoNivel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new accesoNivel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new accesoNivel_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accesoNivel_result.class, metaDataMap);
    }

    public accesoNivel_result() {
    }

    public accesoNivel_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public accesoNivel_result(accesoNivel_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public accesoNivel_result deepCopy() {
      return new accesoNivel_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public accesoNivel_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof accesoNivel_result)
        return this.equals((accesoNivel_result)that);
      return false;
    }

    public boolean equals(accesoNivel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(accesoNivel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("accesoNivel_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class accesoNivel_resultStandardSchemeFactory implements SchemeFactory {
      public accesoNivel_resultStandardScheme getScheme() {
        return new accesoNivel_resultStandardScheme();
      }
    }

    private static class accesoNivel_resultStandardScheme extends StandardScheme<accesoNivel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, accesoNivel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, accesoNivel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class accesoNivel_resultTupleSchemeFactory implements SchemeFactory {
      public accesoNivel_resultTupleScheme getScheme() {
        return new accesoNivel_resultTupleScheme();
      }
    }

    private static class accesoNivel_resultTupleScheme extends TupleScheme<accesoNivel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, accesoNivel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, accesoNivel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generadorEnemigos_args implements org.apache.thrift.TBase<generadorEnemigos_args, generadorEnemigos_args._Fields>, java.io.Serializable, Cloneable, Comparable<generadorEnemigos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generadorEnemigos_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generadorEnemigos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generadorEnemigos_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generadorEnemigos_args.class, metaDataMap);
    }

    public generadorEnemigos_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generadorEnemigos_args(generadorEnemigos_args other) {
    }

    public generadorEnemigos_args deepCopy() {
      return new generadorEnemigos_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generadorEnemigos_args)
        return this.equals((generadorEnemigos_args)that);
      return false;
    }

    public boolean equals(generadorEnemigos_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(generadorEnemigos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generadorEnemigos_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generadorEnemigos_argsStandardSchemeFactory implements SchemeFactory {
      public generadorEnemigos_argsStandardScheme getScheme() {
        return new generadorEnemigos_argsStandardScheme();
      }
    }

    private static class generadorEnemigos_argsStandardScheme extends StandardScheme<generadorEnemigos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generadorEnemigos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generadorEnemigos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generadorEnemigos_argsTupleSchemeFactory implements SchemeFactory {
      public generadorEnemigos_argsTupleScheme getScheme() {
        return new generadorEnemigos_argsTupleScheme();
      }
    }

    private static class generadorEnemigos_argsTupleScheme extends TupleScheme<generadorEnemigos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generadorEnemigos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generadorEnemigos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class generadorEnemigos_result implements org.apache.thrift.TBase<generadorEnemigos_result, generadorEnemigos_result._Fields>, java.io.Serializable, Cloneable, Comparable<generadorEnemigos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generadorEnemigos_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generadorEnemigos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generadorEnemigos_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generadorEnemigos_result.class, metaDataMap);
    }

    public generadorEnemigos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generadorEnemigos_result(generadorEnemigos_result other) {
    }

    public generadorEnemigos_result deepCopy() {
      return new generadorEnemigos_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generadorEnemigos_result)
        return this.equals((generadorEnemigos_result)that);
      return false;
    }

    public boolean equals(generadorEnemigos_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(generadorEnemigos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generadorEnemigos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generadorEnemigos_resultStandardSchemeFactory implements SchemeFactory {
      public generadorEnemigos_resultStandardScheme getScheme() {
        return new generadorEnemigos_resultStandardScheme();
      }
    }

    private static class generadorEnemigos_resultStandardScheme extends StandardScheme<generadorEnemigos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generadorEnemigos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generadorEnemigos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generadorEnemigos_resultTupleSchemeFactory implements SchemeFactory {
      public generadorEnemigos_resultTupleScheme getScheme() {
        return new generadorEnemigos_resultTupleScheme();
      }
    }

    private static class generadorEnemigos_resultTupleScheme extends TupleScheme<generadorEnemigos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generadorEnemigos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generadorEnemigos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class pararGeneradorEnemigos_args implements org.apache.thrift.TBase<pararGeneradorEnemigos_args, pararGeneradorEnemigos_args._Fields>, java.io.Serializable, Cloneable, Comparable<pararGeneradorEnemigos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pararGeneradorEnemigos_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pararGeneradorEnemigos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pararGeneradorEnemigos_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pararGeneradorEnemigos_args.class, metaDataMap);
    }

    public pararGeneradorEnemigos_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pararGeneradorEnemigos_args(pararGeneradorEnemigos_args other) {
    }

    public pararGeneradorEnemigos_args deepCopy() {
      return new pararGeneradorEnemigos_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pararGeneradorEnemigos_args)
        return this.equals((pararGeneradorEnemigos_args)that);
      return false;
    }

    public boolean equals(pararGeneradorEnemigos_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(pararGeneradorEnemigos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pararGeneradorEnemigos_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pararGeneradorEnemigos_argsStandardSchemeFactory implements SchemeFactory {
      public pararGeneradorEnemigos_argsStandardScheme getScheme() {
        return new pararGeneradorEnemigos_argsStandardScheme();
      }
    }

    private static class pararGeneradorEnemigos_argsStandardScheme extends StandardScheme<pararGeneradorEnemigos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pararGeneradorEnemigos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pararGeneradorEnemigos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pararGeneradorEnemigos_argsTupleSchemeFactory implements SchemeFactory {
      public pararGeneradorEnemigos_argsTupleScheme getScheme() {
        return new pararGeneradorEnemigos_argsTupleScheme();
      }
    }

    private static class pararGeneradorEnemigos_argsTupleScheme extends TupleScheme<pararGeneradorEnemigos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pararGeneradorEnemigos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pararGeneradorEnemigos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class pararGeneradorEnemigos_result implements org.apache.thrift.TBase<pararGeneradorEnemigos_result, pararGeneradorEnemigos_result._Fields>, java.io.Serializable, Cloneable, Comparable<pararGeneradorEnemigos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pararGeneradorEnemigos_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pararGeneradorEnemigos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pararGeneradorEnemigos_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pararGeneradorEnemigos_result.class, metaDataMap);
    }

    public pararGeneradorEnemigos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pararGeneradorEnemigos_result(pararGeneradorEnemigos_result other) {
    }

    public pararGeneradorEnemigos_result deepCopy() {
      return new pararGeneradorEnemigos_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pararGeneradorEnemigos_result)
        return this.equals((pararGeneradorEnemigos_result)that);
      return false;
    }

    public boolean equals(pararGeneradorEnemigos_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(pararGeneradorEnemigos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pararGeneradorEnemigos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pararGeneradorEnemigos_resultStandardSchemeFactory implements SchemeFactory {
      public pararGeneradorEnemigos_resultStandardScheme getScheme() {
        return new pararGeneradorEnemigos_resultStandardScheme();
      }
    }

    private static class pararGeneradorEnemigos_resultStandardScheme extends StandardScheme<pararGeneradorEnemigos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pararGeneradorEnemigos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pararGeneradorEnemigos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pararGeneradorEnemigos_resultTupleSchemeFactory implements SchemeFactory {
      public pararGeneradorEnemigos_resultTupleScheme getScheme() {
        return new pararGeneradorEnemigos_resultTupleScheme();
      }
    }

    private static class pararGeneradorEnemigos_resultTupleScheme extends TupleScheme<pararGeneradorEnemigos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pararGeneradorEnemigos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pararGeneradorEnemigos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class obtenerTamanio_args implements org.apache.thrift.TBase<obtenerTamanio_args, obtenerTamanio_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerTamanio_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerTamanio_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerTamanio_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerTamanio_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerTamanio_args.class, metaDataMap);
    }

    public obtenerTamanio_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerTamanio_args(obtenerTamanio_args other) {
    }

    public obtenerTamanio_args deepCopy() {
      return new obtenerTamanio_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerTamanio_args)
        return this.equals((obtenerTamanio_args)that);
      return false;
    }

    public boolean equals(obtenerTamanio_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(obtenerTamanio_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerTamanio_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerTamanio_argsStandardSchemeFactory implements SchemeFactory {
      public obtenerTamanio_argsStandardScheme getScheme() {
        return new obtenerTamanio_argsStandardScheme();
      }
    }

    private static class obtenerTamanio_argsStandardScheme extends StandardScheme<obtenerTamanio_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerTamanio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerTamanio_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerTamanio_argsTupleSchemeFactory implements SchemeFactory {
      public obtenerTamanio_argsTupleScheme getScheme() {
        return new obtenerTamanio_argsTupleScheme();
      }
    }

    private static class obtenerTamanio_argsTupleScheme extends TupleScheme<obtenerTamanio_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerTamanio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerTamanio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class obtenerTamanio_result implements org.apache.thrift.TBase<obtenerTamanio_result, obtenerTamanio_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerTamanio_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerTamanio_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerTamanio_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerTamanio_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerTamanio_result.class, metaDataMap);
    }

    public obtenerTamanio_result() {
    }

    public obtenerTamanio_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerTamanio_result(obtenerTamanio_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public obtenerTamanio_result deepCopy() {
      return new obtenerTamanio_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public obtenerTamanio_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerTamanio_result)
        return this.equals((obtenerTamanio_result)that);
      return false;
    }

    public boolean equals(obtenerTamanio_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtenerTamanio_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerTamanio_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerTamanio_resultStandardSchemeFactory implements SchemeFactory {
      public obtenerTamanio_resultStandardScheme getScheme() {
        return new obtenerTamanio_resultStandardScheme();
      }
    }

    private static class obtenerTamanio_resultStandardScheme extends StandardScheme<obtenerTamanio_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerTamanio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerTamanio_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerTamanio_resultTupleSchemeFactory implements SchemeFactory {
      public obtenerTamanio_resultTupleScheme getScheme() {
        return new obtenerTamanio_resultTupleScheme();
      }
    }

    private static class obtenerTamanio_resultTupleScheme extends TupleScheme<obtenerTamanio_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerTamanio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerTamanio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class moverJugador_args implements org.apache.thrift.TBase<moverJugador_args, moverJugador_args._Fields>, java.io.Serializable, Cloneable, Comparable<moverJugador_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moverJugador_args");

    private static final org.apache.thrift.protocol.TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("num2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NUM3_FIELD_DESC = new org.apache.thrift.protocol.TField("num3", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ERRORES_FIELD_DESC = new org.apache.thrift.protocol.TField("errores", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moverJugador_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moverJugador_argsTupleSchemeFactory());
    }

    public int num1; // required
    public int num2; // required
    public int num3; // required
    public int errores; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM1((short)1, "num1"),
      NUM2((short)2, "num2"),
      NUM3((short)3, "num3"),
      ERRORES((short)4, "errores");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM1
            return NUM1;
          case 2: // NUM2
            return NUM2;
          case 3: // NUM3
            return NUM3;
          case 4: // ERRORES
            return ERRORES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM1_ISSET_ID = 0;
    private static final int __NUM2_ISSET_ID = 1;
    private static final int __NUM3_ISSET_ID = 2;
    private static final int __ERRORES_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM2, new org.apache.thrift.meta_data.FieldMetaData("num2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM3, new org.apache.thrift.meta_data.FieldMetaData("num3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERRORES, new org.apache.thrift.meta_data.FieldMetaData("errores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moverJugador_args.class, metaDataMap);
    }

    public moverJugador_args() {
    }

    public moverJugador_args(
      int num1,
      int num2,
      int num3,
      int errores)
    {
      this();
      this.num1 = num1;
      setNum1IsSet(true);
      this.num2 = num2;
      setNum2IsSet(true);
      this.num3 = num3;
      setNum3IsSet(true);
      this.errores = errores;
      setErroresIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moverJugador_args(moverJugador_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num1 = other.num1;
      this.num2 = other.num2;
      this.num3 = other.num3;
      this.errores = other.errores;
    }

    public moverJugador_args deepCopy() {
      return new moverJugador_args(this);
    }

    @Override
    public void clear() {
      setNum1IsSet(false);
      this.num1 = 0;
      setNum2IsSet(false);
      this.num2 = 0;
      setNum3IsSet(false);
      this.num3 = 0;
      setErroresIsSet(false);
      this.errores = 0;
    }

    public int getNum1() {
      return this.num1;
    }

    public moverJugador_args setNum1(int num1) {
      this.num1 = num1;
      setNum1IsSet(true);
      return this;
    }

    public void unsetNum1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    /** Returns true if field num1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum1() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    public void setNum1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
    }

    public int getNum2() {
      return this.num2;
    }

    public moverJugador_args setNum2(int num2) {
      this.num2 = num2;
      setNum2IsSet(true);
      return this;
    }

    public void unsetNum2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    /** Returns true if field num2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum2() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    public void setNum2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value);
    }

    public int getNum3() {
      return this.num3;
    }

    public moverJugador_args setNum3(int num3) {
      this.num3 = num3;
      setNum3IsSet(true);
      return this;
    }

    public void unsetNum3() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM3_ISSET_ID);
    }

    /** Returns true if field num3 is set (has been assigned a value) and false otherwise */
    public boolean isSetNum3() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM3_ISSET_ID);
    }

    public void setNum3IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM3_ISSET_ID, value);
    }

    public int getErrores() {
      return this.errores;
    }

    public moverJugador_args setErrores(int errores) {
      this.errores = errores;
      setErroresIsSet(true);
      return this;
    }

    public void unsetErrores() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORES_ISSET_ID);
    }

    /** Returns true if field errores is set (has been assigned a value) and false otherwise */
    public boolean isSetErrores() {
      return EncodingUtils.testBit(__isset_bitfield, __ERRORES_ISSET_ID);
    }

    public void setErroresIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM1:
        if (value == null) {
          unsetNum1();
        } else {
          setNum1((Integer)value);
        }
        break;

      case NUM2:
        if (value == null) {
          unsetNum2();
        } else {
          setNum2((Integer)value);
        }
        break;

      case NUM3:
        if (value == null) {
          unsetNum3();
        } else {
          setNum3((Integer)value);
        }
        break;

      case ERRORES:
        if (value == null) {
          unsetErrores();
        } else {
          setErrores((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM1:
        return getNum1();

      case NUM2:
        return getNum2();

      case NUM3:
        return getNum3();

      case ERRORES:
        return getErrores();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM1:
        return isSetNum1();
      case NUM2:
        return isSetNum2();
      case NUM3:
        return isSetNum3();
      case ERRORES:
        return isSetErrores();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moverJugador_args)
        return this.equals((moverJugador_args)that);
      return false;
    }

    public boolean equals(moverJugador_args that) {
      if (that == null)
        return false;

      boolean this_present_num1 = true;
      boolean that_present_num1 = true;
      if (this_present_num1 || that_present_num1) {
        if (!(this_present_num1 && that_present_num1))
          return false;
        if (this.num1 != that.num1)
          return false;
      }

      boolean this_present_num2 = true;
      boolean that_present_num2 = true;
      if (this_present_num2 || that_present_num2) {
        if (!(this_present_num2 && that_present_num2))
          return false;
        if (this.num2 != that.num2)
          return false;
      }

      boolean this_present_num3 = true;
      boolean that_present_num3 = true;
      if (this_present_num3 || that_present_num3) {
        if (!(this_present_num3 && that_present_num3))
          return false;
        if (this.num3 != that.num3)
          return false;
      }

      boolean this_present_errores = true;
      boolean that_present_errores = true;
      if (this_present_errores || that_present_errores) {
        if (!(this_present_errores && that_present_errores))
          return false;
        if (this.errores != that.errores)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_num1 = true;
      list.add(present_num1);
      if (present_num1)
        list.add(num1);

      boolean present_num2 = true;
      list.add(present_num2);
      if (present_num2)
        list.add(num2);

      boolean present_num3 = true;
      list.add(present_num3);
      if (present_num3)
        list.add(num3);

      boolean present_errores = true;
      list.add(present_errores);
      if (present_errores)
        list.add(errores);

      return list.hashCode();
    }

    @Override
    public int compareTo(moverJugador_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum2()).compareTo(other.isSetNum2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num2, other.num2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum3()).compareTo(other.isSetNum3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num3, other.num3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErrores()).compareTo(other.isSetErrores());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrores()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errores, other.errores);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moverJugador_args(");
      boolean first = true;

      sb.append("num1:");
      sb.append(this.num1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num2:");
      sb.append(this.num2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num3:");
      sb.append(this.num3);
      first = false;
      if (!first) sb.append(", ");
      sb.append("errores:");
      sb.append(this.errores);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moverJugador_argsStandardSchemeFactory implements SchemeFactory {
      public moverJugador_argsStandardScheme getScheme() {
        return new moverJugador_argsStandardScheme();
      }
    }

    private static class moverJugador_argsStandardScheme extends StandardScheme<moverJugador_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moverJugador_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num1 = iprot.readI32();
                struct.setNum1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num2 = iprot.readI32();
                struct.setNum2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM3
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num3 = iprot.readI32();
                struct.setNum3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ERRORES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errores = iprot.readI32();
                struct.setErroresIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moverJugador_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM1_FIELD_DESC);
        oprot.writeI32(struct.num1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM2_FIELD_DESC);
        oprot.writeI32(struct.num2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM3_FIELD_DESC);
        oprot.writeI32(struct.num3);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ERRORES_FIELD_DESC);
        oprot.writeI32(struct.errores);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moverJugador_argsTupleSchemeFactory implements SchemeFactory {
      public moverJugador_argsTupleScheme getScheme() {
        return new moverJugador_argsTupleScheme();
      }
    }

    private static class moverJugador_argsTupleScheme extends TupleScheme<moverJugador_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moverJugador_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum1()) {
          optionals.set(0);
        }
        if (struct.isSetNum2()) {
          optionals.set(1);
        }
        if (struct.isSetNum3()) {
          optionals.set(2);
        }
        if (struct.isSetErrores()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNum1()) {
          oprot.writeI32(struct.num1);
        }
        if (struct.isSetNum2()) {
          oprot.writeI32(struct.num2);
        }
        if (struct.isSetNum3()) {
          oprot.writeI32(struct.num3);
        }
        if (struct.isSetErrores()) {
          oprot.writeI32(struct.errores);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moverJugador_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.num1 = iprot.readI32();
          struct.setNum1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.num2 = iprot.readI32();
          struct.setNum2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.num3 = iprot.readI32();
          struct.setNum3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.errores = iprot.readI32();
          struct.setErroresIsSet(true);
        }
      }
    }

  }

  public static class moverJugador_result implements org.apache.thrift.TBase<moverJugador_result, moverJugador_result._Fields>, java.io.Serializable, Cloneable, Comparable<moverJugador_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moverJugador_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moverJugador_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moverJugador_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moverJugador_result.class, metaDataMap);
    }

    public moverJugador_result() {
    }

    public moverJugador_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moverJugador_result(moverJugador_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public moverJugador_result deepCopy() {
      return new moverJugador_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public moverJugador_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moverJugador_result)
        return this.equals((moverJugador_result)that);
      return false;
    }

    public boolean equals(moverJugador_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(moverJugador_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moverJugador_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moverJugador_resultStandardSchemeFactory implements SchemeFactory {
      public moverJugador_resultStandardScheme getScheme() {
        return new moverJugador_resultStandardScheme();
      }
    }

    private static class moverJugador_resultStandardScheme extends StandardScheme<moverJugador_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moverJugador_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moverJugador_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moverJugador_resultTupleSchemeFactory implements SchemeFactory {
      public moverJugador_resultTupleScheme getScheme() {
        return new moverJugador_resultTupleScheme();
      }
    }

    private static class moverJugador_resultTupleScheme extends TupleScheme<moverJugador_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moverJugador_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moverJugador_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class obtenerNivel_args implements org.apache.thrift.TBase<obtenerNivel_args, obtenerNivel_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerNivel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerNivel_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerNivel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerNivel_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerNivel_args.class, metaDataMap);
    }

    public obtenerNivel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerNivel_args(obtenerNivel_args other) {
    }

    public obtenerNivel_args deepCopy() {
      return new obtenerNivel_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerNivel_args)
        return this.equals((obtenerNivel_args)that);
      return false;
    }

    public boolean equals(obtenerNivel_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(obtenerNivel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerNivel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerNivel_argsStandardSchemeFactory implements SchemeFactory {
      public obtenerNivel_argsStandardScheme getScheme() {
        return new obtenerNivel_argsStandardScheme();
      }
    }

    private static class obtenerNivel_argsStandardScheme extends StandardScheme<obtenerNivel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerNivel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerNivel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerNivel_argsTupleSchemeFactory implements SchemeFactory {
      public obtenerNivel_argsTupleScheme getScheme() {
        return new obtenerNivel_argsTupleScheme();
      }
    }

    private static class obtenerNivel_argsTupleScheme extends TupleScheme<obtenerNivel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerNivel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerNivel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class obtenerNivel_result implements org.apache.thrift.TBase<obtenerNivel_result, obtenerNivel_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerNivel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerNivel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerNivel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerNivel_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerNivel_result.class, metaDataMap);
    }

    public obtenerNivel_result() {
    }

    public obtenerNivel_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerNivel_result(obtenerNivel_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public obtenerNivel_result deepCopy() {
      return new obtenerNivel_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public obtenerNivel_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerNivel_result)
        return this.equals((obtenerNivel_result)that);
      return false;
    }

    public boolean equals(obtenerNivel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtenerNivel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerNivel_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerNivel_resultStandardSchemeFactory implements SchemeFactory {
      public obtenerNivel_resultStandardScheme getScheme() {
        return new obtenerNivel_resultStandardScheme();
      }
    }

    private static class obtenerNivel_resultStandardScheme extends StandardScheme<obtenerNivel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerNivel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerNivel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerNivel_resultTupleSchemeFactory implements SchemeFactory {
      public obtenerNivel_resultTupleScheme getScheme() {
        return new obtenerNivel_resultTupleScheme();
      }
    }

    private static class obtenerNivel_resultTupleScheme extends TupleScheme<obtenerNivel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerNivel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerNivel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class guardarUsuario_args implements org.apache.thrift.TBase<guardarUsuario_args, guardarUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<guardarUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("guardarUsuario_args");

    private static final org.apache.thrift.protocol.TField NOMBRE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombre", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new guardarUsuario_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new guardarUsuario_argsTupleSchemeFactory());
    }

    public String nombre; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOMBRE((short)1, "nombre");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOMBRE
            return NOMBRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOMBRE, new org.apache.thrift.meta_data.FieldMetaData("nombre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(guardarUsuario_args.class, metaDataMap);
    }

    public guardarUsuario_args() {
    }

    public guardarUsuario_args(
      String nombre)
    {
      this();
      this.nombre = nombre;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public guardarUsuario_args(guardarUsuario_args other) {
      if (other.isSetNombre()) {
        this.nombre = other.nombre;
      }
    }

    public guardarUsuario_args deepCopy() {
      return new guardarUsuario_args(this);
    }

    @Override
    public void clear() {
      this.nombre = null;
    }

    public String getNombre() {
      return this.nombre;
    }

    public guardarUsuario_args setNombre(String nombre) {
      this.nombre = nombre;
      return this;
    }

    public void unsetNombre() {
      this.nombre = null;
    }

    /** Returns true if field nombre is set (has been assigned a value) and false otherwise */
    public boolean isSetNombre() {
      return this.nombre != null;
    }

    public void setNombreIsSet(boolean value) {
      if (!value) {
        this.nombre = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOMBRE:
        if (value == null) {
          unsetNombre();
        } else {
          setNombre((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOMBRE:
        return getNombre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOMBRE:
        return isSetNombre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof guardarUsuario_args)
        return this.equals((guardarUsuario_args)that);
      return false;
    }

    public boolean equals(guardarUsuario_args that) {
      if (that == null)
        return false;

      boolean this_present_nombre = true && this.isSetNombre();
      boolean that_present_nombre = true && that.isSetNombre();
      if (this_present_nombre || that_present_nombre) {
        if (!(this_present_nombre && that_present_nombre))
          return false;
        if (!this.nombre.equals(that.nombre))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nombre = true && (isSetNombre());
      list.add(present_nombre);
      if (present_nombre)
        list.add(nombre);

      return list.hashCode();
    }

    @Override
    public int compareTo(guardarUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNombre()).compareTo(other.isSetNombre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNombre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombre, other.nombre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("guardarUsuario_args(");
      boolean first = true;

      sb.append("nombre:");
      if (this.nombre == null) {
        sb.append("null");
      } else {
        sb.append(this.nombre);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class guardarUsuario_argsStandardSchemeFactory implements SchemeFactory {
      public guardarUsuario_argsStandardScheme getScheme() {
        return new guardarUsuario_argsStandardScheme();
      }
    }

    private static class guardarUsuario_argsStandardScheme extends StandardScheme<guardarUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, guardarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOMBRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nombre = iprot.readString();
                struct.setNombreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, guardarUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nombre != null) {
          oprot.writeFieldBegin(NOMBRE_FIELD_DESC);
          oprot.writeString(struct.nombre);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class guardarUsuario_argsTupleSchemeFactory implements SchemeFactory {
      public guardarUsuario_argsTupleScheme getScheme() {
        return new guardarUsuario_argsTupleScheme();
      }
    }

    private static class guardarUsuario_argsTupleScheme extends TupleScheme<guardarUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, guardarUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNombre()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNombre()) {
          oprot.writeString(struct.nombre);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, guardarUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nombre = iprot.readString();
          struct.setNombreIsSet(true);
        }
      }
    }

  }

  public static class guardarUsuario_result implements org.apache.thrift.TBase<guardarUsuario_result, guardarUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<guardarUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("guardarUsuario_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new guardarUsuario_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new guardarUsuario_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(guardarUsuario_result.class, metaDataMap);
    }

    public guardarUsuario_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public guardarUsuario_result(guardarUsuario_result other) {
    }

    public guardarUsuario_result deepCopy() {
      return new guardarUsuario_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof guardarUsuario_result)
        return this.equals((guardarUsuario_result)that);
      return false;
    }

    public boolean equals(guardarUsuario_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(guardarUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("guardarUsuario_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class guardarUsuario_resultStandardSchemeFactory implements SchemeFactory {
      public guardarUsuario_resultStandardScheme getScheme() {
        return new guardarUsuario_resultStandardScheme();
      }
    }

    private static class guardarUsuario_resultStandardScheme extends StandardScheme<guardarUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, guardarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, guardarUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class guardarUsuario_resultTupleSchemeFactory implements SchemeFactory {
      public guardarUsuario_resultTupleScheme getScheme() {
        return new guardarUsuario_resultTupleScheme();
      }
    }

    private static class guardarUsuario_resultTupleScheme extends TupleScheme<guardarUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, guardarUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, guardarUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class regresarUsuario_args implements org.apache.thrift.TBase<regresarUsuario_args, regresarUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<regresarUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regresarUsuario_args");

    private static final org.apache.thrift.protocol.TField NUMERO_FIELD_DESC = new org.apache.thrift.protocol.TField("numero", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regresarUsuario_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regresarUsuario_argsTupleSchemeFactory());
    }

    public int numero; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMERO((short)1, "numero");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMERO
            return NUMERO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMERO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMERO, new org.apache.thrift.meta_data.FieldMetaData("numero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regresarUsuario_args.class, metaDataMap);
    }

    public regresarUsuario_args() {
    }

    public regresarUsuario_args(
      int numero)
    {
      this();
      this.numero = numero;
      setNumeroIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regresarUsuario_args(regresarUsuario_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numero = other.numero;
    }

    public regresarUsuario_args deepCopy() {
      return new regresarUsuario_args(this);
    }

    @Override
    public void clear() {
      setNumeroIsSet(false);
      this.numero = 0;
    }

    public int getNumero() {
      return this.numero;
    }

    public regresarUsuario_args setNumero(int numero) {
      this.numero = numero;
      setNumeroIsSet(true);
      return this;
    }

    public void unsetNumero() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMERO_ISSET_ID);
    }

    /** Returns true if field numero is set (has been assigned a value) and false otherwise */
    public boolean isSetNumero() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMERO_ISSET_ID);
    }

    public void setNumeroIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMERO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUMERO:
        if (value == null) {
          unsetNumero();
        } else {
          setNumero((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMERO:
        return getNumero();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUMERO:
        return isSetNumero();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regresarUsuario_args)
        return this.equals((regresarUsuario_args)that);
      return false;
    }

    public boolean equals(regresarUsuario_args that) {
      if (that == null)
        return false;

      boolean this_present_numero = true;
      boolean that_present_numero = true;
      if (this_present_numero || that_present_numero) {
        if (!(this_present_numero && that_present_numero))
          return false;
        if (this.numero != that.numero)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_numero = true;
      list.add(present_numero);
      if (present_numero)
        list.add(numero);

      return list.hashCode();
    }

    @Override
    public int compareTo(regresarUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNumero()).compareTo(other.isSetNumero());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumero()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numero, other.numero);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regresarUsuario_args(");
      boolean first = true;

      sb.append("numero:");
      sb.append(this.numero);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regresarUsuario_argsStandardSchemeFactory implements SchemeFactory {
      public regresarUsuario_argsStandardScheme getScheme() {
        return new regresarUsuario_argsStandardScheme();
      }
    }

    private static class regresarUsuario_argsStandardScheme extends StandardScheme<regresarUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regresarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMERO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numero = iprot.readI32();
                struct.setNumeroIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regresarUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMERO_FIELD_DESC);
        oprot.writeI32(struct.numero);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regresarUsuario_argsTupleSchemeFactory implements SchemeFactory {
      public regresarUsuario_argsTupleScheme getScheme() {
        return new regresarUsuario_argsTupleScheme();
      }
    }

    private static class regresarUsuario_argsTupleScheme extends TupleScheme<regresarUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regresarUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNumero()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNumero()) {
          oprot.writeI32(struct.numero);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regresarUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.numero = iprot.readI32();
          struct.setNumeroIsSet(true);
        }
      }
    }

  }

  public static class regresarUsuario_result implements org.apache.thrift.TBase<regresarUsuario_result, regresarUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<regresarUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regresarUsuario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regresarUsuario_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regresarUsuario_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regresarUsuario_result.class, metaDataMap);
    }

    public regresarUsuario_result() {
    }

    public regresarUsuario_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regresarUsuario_result(regresarUsuario_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public regresarUsuario_result deepCopy() {
      return new regresarUsuario_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public regresarUsuario_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regresarUsuario_result)
        return this.equals((regresarUsuario_result)that);
      return false;
    }

    public boolean equals(regresarUsuario_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(regresarUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regresarUsuario_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regresarUsuario_resultStandardSchemeFactory implements SchemeFactory {
      public regresarUsuario_resultStandardScheme getScheme() {
        return new regresarUsuario_resultStandardScheme();
      }
    }

    private static class regresarUsuario_resultStandardScheme extends StandardScheme<regresarUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regresarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regresarUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regresarUsuario_resultTupleSchemeFactory implements SchemeFactory {
      public regresarUsuario_resultTupleScheme getScheme() {
        return new regresarUsuario_resultTupleScheme();
      }
    }

    private static class regresarUsuario_resultTupleScheme extends TupleScheme<regresarUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regresarUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regresarUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setUsuario_args implements org.apache.thrift.TBase<setUsuario_args, setUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<setUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUsuario_args");

    private static final org.apache.thrift.protocol.TField NUMERO_FIELD_DESC = new org.apache.thrift.protocol.TField("numero", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUsuario_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUsuario_argsTupleSchemeFactory());
    }

    public int numero; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMERO((short)1, "numero");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMERO
            return NUMERO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMERO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMERO, new org.apache.thrift.meta_data.FieldMetaData("numero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUsuario_args.class, metaDataMap);
    }

    public setUsuario_args() {
    }

    public setUsuario_args(
      int numero)
    {
      this();
      this.numero = numero;
      setNumeroIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUsuario_args(setUsuario_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numero = other.numero;
    }

    public setUsuario_args deepCopy() {
      return new setUsuario_args(this);
    }

    @Override
    public void clear() {
      setNumeroIsSet(false);
      this.numero = 0;
    }

    public int getNumero() {
      return this.numero;
    }

    public setUsuario_args setNumero(int numero) {
      this.numero = numero;
      setNumeroIsSet(true);
      return this;
    }

    public void unsetNumero() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMERO_ISSET_ID);
    }

    /** Returns true if field numero is set (has been assigned a value) and false otherwise */
    public boolean isSetNumero() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMERO_ISSET_ID);
    }

    public void setNumeroIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMERO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUMERO:
        if (value == null) {
          unsetNumero();
        } else {
          setNumero((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMERO:
        return getNumero();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUMERO:
        return isSetNumero();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUsuario_args)
        return this.equals((setUsuario_args)that);
      return false;
    }

    public boolean equals(setUsuario_args that) {
      if (that == null)
        return false;

      boolean this_present_numero = true;
      boolean that_present_numero = true;
      if (this_present_numero || that_present_numero) {
        if (!(this_present_numero && that_present_numero))
          return false;
        if (this.numero != that.numero)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_numero = true;
      list.add(present_numero);
      if (present_numero)
        list.add(numero);

      return list.hashCode();
    }

    @Override
    public int compareTo(setUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNumero()).compareTo(other.isSetNumero());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumero()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numero, other.numero);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUsuario_args(");
      boolean first = true;

      sb.append("numero:");
      sb.append(this.numero);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUsuario_argsStandardSchemeFactory implements SchemeFactory {
      public setUsuario_argsStandardScheme getScheme() {
        return new setUsuario_argsStandardScheme();
      }
    }

    private static class setUsuario_argsStandardScheme extends StandardScheme<setUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMERO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numero = iprot.readI32();
                struct.setNumeroIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMERO_FIELD_DESC);
        oprot.writeI32(struct.numero);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUsuario_argsTupleSchemeFactory implements SchemeFactory {
      public setUsuario_argsTupleScheme getScheme() {
        return new setUsuario_argsTupleScheme();
      }
    }

    private static class setUsuario_argsTupleScheme extends TupleScheme<setUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNumero()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNumero()) {
          oprot.writeI32(struct.numero);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.numero = iprot.readI32();
          struct.setNumeroIsSet(true);
        }
      }
    }

  }

  public static class setUsuario_result implements org.apache.thrift.TBase<setUsuario_result, setUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<setUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUsuario_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUsuario_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUsuario_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUsuario_result.class, metaDataMap);
    }

    public setUsuario_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUsuario_result(setUsuario_result other) {
    }

    public setUsuario_result deepCopy() {
      return new setUsuario_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUsuario_result)
        return this.equals((setUsuario_result)that);
      return false;
    }

    public boolean equals(setUsuario_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(setUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUsuario_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUsuario_resultStandardSchemeFactory implements SchemeFactory {
      public setUsuario_resultStandardScheme getScheme() {
        return new setUsuario_resultStandardScheme();
      }
    }

    private static class setUsuario_resultStandardScheme extends StandardScheme<setUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUsuario_resultTupleSchemeFactory implements SchemeFactory {
      public setUsuario_resultTupleScheme getScheme() {
        return new setUsuario_resultTupleScheme();
      }
    }

    private static class setUsuario_resultTupleScheme extends TupleScheme<setUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class obtenerUsuario_args implements org.apache.thrift.TBase<obtenerUsuario_args, obtenerUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerUsuario_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerUsuario_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerUsuario_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerUsuario_args.class, metaDataMap);
    }

    public obtenerUsuario_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerUsuario_args(obtenerUsuario_args other) {
    }

    public obtenerUsuario_args deepCopy() {
      return new obtenerUsuario_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerUsuario_args)
        return this.equals((obtenerUsuario_args)that);
      return false;
    }

    public boolean equals(obtenerUsuario_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(obtenerUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerUsuario_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerUsuario_argsStandardSchemeFactory implements SchemeFactory {
      public obtenerUsuario_argsStandardScheme getScheme() {
        return new obtenerUsuario_argsStandardScheme();
      }
    }

    private static class obtenerUsuario_argsStandardScheme extends StandardScheme<obtenerUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerUsuario_argsTupleSchemeFactory implements SchemeFactory {
      public obtenerUsuario_argsTupleScheme getScheme() {
        return new obtenerUsuario_argsTupleScheme();
      }
    }

    private static class obtenerUsuario_argsTupleScheme extends TupleScheme<obtenerUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerUsuario_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class obtenerUsuario_result implements org.apache.thrift.TBase<obtenerUsuario_result, obtenerUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtenerUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtenerUsuario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtenerUsuario_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtenerUsuario_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtenerUsuario_result.class, metaDataMap);
    }

    public obtenerUsuario_result() {
    }

    public obtenerUsuario_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtenerUsuario_result(obtenerUsuario_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public obtenerUsuario_result deepCopy() {
      return new obtenerUsuario_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public obtenerUsuario_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtenerUsuario_result)
        return this.equals((obtenerUsuario_result)that);
      return false;
    }

    public boolean equals(obtenerUsuario_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtenerUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtenerUsuario_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtenerUsuario_resultStandardSchemeFactory implements SchemeFactory {
      public obtenerUsuario_resultStandardScheme getScheme() {
        return new obtenerUsuario_resultStandardScheme();
      }
    }

    private static class obtenerUsuario_resultStandardScheme extends StandardScheme<obtenerUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtenerUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtenerUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtenerUsuario_resultTupleSchemeFactory implements SchemeFactory {
      public obtenerUsuario_resultTupleScheme getScheme() {
        return new obtenerUsuario_resultTupleScheme();
      }
    }

    private static class obtenerUsuario_resultTupleScheme extends TupleScheme<obtenerUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtenerUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtenerUsuario_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class desbloquearNivel_args implements org.apache.thrift.TBase<desbloquearNivel_args, desbloquearNivel_args._Fields>, java.io.Serializable, Cloneable, Comparable<desbloquearNivel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("desbloquearNivel_args");

    private static final org.apache.thrift.protocol.TField NUMERO_FIELD_DESC = new org.apache.thrift.protocol.TField("numero", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new desbloquearNivel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new desbloquearNivel_argsTupleSchemeFactory());
    }

    public int numero; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMERO((short)1, "numero");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMERO
            return NUMERO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMERO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMERO, new org.apache.thrift.meta_data.FieldMetaData("numero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(desbloquearNivel_args.class, metaDataMap);
    }

    public desbloquearNivel_args() {
    }

    public desbloquearNivel_args(
      int numero)
    {
      this();
      this.numero = numero;
      setNumeroIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public desbloquearNivel_args(desbloquearNivel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numero = other.numero;
    }

    public desbloquearNivel_args deepCopy() {
      return new desbloquearNivel_args(this);
    }

    @Override
    public void clear() {
      setNumeroIsSet(false);
      this.numero = 0;
    }

    public int getNumero() {
      return this.numero;
    }

    public desbloquearNivel_args setNumero(int numero) {
      this.numero = numero;
      setNumeroIsSet(true);
      return this;
    }

    public void unsetNumero() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMERO_ISSET_ID);
    }

    /** Returns true if field numero is set (has been assigned a value) and false otherwise */
    public boolean isSetNumero() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMERO_ISSET_ID);
    }

    public void setNumeroIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMERO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUMERO:
        if (value == null) {
          unsetNumero();
        } else {
          setNumero((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMERO:
        return getNumero();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUMERO:
        return isSetNumero();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof desbloquearNivel_args)
        return this.equals((desbloquearNivel_args)that);
      return false;
    }

    public boolean equals(desbloquearNivel_args that) {
      if (that == null)
        return false;

      boolean this_present_numero = true;
      boolean that_present_numero = true;
      if (this_present_numero || that_present_numero) {
        if (!(this_present_numero && that_present_numero))
          return false;
        if (this.numero != that.numero)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_numero = true;
      list.add(present_numero);
      if (present_numero)
        list.add(numero);

      return list.hashCode();
    }

    @Override
    public int compareTo(desbloquearNivel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNumero()).compareTo(other.isSetNumero());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumero()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numero, other.numero);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("desbloquearNivel_args(");
      boolean first = true;

      sb.append("numero:");
      sb.append(this.numero);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class desbloquearNivel_argsStandardSchemeFactory implements SchemeFactory {
      public desbloquearNivel_argsStandardScheme getScheme() {
        return new desbloquearNivel_argsStandardScheme();
      }
    }

    private static class desbloquearNivel_argsStandardScheme extends StandardScheme<desbloquearNivel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, desbloquearNivel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMERO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numero = iprot.readI32();
                struct.setNumeroIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, desbloquearNivel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMERO_FIELD_DESC);
        oprot.writeI32(struct.numero);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class desbloquearNivel_argsTupleSchemeFactory implements SchemeFactory {
      public desbloquearNivel_argsTupleScheme getScheme() {
        return new desbloquearNivel_argsTupleScheme();
      }
    }

    private static class desbloquearNivel_argsTupleScheme extends TupleScheme<desbloquearNivel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, desbloquearNivel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNumero()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNumero()) {
          oprot.writeI32(struct.numero);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, desbloquearNivel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.numero = iprot.readI32();
          struct.setNumeroIsSet(true);
        }
      }
    }

  }

  public static class desbloquearNivel_result implements org.apache.thrift.TBase<desbloquearNivel_result, desbloquearNivel_result._Fields>, java.io.Serializable, Cloneable, Comparable<desbloquearNivel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("desbloquearNivel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new desbloquearNivel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new desbloquearNivel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(desbloquearNivel_result.class, metaDataMap);
    }

    public desbloquearNivel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public desbloquearNivel_result(desbloquearNivel_result other) {
    }

    public desbloquearNivel_result deepCopy() {
      return new desbloquearNivel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof desbloquearNivel_result)
        return this.equals((desbloquearNivel_result)that);
      return false;
    }

    public boolean equals(desbloquearNivel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(desbloquearNivel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("desbloquearNivel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class desbloquearNivel_resultStandardSchemeFactory implements SchemeFactory {
      public desbloquearNivel_resultStandardScheme getScheme() {
        return new desbloquearNivel_resultStandardScheme();
      }
    }

    private static class desbloquearNivel_resultStandardScheme extends StandardScheme<desbloquearNivel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, desbloquearNivel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, desbloquearNivel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class desbloquearNivel_resultTupleSchemeFactory implements SchemeFactory {
      public desbloquearNivel_resultTupleScheme getScheme() {
        return new desbloquearNivel_resultTupleScheme();
      }
    }

    private static class desbloquearNivel_resultTupleScheme extends TupleScheme<desbloquearNivel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, desbloquearNivel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, desbloquearNivel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class graficarEnemigos_args implements org.apache.thrift.TBase<graficarEnemigos_args, graficarEnemigos_args._Fields>, java.io.Serializable, Cloneable, Comparable<graficarEnemigos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("graficarEnemigos_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new graficarEnemigos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new graficarEnemigos_argsTupleSchemeFactory());
    }

    public int usuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USUARIO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(graficarEnemigos_args.class, metaDataMap);
    }

    public graficarEnemigos_args() {
    }

    public graficarEnemigos_args(
      int usuario)
    {
      this();
      this.usuario = usuario;
      setUsuarioIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public graficarEnemigos_args(graficarEnemigos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.usuario = other.usuario;
    }

    public graficarEnemigos_args deepCopy() {
      return new graficarEnemigos_args(this);
    }

    @Override
    public void clear() {
      setUsuarioIsSet(false);
      this.usuario = 0;
    }

    public int getUsuario() {
      return this.usuario;
    }

    public graficarEnemigos_args setUsuario(int usuario) {
      this.usuario = usuario;
      setUsuarioIsSet(true);
      return this;
    }

    public void unsetUsuario() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USUARIO_ISSET_ID);
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return EncodingUtils.testBit(__isset_bitfield, __USUARIO_ISSET_ID);
    }

    public void setUsuarioIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USUARIO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof graficarEnemigos_args)
        return this.equals((graficarEnemigos_args)that);
      return false;
    }

    public boolean equals(graficarEnemigos_args that) {
      if (that == null)
        return false;

      boolean this_present_usuario = true;
      boolean that_present_usuario = true;
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (this.usuario != that.usuario)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_usuario = true;
      list.add(present_usuario);
      if (present_usuario)
        list.add(usuario);

      return list.hashCode();
    }

    @Override
    public int compareTo(graficarEnemigos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("graficarEnemigos_args(");
      boolean first = true;

      sb.append("usuario:");
      sb.append(this.usuario);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class graficarEnemigos_argsStandardSchemeFactory implements SchemeFactory {
      public graficarEnemigos_argsStandardScheme getScheme() {
        return new graficarEnemigos_argsStandardScheme();
      }
    }

    private static class graficarEnemigos_argsStandardScheme extends StandardScheme<graficarEnemigos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, graficarEnemigos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.usuario = iprot.readI32();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, graficarEnemigos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USUARIO_FIELD_DESC);
        oprot.writeI32(struct.usuario);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class graficarEnemigos_argsTupleSchemeFactory implements SchemeFactory {
      public graficarEnemigos_argsTupleScheme getScheme() {
        return new graficarEnemigos_argsTupleScheme();
      }
    }

    private static class graficarEnemigos_argsTupleScheme extends TupleScheme<graficarEnemigos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, graficarEnemigos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsuario()) {
          oprot.writeI32(struct.usuario);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, graficarEnemigos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.usuario = iprot.readI32();
          struct.setUsuarioIsSet(true);
        }
      }
    }

  }

  public static class graficarEnemigos_result implements org.apache.thrift.TBase<graficarEnemigos_result, graficarEnemigos_result._Fields>, java.io.Serializable, Cloneable, Comparable<graficarEnemigos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("graficarEnemigos_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new graficarEnemigos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new graficarEnemigos_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(graficarEnemigos_result.class, metaDataMap);
    }

    public graficarEnemigos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public graficarEnemigos_result(graficarEnemigos_result other) {
    }

    public graficarEnemigos_result deepCopy() {
      return new graficarEnemigos_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof graficarEnemigos_result)
        return this.equals((graficarEnemigos_result)that);
      return false;
    }

    public boolean equals(graficarEnemigos_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(graficarEnemigos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("graficarEnemigos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class graficarEnemigos_resultStandardSchemeFactory implements SchemeFactory {
      public graficarEnemigos_resultStandardScheme getScheme() {
        return new graficarEnemigos_resultStandardScheme();
      }
    }

    private static class graficarEnemigos_resultStandardScheme extends StandardScheme<graficarEnemigos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, graficarEnemigos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, graficarEnemigos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class graficarEnemigos_resultTupleSchemeFactory implements SchemeFactory {
      public graficarEnemigos_resultTupleScheme getScheme() {
        return new graficarEnemigos_resultTupleScheme();
      }
    }

    private static class graficarEnemigos_resultTupleScheme extends TupleScheme<graficarEnemigos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, graficarEnemigos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, graficarEnemigos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class guardarPuntaje_args implements org.apache.thrift.TBase<guardarPuntaje_args, guardarPuntaje_args._Fields>, java.io.Serializable, Cloneable, Comparable<guardarPuntaje_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("guardarPuntaje_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NIVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("nivel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PUNTAJE_FIELD_DESC = new org.apache.thrift.protocol.TField("puntaje", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new guardarPuntaje_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new guardarPuntaje_argsTupleSchemeFactory());
    }

    public int usuario; // required
    public int nivel; // required
    public int puntaje; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario"),
      NIVEL((short)2, "nivel"),
      PUNTAJE((short)3, "puntaje");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          case 2: // NIVEL
            return NIVEL;
          case 3: // PUNTAJE
            return PUNTAJE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USUARIO_ISSET_ID = 0;
    private static final int __NIVEL_ISSET_ID = 1;
    private static final int __PUNTAJE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NIVEL, new org.apache.thrift.meta_data.FieldMetaData("nivel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PUNTAJE, new org.apache.thrift.meta_data.FieldMetaData("puntaje", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(guardarPuntaje_args.class, metaDataMap);
    }

    public guardarPuntaje_args() {
    }

    public guardarPuntaje_args(
      int usuario,
      int nivel,
      int puntaje)
    {
      this();
      this.usuario = usuario;
      setUsuarioIsSet(true);
      this.nivel = nivel;
      setNivelIsSet(true);
      this.puntaje = puntaje;
      setPuntajeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public guardarPuntaje_args(guardarPuntaje_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.usuario = other.usuario;
      this.nivel = other.nivel;
      this.puntaje = other.puntaje;
    }

    public guardarPuntaje_args deepCopy() {
      return new guardarPuntaje_args(this);
    }

    @Override
    public void clear() {
      setUsuarioIsSet(false);
      this.usuario = 0;
      setNivelIsSet(false);
      this.nivel = 0;
      setPuntajeIsSet(false);
      this.puntaje = 0;
    }

    public int getUsuario() {
      return this.usuario;
    }

    public guardarPuntaje_args setUsuario(int usuario) {
      this.usuario = usuario;
      setUsuarioIsSet(true);
      return this;
    }

    public void unsetUsuario() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USUARIO_ISSET_ID);
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return EncodingUtils.testBit(__isset_bitfield, __USUARIO_ISSET_ID);
    }

    public void setUsuarioIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USUARIO_ISSET_ID, value);
    }

    public int getNivel() {
      return this.nivel;
    }

    public guardarPuntaje_args setNivel(int nivel) {
      this.nivel = nivel;
      setNivelIsSet(true);
      return this;
    }

    public void unsetNivel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NIVEL_ISSET_ID);
    }

    /** Returns true if field nivel is set (has been assigned a value) and false otherwise */
    public boolean isSetNivel() {
      return EncodingUtils.testBit(__isset_bitfield, __NIVEL_ISSET_ID);
    }

    public void setNivelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NIVEL_ISSET_ID, value);
    }

    public int getPuntaje() {
      return this.puntaje;
    }

    public guardarPuntaje_args setPuntaje(int puntaje) {
      this.puntaje = puntaje;
      setPuntajeIsSet(true);
      return this;
    }

    public void unsetPuntaje() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUNTAJE_ISSET_ID);
    }

    /** Returns true if field puntaje is set (has been assigned a value) and false otherwise */
    public boolean isSetPuntaje() {
      return EncodingUtils.testBit(__isset_bitfield, __PUNTAJE_ISSET_ID);
    }

    public void setPuntajeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUNTAJE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((Integer)value);
        }
        break;

      case NIVEL:
        if (value == null) {
          unsetNivel();
        } else {
          setNivel((Integer)value);
        }
        break;

      case PUNTAJE:
        if (value == null) {
          unsetPuntaje();
        } else {
          setPuntaje((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      case NIVEL:
        return getNivel();

      case PUNTAJE:
        return getPuntaje();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      case NIVEL:
        return isSetNivel();
      case PUNTAJE:
        return isSetPuntaje();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof guardarPuntaje_args)
        return this.equals((guardarPuntaje_args)that);
      return false;
    }

    public boolean equals(guardarPuntaje_args that) {
      if (that == null)
        return false;

      boolean this_present_usuario = true;
      boolean that_present_usuario = true;
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (this.usuario != that.usuario)
          return false;
      }

      boolean this_present_nivel = true;
      boolean that_present_nivel = true;
      if (this_present_nivel || that_present_nivel) {
        if (!(this_present_nivel && that_present_nivel))
          return false;
        if (this.nivel != that.nivel)
          return false;
      }

      boolean this_present_puntaje = true;
      boolean that_present_puntaje = true;
      if (this_present_puntaje || that_present_puntaje) {
        if (!(this_present_puntaje && that_present_puntaje))
          return false;
        if (this.puntaje != that.puntaje)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_usuario = true;
      list.add(present_usuario);
      if (present_usuario)
        list.add(usuario);

      boolean present_nivel = true;
      list.add(present_nivel);
      if (present_nivel)
        list.add(nivel);

      boolean present_puntaje = true;
      list.add(present_puntaje);
      if (present_puntaje)
        list.add(puntaje);

      return list.hashCode();
    }

    @Override
    public int compareTo(guardarPuntaje_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNivel()).compareTo(other.isSetNivel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNivel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nivel, other.nivel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPuntaje()).compareTo(other.isSetPuntaje());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPuntaje()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.puntaje, other.puntaje);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("guardarPuntaje_args(");
      boolean first = true;

      sb.append("usuario:");
      sb.append(this.usuario);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nivel:");
      sb.append(this.nivel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("puntaje:");
      sb.append(this.puntaje);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class guardarPuntaje_argsStandardSchemeFactory implements SchemeFactory {
      public guardarPuntaje_argsStandardScheme getScheme() {
        return new guardarPuntaje_argsStandardScheme();
      }
    }

    private static class guardarPuntaje_argsStandardScheme extends StandardScheme<guardarPuntaje_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, guardarPuntaje_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.usuario = iprot.readI32();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NIVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nivel = iprot.readI32();
                struct.setNivelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PUNTAJE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.puntaje = iprot.readI32();
                struct.setPuntajeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, guardarPuntaje_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USUARIO_FIELD_DESC);
        oprot.writeI32(struct.usuario);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NIVEL_FIELD_DESC);
        oprot.writeI32(struct.nivel);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PUNTAJE_FIELD_DESC);
        oprot.writeI32(struct.puntaje);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class guardarPuntaje_argsTupleSchemeFactory implements SchemeFactory {
      public guardarPuntaje_argsTupleScheme getScheme() {
        return new guardarPuntaje_argsTupleScheme();
      }
    }

    private static class guardarPuntaje_argsTupleScheme extends TupleScheme<guardarPuntaje_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, guardarPuntaje_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        if (struct.isSetNivel()) {
          optionals.set(1);
        }
        if (struct.isSetPuntaje()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUsuario()) {
          oprot.writeI32(struct.usuario);
        }
        if (struct.isSetNivel()) {
          oprot.writeI32(struct.nivel);
        }
        if (struct.isSetPuntaje()) {
          oprot.writeI32(struct.puntaje);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, guardarPuntaje_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.usuario = iprot.readI32();
          struct.setUsuarioIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nivel = iprot.readI32();
          struct.setNivelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.puntaje = iprot.readI32();
          struct.setPuntajeIsSet(true);
        }
      }
    }

  }

  public static class guardarPuntaje_result implements org.apache.thrift.TBase<guardarPuntaje_result, guardarPuntaje_result._Fields>, java.io.Serializable, Cloneable, Comparable<guardarPuntaje_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("guardarPuntaje_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new guardarPuntaje_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new guardarPuntaje_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(guardarPuntaje_result.class, metaDataMap);
    }

    public guardarPuntaje_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public guardarPuntaje_result(guardarPuntaje_result other) {
    }

    public guardarPuntaje_result deepCopy() {
      return new guardarPuntaje_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof guardarPuntaje_result)
        return this.equals((guardarPuntaje_result)that);
      return false;
    }

    public boolean equals(guardarPuntaje_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(guardarPuntaje_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("guardarPuntaje_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class guardarPuntaje_resultStandardSchemeFactory implements SchemeFactory {
      public guardarPuntaje_resultStandardScheme getScheme() {
        return new guardarPuntaje_resultStandardScheme();
      }
    }

    private static class guardarPuntaje_resultStandardScheme extends StandardScheme<guardarPuntaje_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, guardarPuntaje_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, guardarPuntaje_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class guardarPuntaje_resultTupleSchemeFactory implements SchemeFactory {
      public guardarPuntaje_resultTupleScheme getScheme() {
        return new guardarPuntaje_resultTupleScheme();
      }
    }

    private static class guardarPuntaje_resultTupleScheme extends TupleScheme<guardarPuntaje_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, guardarPuntaje_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, guardarPuntaje_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
