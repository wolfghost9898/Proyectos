/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Proyecto1_H
#define Proyecto1_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "servidor_types.h"

namespace proyecto1 {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class Proyecto1If {
 public:
  virtual ~Proyecto1If() {}
  virtual bool accesoNivel(const int32_t num1) = 0;
  virtual void generadorEnemigos() = 0;
  virtual void pararGeneradorEnemigos() = 0;
  virtual int32_t obtenerTamanio() = 0;
  virtual int32_t moverJugador(const int32_t num1, const int32_t num2, const int32_t num3, const int32_t errores) = 0;
  virtual int32_t obtenerNivel() = 0;
  virtual void guardarUsuario(const std::string& nombre) = 0;
  virtual void regresarUsuario(std::string& _return, const int32_t numero) = 0;
  virtual void setUsuario(const int32_t numero) = 0;
  virtual int32_t obtenerUsuario() = 0;
  virtual void desbloquearNivel(const int32_t numero) = 0;
  virtual void graficarEnemigos(const int32_t usuario) = 0;
  virtual void guardarPuntaje(const int32_t usuario, const int32_t nivel, const int32_t puntaje) = 0;
};

class Proyecto1IfFactory {
 public:
  typedef Proyecto1If Handler;

  virtual ~Proyecto1IfFactory() {}

  virtual Proyecto1If* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(Proyecto1If* /* handler */) = 0;
};

class Proyecto1IfSingletonFactory : virtual public Proyecto1IfFactory {
 public:
  Proyecto1IfSingletonFactory(const boost::shared_ptr<Proyecto1If>& iface) : iface_(iface) {}
  virtual ~Proyecto1IfSingletonFactory() {}

  virtual Proyecto1If* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(Proyecto1If* /* handler */) {}

 protected:
  boost::shared_ptr<Proyecto1If> iface_;
};

class Proyecto1Null : virtual public Proyecto1If {
 public:
  virtual ~Proyecto1Null() {}
  bool accesoNivel(const int32_t /* num1 */) {
    bool _return = false;
    return _return;
  }
  void generadorEnemigos() {
    return;
  }
  void pararGeneradorEnemigos() {
    return;
  }
  int32_t obtenerTamanio() {
    int32_t _return = 0;
    return _return;
  }
  int32_t moverJugador(const int32_t /* num1 */, const int32_t /* num2 */, const int32_t /* num3 */, const int32_t /* errores */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t obtenerNivel() {
    int32_t _return = 0;
    return _return;
  }
  void guardarUsuario(const std::string& /* nombre */) {
    return;
  }
  void regresarUsuario(std::string& /* _return */, const int32_t /* numero */) {
    return;
  }
  void setUsuario(const int32_t /* numero */) {
    return;
  }
  int32_t obtenerUsuario() {
    int32_t _return = 0;
    return _return;
  }
  void desbloquearNivel(const int32_t /* numero */) {
    return;
  }
  void graficarEnemigos(const int32_t /* usuario */) {
    return;
  }
  void guardarPuntaje(const int32_t /* usuario */, const int32_t /* nivel */, const int32_t /* puntaje */) {
    return;
  }
};

typedef struct _Proyecto1_accesoNivel_args__isset {
  _Proyecto1_accesoNivel_args__isset() : num1(false) {}
  bool num1 :1;
} _Proyecto1_accesoNivel_args__isset;

class Proyecto1_accesoNivel_args {
 public:

  Proyecto1_accesoNivel_args(const Proyecto1_accesoNivel_args&);
  Proyecto1_accesoNivel_args& operator=(const Proyecto1_accesoNivel_args&);
  Proyecto1_accesoNivel_args() : num1(0) {
  }

  virtual ~Proyecto1_accesoNivel_args() throw();
  int32_t num1;

  _Proyecto1_accesoNivel_args__isset __isset;

  void __set_num1(const int32_t val);

  bool operator == (const Proyecto1_accesoNivel_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_accesoNivel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_accesoNivel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_accesoNivel_pargs {
 public:


  virtual ~Proyecto1_accesoNivel_pargs() throw();
  const int32_t* num1;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_accesoNivel_result__isset {
  _Proyecto1_accesoNivel_result__isset() : success(false) {}
  bool success :1;
} _Proyecto1_accesoNivel_result__isset;

class Proyecto1_accesoNivel_result {
 public:

  Proyecto1_accesoNivel_result(const Proyecto1_accesoNivel_result&);
  Proyecto1_accesoNivel_result& operator=(const Proyecto1_accesoNivel_result&);
  Proyecto1_accesoNivel_result() : success(0) {
  }

  virtual ~Proyecto1_accesoNivel_result() throw();
  bool success;

  _Proyecto1_accesoNivel_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Proyecto1_accesoNivel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_accesoNivel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_accesoNivel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_accesoNivel_presult__isset {
  _Proyecto1_accesoNivel_presult__isset() : success(false) {}
  bool success :1;
} _Proyecto1_accesoNivel_presult__isset;

class Proyecto1_accesoNivel_presult {
 public:


  virtual ~Proyecto1_accesoNivel_presult() throw();
  bool* success;

  _Proyecto1_accesoNivel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Proyecto1_generadorEnemigos_args {
 public:

  Proyecto1_generadorEnemigos_args(const Proyecto1_generadorEnemigos_args&);
  Proyecto1_generadorEnemigos_args& operator=(const Proyecto1_generadorEnemigos_args&);
  Proyecto1_generadorEnemigos_args() {
  }

  virtual ~Proyecto1_generadorEnemigos_args() throw();

  bool operator == (const Proyecto1_generadorEnemigos_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_generadorEnemigos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_generadorEnemigos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_generadorEnemigos_pargs {
 public:


  virtual ~Proyecto1_generadorEnemigos_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_generadorEnemigos_result {
 public:

  Proyecto1_generadorEnemigos_result(const Proyecto1_generadorEnemigos_result&);
  Proyecto1_generadorEnemigos_result& operator=(const Proyecto1_generadorEnemigos_result&);
  Proyecto1_generadorEnemigos_result() {
  }

  virtual ~Proyecto1_generadorEnemigos_result() throw();

  bool operator == (const Proyecto1_generadorEnemigos_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_generadorEnemigos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_generadorEnemigos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_generadorEnemigos_presult {
 public:


  virtual ~Proyecto1_generadorEnemigos_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Proyecto1_pararGeneradorEnemigos_args {
 public:

  Proyecto1_pararGeneradorEnemigos_args(const Proyecto1_pararGeneradorEnemigos_args&);
  Proyecto1_pararGeneradorEnemigos_args& operator=(const Proyecto1_pararGeneradorEnemigos_args&);
  Proyecto1_pararGeneradorEnemigos_args() {
  }

  virtual ~Proyecto1_pararGeneradorEnemigos_args() throw();

  bool operator == (const Proyecto1_pararGeneradorEnemigos_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_pararGeneradorEnemigos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_pararGeneradorEnemigos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_pararGeneradorEnemigos_pargs {
 public:


  virtual ~Proyecto1_pararGeneradorEnemigos_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_pararGeneradorEnemigos_result {
 public:

  Proyecto1_pararGeneradorEnemigos_result(const Proyecto1_pararGeneradorEnemigos_result&);
  Proyecto1_pararGeneradorEnemigos_result& operator=(const Proyecto1_pararGeneradorEnemigos_result&);
  Proyecto1_pararGeneradorEnemigos_result() {
  }

  virtual ~Proyecto1_pararGeneradorEnemigos_result() throw();

  bool operator == (const Proyecto1_pararGeneradorEnemigos_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_pararGeneradorEnemigos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_pararGeneradorEnemigos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_pararGeneradorEnemigos_presult {
 public:


  virtual ~Proyecto1_pararGeneradorEnemigos_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Proyecto1_obtenerTamanio_args {
 public:

  Proyecto1_obtenerTamanio_args(const Proyecto1_obtenerTamanio_args&);
  Proyecto1_obtenerTamanio_args& operator=(const Proyecto1_obtenerTamanio_args&);
  Proyecto1_obtenerTamanio_args() {
  }

  virtual ~Proyecto1_obtenerTamanio_args() throw();

  bool operator == (const Proyecto1_obtenerTamanio_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_obtenerTamanio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_obtenerTamanio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_obtenerTamanio_pargs {
 public:


  virtual ~Proyecto1_obtenerTamanio_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_obtenerTamanio_result__isset {
  _Proyecto1_obtenerTamanio_result__isset() : success(false) {}
  bool success :1;
} _Proyecto1_obtenerTamanio_result__isset;

class Proyecto1_obtenerTamanio_result {
 public:

  Proyecto1_obtenerTamanio_result(const Proyecto1_obtenerTamanio_result&);
  Proyecto1_obtenerTamanio_result& operator=(const Proyecto1_obtenerTamanio_result&);
  Proyecto1_obtenerTamanio_result() : success(0) {
  }

  virtual ~Proyecto1_obtenerTamanio_result() throw();
  int32_t success;

  _Proyecto1_obtenerTamanio_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Proyecto1_obtenerTamanio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_obtenerTamanio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_obtenerTamanio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_obtenerTamanio_presult__isset {
  _Proyecto1_obtenerTamanio_presult__isset() : success(false) {}
  bool success :1;
} _Proyecto1_obtenerTamanio_presult__isset;

class Proyecto1_obtenerTamanio_presult {
 public:


  virtual ~Proyecto1_obtenerTamanio_presult() throw();
  int32_t* success;

  _Proyecto1_obtenerTamanio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Proyecto1_moverJugador_args__isset {
  _Proyecto1_moverJugador_args__isset() : num1(false), num2(false), num3(false), errores(false) {}
  bool num1 :1;
  bool num2 :1;
  bool num3 :1;
  bool errores :1;
} _Proyecto1_moverJugador_args__isset;

class Proyecto1_moverJugador_args {
 public:

  Proyecto1_moverJugador_args(const Proyecto1_moverJugador_args&);
  Proyecto1_moverJugador_args& operator=(const Proyecto1_moverJugador_args&);
  Proyecto1_moverJugador_args() : num1(0), num2(0), num3(0), errores(0) {
  }

  virtual ~Proyecto1_moverJugador_args() throw();
  int32_t num1;
  int32_t num2;
  int32_t num3;
  int32_t errores;

  _Proyecto1_moverJugador_args__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const int32_t val);

  void __set_num3(const int32_t val);

  void __set_errores(const int32_t val);

  bool operator == (const Proyecto1_moverJugador_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(num3 == rhs.num3))
      return false;
    if (!(errores == rhs.errores))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_moverJugador_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_moverJugador_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_moverJugador_pargs {
 public:


  virtual ~Proyecto1_moverJugador_pargs() throw();
  const int32_t* num1;
  const int32_t* num2;
  const int32_t* num3;
  const int32_t* errores;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_moverJugador_result__isset {
  _Proyecto1_moverJugador_result__isset() : success(false) {}
  bool success :1;
} _Proyecto1_moverJugador_result__isset;

class Proyecto1_moverJugador_result {
 public:

  Proyecto1_moverJugador_result(const Proyecto1_moverJugador_result&);
  Proyecto1_moverJugador_result& operator=(const Proyecto1_moverJugador_result&);
  Proyecto1_moverJugador_result() : success(0) {
  }

  virtual ~Proyecto1_moverJugador_result() throw();
  int32_t success;

  _Proyecto1_moverJugador_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Proyecto1_moverJugador_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_moverJugador_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_moverJugador_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_moverJugador_presult__isset {
  _Proyecto1_moverJugador_presult__isset() : success(false) {}
  bool success :1;
} _Proyecto1_moverJugador_presult__isset;

class Proyecto1_moverJugador_presult {
 public:


  virtual ~Proyecto1_moverJugador_presult() throw();
  int32_t* success;

  _Proyecto1_moverJugador_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Proyecto1_obtenerNivel_args {
 public:

  Proyecto1_obtenerNivel_args(const Proyecto1_obtenerNivel_args&);
  Proyecto1_obtenerNivel_args& operator=(const Proyecto1_obtenerNivel_args&);
  Proyecto1_obtenerNivel_args() {
  }

  virtual ~Proyecto1_obtenerNivel_args() throw();

  bool operator == (const Proyecto1_obtenerNivel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_obtenerNivel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_obtenerNivel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_obtenerNivel_pargs {
 public:


  virtual ~Proyecto1_obtenerNivel_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_obtenerNivel_result__isset {
  _Proyecto1_obtenerNivel_result__isset() : success(false) {}
  bool success :1;
} _Proyecto1_obtenerNivel_result__isset;

class Proyecto1_obtenerNivel_result {
 public:

  Proyecto1_obtenerNivel_result(const Proyecto1_obtenerNivel_result&);
  Proyecto1_obtenerNivel_result& operator=(const Proyecto1_obtenerNivel_result&);
  Proyecto1_obtenerNivel_result() : success(0) {
  }

  virtual ~Proyecto1_obtenerNivel_result() throw();
  int32_t success;

  _Proyecto1_obtenerNivel_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Proyecto1_obtenerNivel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_obtenerNivel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_obtenerNivel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_obtenerNivel_presult__isset {
  _Proyecto1_obtenerNivel_presult__isset() : success(false) {}
  bool success :1;
} _Proyecto1_obtenerNivel_presult__isset;

class Proyecto1_obtenerNivel_presult {
 public:


  virtual ~Proyecto1_obtenerNivel_presult() throw();
  int32_t* success;

  _Proyecto1_obtenerNivel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Proyecto1_guardarUsuario_args__isset {
  _Proyecto1_guardarUsuario_args__isset() : nombre(false) {}
  bool nombre :1;
} _Proyecto1_guardarUsuario_args__isset;

class Proyecto1_guardarUsuario_args {
 public:

  Proyecto1_guardarUsuario_args(const Proyecto1_guardarUsuario_args&);
  Proyecto1_guardarUsuario_args& operator=(const Proyecto1_guardarUsuario_args&);
  Proyecto1_guardarUsuario_args() : nombre() {
  }

  virtual ~Proyecto1_guardarUsuario_args() throw();
  std::string nombre;

  _Proyecto1_guardarUsuario_args__isset __isset;

  void __set_nombre(const std::string& val);

  bool operator == (const Proyecto1_guardarUsuario_args & rhs) const
  {
    if (!(nombre == rhs.nombre))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_guardarUsuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_guardarUsuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_guardarUsuario_pargs {
 public:


  virtual ~Proyecto1_guardarUsuario_pargs() throw();
  const std::string* nombre;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_guardarUsuario_result {
 public:

  Proyecto1_guardarUsuario_result(const Proyecto1_guardarUsuario_result&);
  Proyecto1_guardarUsuario_result& operator=(const Proyecto1_guardarUsuario_result&);
  Proyecto1_guardarUsuario_result() {
  }

  virtual ~Proyecto1_guardarUsuario_result() throw();

  bool operator == (const Proyecto1_guardarUsuario_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_guardarUsuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_guardarUsuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_guardarUsuario_presult {
 public:


  virtual ~Proyecto1_guardarUsuario_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Proyecto1_regresarUsuario_args__isset {
  _Proyecto1_regresarUsuario_args__isset() : numero(false) {}
  bool numero :1;
} _Proyecto1_regresarUsuario_args__isset;

class Proyecto1_regresarUsuario_args {
 public:

  Proyecto1_regresarUsuario_args(const Proyecto1_regresarUsuario_args&);
  Proyecto1_regresarUsuario_args& operator=(const Proyecto1_regresarUsuario_args&);
  Proyecto1_regresarUsuario_args() : numero(0) {
  }

  virtual ~Proyecto1_regresarUsuario_args() throw();
  int32_t numero;

  _Proyecto1_regresarUsuario_args__isset __isset;

  void __set_numero(const int32_t val);

  bool operator == (const Proyecto1_regresarUsuario_args & rhs) const
  {
    if (!(numero == rhs.numero))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_regresarUsuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_regresarUsuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_regresarUsuario_pargs {
 public:


  virtual ~Proyecto1_regresarUsuario_pargs() throw();
  const int32_t* numero;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_regresarUsuario_result__isset {
  _Proyecto1_regresarUsuario_result__isset() : success(false) {}
  bool success :1;
} _Proyecto1_regresarUsuario_result__isset;

class Proyecto1_regresarUsuario_result {
 public:

  Proyecto1_regresarUsuario_result(const Proyecto1_regresarUsuario_result&);
  Proyecto1_regresarUsuario_result& operator=(const Proyecto1_regresarUsuario_result&);
  Proyecto1_regresarUsuario_result() : success() {
  }

  virtual ~Proyecto1_regresarUsuario_result() throw();
  std::string success;

  _Proyecto1_regresarUsuario_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Proyecto1_regresarUsuario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_regresarUsuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_regresarUsuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_regresarUsuario_presult__isset {
  _Proyecto1_regresarUsuario_presult__isset() : success(false) {}
  bool success :1;
} _Proyecto1_regresarUsuario_presult__isset;

class Proyecto1_regresarUsuario_presult {
 public:


  virtual ~Proyecto1_regresarUsuario_presult() throw();
  std::string* success;

  _Proyecto1_regresarUsuario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Proyecto1_setUsuario_args__isset {
  _Proyecto1_setUsuario_args__isset() : numero(false) {}
  bool numero :1;
} _Proyecto1_setUsuario_args__isset;

class Proyecto1_setUsuario_args {
 public:

  Proyecto1_setUsuario_args(const Proyecto1_setUsuario_args&);
  Proyecto1_setUsuario_args& operator=(const Proyecto1_setUsuario_args&);
  Proyecto1_setUsuario_args() : numero(0) {
  }

  virtual ~Proyecto1_setUsuario_args() throw();
  int32_t numero;

  _Proyecto1_setUsuario_args__isset __isset;

  void __set_numero(const int32_t val);

  bool operator == (const Proyecto1_setUsuario_args & rhs) const
  {
    if (!(numero == rhs.numero))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_setUsuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_setUsuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_setUsuario_pargs {
 public:


  virtual ~Proyecto1_setUsuario_pargs() throw();
  const int32_t* numero;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_setUsuario_result {
 public:

  Proyecto1_setUsuario_result(const Proyecto1_setUsuario_result&);
  Proyecto1_setUsuario_result& operator=(const Proyecto1_setUsuario_result&);
  Proyecto1_setUsuario_result() {
  }

  virtual ~Proyecto1_setUsuario_result() throw();

  bool operator == (const Proyecto1_setUsuario_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_setUsuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_setUsuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_setUsuario_presult {
 public:


  virtual ~Proyecto1_setUsuario_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Proyecto1_obtenerUsuario_args {
 public:

  Proyecto1_obtenerUsuario_args(const Proyecto1_obtenerUsuario_args&);
  Proyecto1_obtenerUsuario_args& operator=(const Proyecto1_obtenerUsuario_args&);
  Proyecto1_obtenerUsuario_args() {
  }

  virtual ~Proyecto1_obtenerUsuario_args() throw();

  bool operator == (const Proyecto1_obtenerUsuario_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_obtenerUsuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_obtenerUsuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_obtenerUsuario_pargs {
 public:


  virtual ~Proyecto1_obtenerUsuario_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_obtenerUsuario_result__isset {
  _Proyecto1_obtenerUsuario_result__isset() : success(false) {}
  bool success :1;
} _Proyecto1_obtenerUsuario_result__isset;

class Proyecto1_obtenerUsuario_result {
 public:

  Proyecto1_obtenerUsuario_result(const Proyecto1_obtenerUsuario_result&);
  Proyecto1_obtenerUsuario_result& operator=(const Proyecto1_obtenerUsuario_result&);
  Proyecto1_obtenerUsuario_result() : success(0) {
  }

  virtual ~Proyecto1_obtenerUsuario_result() throw();
  int32_t success;

  _Proyecto1_obtenerUsuario_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Proyecto1_obtenerUsuario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_obtenerUsuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_obtenerUsuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Proyecto1_obtenerUsuario_presult__isset {
  _Proyecto1_obtenerUsuario_presult__isset() : success(false) {}
  bool success :1;
} _Proyecto1_obtenerUsuario_presult__isset;

class Proyecto1_obtenerUsuario_presult {
 public:


  virtual ~Proyecto1_obtenerUsuario_presult() throw();
  int32_t* success;

  _Proyecto1_obtenerUsuario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Proyecto1_desbloquearNivel_args__isset {
  _Proyecto1_desbloquearNivel_args__isset() : numero(false) {}
  bool numero :1;
} _Proyecto1_desbloquearNivel_args__isset;

class Proyecto1_desbloquearNivel_args {
 public:

  Proyecto1_desbloquearNivel_args(const Proyecto1_desbloquearNivel_args&);
  Proyecto1_desbloquearNivel_args& operator=(const Proyecto1_desbloquearNivel_args&);
  Proyecto1_desbloquearNivel_args() : numero(0) {
  }

  virtual ~Proyecto1_desbloquearNivel_args() throw();
  int32_t numero;

  _Proyecto1_desbloquearNivel_args__isset __isset;

  void __set_numero(const int32_t val);

  bool operator == (const Proyecto1_desbloquearNivel_args & rhs) const
  {
    if (!(numero == rhs.numero))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_desbloquearNivel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_desbloquearNivel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_desbloquearNivel_pargs {
 public:


  virtual ~Proyecto1_desbloquearNivel_pargs() throw();
  const int32_t* numero;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_desbloquearNivel_result {
 public:

  Proyecto1_desbloquearNivel_result(const Proyecto1_desbloquearNivel_result&);
  Proyecto1_desbloquearNivel_result& operator=(const Proyecto1_desbloquearNivel_result&);
  Proyecto1_desbloquearNivel_result() {
  }

  virtual ~Proyecto1_desbloquearNivel_result() throw();

  bool operator == (const Proyecto1_desbloquearNivel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_desbloquearNivel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_desbloquearNivel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_desbloquearNivel_presult {
 public:


  virtual ~Proyecto1_desbloquearNivel_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Proyecto1_graficarEnemigos_args__isset {
  _Proyecto1_graficarEnemigos_args__isset() : usuario(false) {}
  bool usuario :1;
} _Proyecto1_graficarEnemigos_args__isset;

class Proyecto1_graficarEnemigos_args {
 public:

  Proyecto1_graficarEnemigos_args(const Proyecto1_graficarEnemigos_args&);
  Proyecto1_graficarEnemigos_args& operator=(const Proyecto1_graficarEnemigos_args&);
  Proyecto1_graficarEnemigos_args() : usuario(0) {
  }

  virtual ~Proyecto1_graficarEnemigos_args() throw();
  int32_t usuario;

  _Proyecto1_graficarEnemigos_args__isset __isset;

  void __set_usuario(const int32_t val);

  bool operator == (const Proyecto1_graficarEnemigos_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_graficarEnemigos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_graficarEnemigos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_graficarEnemigos_pargs {
 public:


  virtual ~Proyecto1_graficarEnemigos_pargs() throw();
  const int32_t* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_graficarEnemigos_result {
 public:

  Proyecto1_graficarEnemigos_result(const Proyecto1_graficarEnemigos_result&);
  Proyecto1_graficarEnemigos_result& operator=(const Proyecto1_graficarEnemigos_result&);
  Proyecto1_graficarEnemigos_result() {
  }

  virtual ~Proyecto1_graficarEnemigos_result() throw();

  bool operator == (const Proyecto1_graficarEnemigos_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_graficarEnemigos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_graficarEnemigos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_graficarEnemigos_presult {
 public:


  virtual ~Proyecto1_graficarEnemigos_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Proyecto1_guardarPuntaje_args__isset {
  _Proyecto1_guardarPuntaje_args__isset() : usuario(false), nivel(false), puntaje(false) {}
  bool usuario :1;
  bool nivel :1;
  bool puntaje :1;
} _Proyecto1_guardarPuntaje_args__isset;

class Proyecto1_guardarPuntaje_args {
 public:

  Proyecto1_guardarPuntaje_args(const Proyecto1_guardarPuntaje_args&);
  Proyecto1_guardarPuntaje_args& operator=(const Proyecto1_guardarPuntaje_args&);
  Proyecto1_guardarPuntaje_args() : usuario(0), nivel(0), puntaje(0) {
  }

  virtual ~Proyecto1_guardarPuntaje_args() throw();
  int32_t usuario;
  int32_t nivel;
  int32_t puntaje;

  _Proyecto1_guardarPuntaje_args__isset __isset;

  void __set_usuario(const int32_t val);

  void __set_nivel(const int32_t val);

  void __set_puntaje(const int32_t val);

  bool operator == (const Proyecto1_guardarPuntaje_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    if (!(nivel == rhs.nivel))
      return false;
    if (!(puntaje == rhs.puntaje))
      return false;
    return true;
  }
  bool operator != (const Proyecto1_guardarPuntaje_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_guardarPuntaje_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_guardarPuntaje_pargs {
 public:


  virtual ~Proyecto1_guardarPuntaje_pargs() throw();
  const int32_t* usuario;
  const int32_t* nivel;
  const int32_t* puntaje;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_guardarPuntaje_result {
 public:

  Proyecto1_guardarPuntaje_result(const Proyecto1_guardarPuntaje_result&);
  Proyecto1_guardarPuntaje_result& operator=(const Proyecto1_guardarPuntaje_result&);
  Proyecto1_guardarPuntaje_result() {
  }

  virtual ~Proyecto1_guardarPuntaje_result() throw();

  bool operator == (const Proyecto1_guardarPuntaje_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proyecto1_guardarPuntaje_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proyecto1_guardarPuntaje_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Proyecto1_guardarPuntaje_presult {
 public:


  virtual ~Proyecto1_guardarPuntaje_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Proyecto1Client : virtual public Proyecto1If {
 public:
  Proyecto1Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  Proyecto1Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool accesoNivel(const int32_t num1);
  void send_accesoNivel(const int32_t num1);
  bool recv_accesoNivel();
  void generadorEnemigos();
  void send_generadorEnemigos();
  void recv_generadorEnemigos();
  void pararGeneradorEnemigos();
  void send_pararGeneradorEnemigos();
  void recv_pararGeneradorEnemigos();
  int32_t obtenerTamanio();
  void send_obtenerTamanio();
  int32_t recv_obtenerTamanio();
  int32_t moverJugador(const int32_t num1, const int32_t num2, const int32_t num3, const int32_t errores);
  void send_moverJugador(const int32_t num1, const int32_t num2, const int32_t num3, const int32_t errores);
  int32_t recv_moverJugador();
  int32_t obtenerNivel();
  void send_obtenerNivel();
  int32_t recv_obtenerNivel();
  void guardarUsuario(const std::string& nombre);
  void send_guardarUsuario(const std::string& nombre);
  void recv_guardarUsuario();
  void regresarUsuario(std::string& _return, const int32_t numero);
  void send_regresarUsuario(const int32_t numero);
  void recv_regresarUsuario(std::string& _return);
  void setUsuario(const int32_t numero);
  void send_setUsuario(const int32_t numero);
  void recv_setUsuario();
  int32_t obtenerUsuario();
  void send_obtenerUsuario();
  int32_t recv_obtenerUsuario();
  void desbloquearNivel(const int32_t numero);
  void send_desbloquearNivel(const int32_t numero);
  void recv_desbloquearNivel();
  void graficarEnemigos(const int32_t usuario);
  void send_graficarEnemigos(const int32_t usuario);
  void recv_graficarEnemigos();
  void guardarPuntaje(const int32_t usuario, const int32_t nivel, const int32_t puntaje);
  void send_guardarPuntaje(const int32_t usuario, const int32_t nivel, const int32_t puntaje);
  void recv_guardarPuntaje();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class Proyecto1Processor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<Proyecto1If> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (Proyecto1Processor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_accesoNivel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_generadorEnemigos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pararGeneradorEnemigos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obtenerTamanio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_moverJugador(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obtenerNivel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_guardarUsuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_regresarUsuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setUsuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obtenerUsuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_desbloquearNivel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_graficarEnemigos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_guardarPuntaje(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  Proyecto1Processor(boost::shared_ptr<Proyecto1If> iface) :
    iface_(iface) {
    processMap_["accesoNivel"] = &Proyecto1Processor::process_accesoNivel;
    processMap_["generadorEnemigos"] = &Proyecto1Processor::process_generadorEnemigos;
    processMap_["pararGeneradorEnemigos"] = &Proyecto1Processor::process_pararGeneradorEnemigos;
    processMap_["obtenerTamanio"] = &Proyecto1Processor::process_obtenerTamanio;
    processMap_["moverJugador"] = &Proyecto1Processor::process_moverJugador;
    processMap_["obtenerNivel"] = &Proyecto1Processor::process_obtenerNivel;
    processMap_["guardarUsuario"] = &Proyecto1Processor::process_guardarUsuario;
    processMap_["regresarUsuario"] = &Proyecto1Processor::process_regresarUsuario;
    processMap_["setUsuario"] = &Proyecto1Processor::process_setUsuario;
    processMap_["obtenerUsuario"] = &Proyecto1Processor::process_obtenerUsuario;
    processMap_["desbloquearNivel"] = &Proyecto1Processor::process_desbloquearNivel;
    processMap_["graficarEnemigos"] = &Proyecto1Processor::process_graficarEnemigos;
    processMap_["guardarPuntaje"] = &Proyecto1Processor::process_guardarPuntaje;
  }

  virtual ~Proyecto1Processor() {}
};

class Proyecto1ProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  Proyecto1ProcessorFactory(const ::boost::shared_ptr< Proyecto1IfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< Proyecto1IfFactory > handlerFactory_;
};

class Proyecto1Multiface : virtual public Proyecto1If {
 public:
  Proyecto1Multiface(std::vector<boost::shared_ptr<Proyecto1If> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~Proyecto1Multiface() {}
 protected:
  std::vector<boost::shared_ptr<Proyecto1If> > ifaces_;
  Proyecto1Multiface() {}
  void add(boost::shared_ptr<Proyecto1If> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool accesoNivel(const int32_t num1) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->accesoNivel(num1);
    }
    return ifaces_[i]->accesoNivel(num1);
  }

  void generadorEnemigos() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->generadorEnemigos();
    }
    ifaces_[i]->generadorEnemigos();
  }

  void pararGeneradorEnemigos() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pararGeneradorEnemigos();
    }
    ifaces_[i]->pararGeneradorEnemigos();
  }

  int32_t obtenerTamanio() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obtenerTamanio();
    }
    return ifaces_[i]->obtenerTamanio();
  }

  int32_t moverJugador(const int32_t num1, const int32_t num2, const int32_t num3, const int32_t errores) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->moverJugador(num1, num2, num3, errores);
    }
    return ifaces_[i]->moverJugador(num1, num2, num3, errores);
  }

  int32_t obtenerNivel() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obtenerNivel();
    }
    return ifaces_[i]->obtenerNivel();
  }

  void guardarUsuario(const std::string& nombre) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->guardarUsuario(nombre);
    }
    ifaces_[i]->guardarUsuario(nombre);
  }

  void regresarUsuario(std::string& _return, const int32_t numero) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->regresarUsuario(_return, numero);
    }
    ifaces_[i]->regresarUsuario(_return, numero);
    return;
  }

  void setUsuario(const int32_t numero) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setUsuario(numero);
    }
    ifaces_[i]->setUsuario(numero);
  }

  int32_t obtenerUsuario() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obtenerUsuario();
    }
    return ifaces_[i]->obtenerUsuario();
  }

  void desbloquearNivel(const int32_t numero) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->desbloquearNivel(numero);
    }
    ifaces_[i]->desbloquearNivel(numero);
  }

  void graficarEnemigos(const int32_t usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->graficarEnemigos(usuario);
    }
    ifaces_[i]->graficarEnemigos(usuario);
  }

  void guardarPuntaje(const int32_t usuario, const int32_t nivel, const int32_t puntaje) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->guardarPuntaje(usuario, nivel, puntaje);
    }
    ifaces_[i]->guardarPuntaje(usuario, nivel, puntaje);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class Proyecto1ConcurrentClient : virtual public Proyecto1If {
 public:
  Proyecto1ConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  Proyecto1ConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool accesoNivel(const int32_t num1);
  int32_t send_accesoNivel(const int32_t num1);
  bool recv_accesoNivel(const int32_t seqid);
  void generadorEnemigos();
  int32_t send_generadorEnemigos();
  void recv_generadorEnemigos(const int32_t seqid);
  void pararGeneradorEnemigos();
  int32_t send_pararGeneradorEnemigos();
  void recv_pararGeneradorEnemigos(const int32_t seqid);
  int32_t obtenerTamanio();
  int32_t send_obtenerTamanio();
  int32_t recv_obtenerTamanio(const int32_t seqid);
  int32_t moverJugador(const int32_t num1, const int32_t num2, const int32_t num3, const int32_t errores);
  int32_t send_moverJugador(const int32_t num1, const int32_t num2, const int32_t num3, const int32_t errores);
  int32_t recv_moverJugador(const int32_t seqid);
  int32_t obtenerNivel();
  int32_t send_obtenerNivel();
  int32_t recv_obtenerNivel(const int32_t seqid);
  void guardarUsuario(const std::string& nombre);
  int32_t send_guardarUsuario(const std::string& nombre);
  void recv_guardarUsuario(const int32_t seqid);
  void regresarUsuario(std::string& _return, const int32_t numero);
  int32_t send_regresarUsuario(const int32_t numero);
  void recv_regresarUsuario(std::string& _return, const int32_t seqid);
  void setUsuario(const int32_t numero);
  int32_t send_setUsuario(const int32_t numero);
  void recv_setUsuario(const int32_t seqid);
  int32_t obtenerUsuario();
  int32_t send_obtenerUsuario();
  int32_t recv_obtenerUsuario(const int32_t seqid);
  void desbloquearNivel(const int32_t numero);
  int32_t send_desbloquearNivel(const int32_t numero);
  void recv_desbloquearNivel(const int32_t seqid);
  void graficarEnemigos(const int32_t usuario);
  int32_t send_graficarEnemigos(const int32_t usuario);
  void recv_graficarEnemigos(const int32_t seqid);
  void guardarPuntaje(const int32_t usuario, const int32_t nivel, const int32_t puntaje);
  int32_t send_guardarPuntaje(const int32_t usuario, const int32_t nivel, const int32_t puntaje);
  void recv_guardarPuntaje(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
