/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica2;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.text.*;
import java.util.ArrayList;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author wolfghost
 */
public class MainActivity extends javax.swing.JFrame implements Runnable {
 final String hostName = "127.0.0.1";
 final int portNumber = 1234;
 String nombreA;
 String llaveA;
 JSONArray preA;
 JSONArray preB;
 JSONArray postA;
 JSONArray inA;
 ArrayList<String> resultadoComp;
 Socket kkSocket; 
 ListaDoble inicioL;
 PrintWriter pwa = null;
 
 int cantHojas;
 int cantRamas;
 int cantPadres;

         Thread hilo;
    /**
     * Creates new form MainActivity
     */
    public MainActivity() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        foto = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        recharge = new javax.swing.JButton();
        arbolfoto = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nombrearbol = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        alturaarbol = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nivelarbol = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ramasarbol = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nodopadre = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nodohoja = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mostrarComparar = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Conectar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Pedir Arbol");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        foto.setText("Foto");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        recharge.setText("r");
        recharge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rechargeMouseClicked(evt);
            }
        });

        arbolfoto.setText("Arbol");

        jLabel1.setText("Nombre:");

        jLabel2.setText("Altura:");

        jLabel3.setText("Nivel:");

        jLabel4.setText("Ramas:");

        jLabel5.setText("Nodos Padre:");

        jLabel6.setText("Nodos Hoja:");

        mostrarComparar.setColumns(20);
        mostrarComparar.setRows(5);
        jScrollPane1.setViewportView(mostrarComparar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(recharge)
                .addGap(28, 28, 28)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alturaarbol)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nombrearbol)
                                    .addComponent(nivelarbol)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(nodopadre))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ramasarbol))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nodohoja)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(arbolfoto, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 875, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(foto, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recharge))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(foto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(arbolfoto, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(nombrearbol))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(alturaarbol))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(nivelarbol))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(ramasarbol))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(nodopadre))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(nodohoja))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //------------------------------BOTON DE CONECTAR----------------------------------
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
               conectar();
               inicioL=new ListaDoble();       

    }//GEN-LAST:event_jButton1ActionPerformed

    //----------------------------------------BOTON PARA PEDIR UN ARBOL--------------------------------------
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     try {
         String nombre=JOptionPane.showInputDialog(null,"Ingresa el nombre del arbol");
        PrintWriter pw = new PrintWriter(kkSocket.getOutputStream(), true);
        pw.println("{\n\"tipo-operacion\":2,\n\"nombre\":\""+nombre+"\",\n\"llave-unica\":\"\",\n\"pre-orden\":[\n],\n\"post-orden\":[\n],\n\"in-orden\":[\n]\n}");     
     } catch (IOException ex) {
         System.out.println(ex.getMessage());
     }
       
    }//GEN-LAST:event_jButton2ActionPerformed

    
    //---------------------------------Boton que recarga-------------------------------------
    private void rechargeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rechargeMouseClicked
          try{
                BufferedImage bufimg=ImageIO.read(new File("Lista.png"));
               Image dimg = bufimg.getScaledInstance(foto.getWidth(), foto.getHeight(),Image.SCALE_SMOOTH);
               ImageIcon icon=new ImageIcon(dimg);
               foto.setIcon(icon);
               
               
                 bufimg=ImageIO.read(new File("Arbol.png"));
                dimg = bufimg.getScaledInstance(arbolfoto.getWidth(), arbolfoto.getHeight(),Image.SCALE_SMOOTH);
                icon=new ImageIcon(dimg);
               arbolfoto.setIcon(icon);
            }catch(IOException e){
                System.out.println(e.getMessage());
            }
    }//GEN-LAST:event_rechargeMouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
           int opcion=Integer.parseInt(jComboBox1.getSelectedItem().toString());
        NodoLista lis=inicioL.primerNodo;
        Node rai;
        
        for(int i=0;i<opcion;i++){
            lis=lis.siguiente;
        }
        rai=lis.getRaiz();
        //------------------------------arbol-------------------------------------------------
        generarImagen(rai); 
        
        rai=lis.getRaiz();
        nombrearbol.setText(lis.getNombre());
        
        rai=lis.getRaiz();
        alturaarbol.setText(String.valueOf(alturaArbol(rai)));
        
        rai=lis.getRaiz();
        nivelarbol.setText(String.valueOf(alturaArbol(rai)-1));
        
        cantHojas=0;
        rai=lis.getRaiz();
        esHoja(rai);
        nodohoja.setText(String.valueOf(cantHojas));
        
        cantRamas=0;
        rai=lis.getRaiz();
        esRama(rai);
        ramasarbol.setText(String.valueOf(cantRamas));
        
        cantPadres=0;
        rai=lis.getRaiz();
        esPadre(rai);
        nodopadre.setText(String.valueOf(cantPadres));
        
        generarLista();
        
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainActivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainActivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainActivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainActivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainActivity().setVisible(true);
            }
        });
    }

    
   //--------------------------------------------Metodo de Conectar-----------------------------
    void conectar(){
        try
            {
                inicioL=new ListaDoble();
                int item=jComboBox1.getItemCount();
                for(int i=0;i<item;i++){
                    jComboBox1.removeItemAt(0);
                }
                kkSocket = new Socket( hostName , portNumber ); /*conectar a un servidor en localhost con puerto 5000*/
                PrintWriter pw = new PrintWriter(kkSocket.getOutputStream(), true);
                pw.println("{\n\"tipo-operacion\":0,\n\"nombre\":\"\",\n\"llave-unica\":\"\",\n\"pre-orden\":[\n],\n\"post-orden\":[\n],\n\"in-orden\":[\n]\n}");                 
                escuchar();
            }catch(Exception e ){}
    


    }

    
    
    void escuchar(){
        hilo=new Thread(this);
        hilo.start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alturaarbol;
    private javax.swing.JLabel arbolfoto;
    private javax.swing.JLabel foto;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mostrarComparar;
    private javax.swing.JLabel nivelarbol;
    private javax.swing.JLabel nodohoja;
    private javax.swing.JLabel nodopadre;
    private javax.swing.JLabel nombrearbol;
    private javax.swing.JLabel ramasarbol;
    private javax.swing.JButton recharge;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while(true){            
            try{
                System.out.println("Work thread");
                try{
                String respuesta="";
                StringBuilder dat=new StringBuilder(128);
                int charsIn=-1;
                    char[] buffer=new char[1024];
                InputStream obj=kkSocket.getInputStream();
                BufferedReader br=new BufferedReader(new InputStreamReader(obj));
                while((charsIn=br.read(buffer))>-1){
                    dat.append(buffer,0,charsIn);
                }
                    
                        respuesta = dat.toString();

           if(!(respuesta.equals("Error"))){        
                //---------------------------CONVERTIR CADENA A JSONOBJECT------------------------------
               
                JSONParser parser=new JSONParser();
                JSONObject obje=null;
                try{
                    obje=(JSONObject)parser.parse(respuesta);
                }catch(ParseException e){}
                //JSONObject obje=new JSONObject(respuesta);
                int operacion=Integer.parseInt(String.valueOf(obje.get("tipo-operacion")));
                if(operacion==2){
                    preB=(JSONArray)obje.get("pre-orden"); 
                    resultadoComp=new ArrayList<String>();
                    if(preA.size()>0 && preB.size()>0){
                        comparar(preA,preB);
                        mostrarComp();
                    }
                }else{
                    preA=(JSONArray)obje.get("pre-orden"); 
                }
                nombreA=(String)obje.get("nombre");
                llaveA=(String)obje.get("llave-unica");
                postA=(JSONArray)obje.get("post-orden");
                inA=(JSONArray)obje.get("in-orden");
                //--------------------------crear arbol a partir de recorridos ----------------------------
                ArbolBinario tree=new ArbolBinario();
                int n= inA.size();
                Node root=tree.buildTree(inA, postA, n);

                //-------------------------------------------Fecha y hora---------------------------
                Date date=new Date();
                DateFormat hour=new SimpleDateFormat("HH:mm:ss");
                String hora=hour.format(date);
                
                DateFormat fec=new SimpleDateFormat("dd/MM/yyyy");
                String fecha=fec.format(date);
                inicioL.insertarNodo( nombreA, llaveA, fecha, hora, root);
                //----------------------------------------Agregar al Combobox-----------------------
                if(jComboBox1.getItemCount()==0){
                    jComboBox1.addItem("0");
                }else{
                    int ultimo=inicioL.ultimoNodo.id;
                    jComboBox1.addItem(String.valueOf(ultimo));
                }
                generarLista();
                
                //System.out.println("PreOrden:");
                //tree.preOrden(root);
            }
     kkSocket = new Socket( hostName , portNumber ); /*conectar a un servidor en localhost con puerto 5000*/
                }catch(Exception e){
                    System.out.println("error :" +e.getMessage());
                }
                Thread.sleep(1000);
            }catch(InterruptedException e){System.out.println(e.getMessage());}
        }
    }
    
    //---------------------------------------Generar Arbol----------------------------------------
    void generarImagen(Node node){
        FileWriter fichero = null;
        try{
             fichero = new FileWriter( "Arbol.dot");
             pwa = new PrintWriter(fichero);
             pwa.println("digraph G{");
             pwa.println("subgraph matriz{");
             mostrarArbol(node);
             pwa.println("\n}\n}");
             fichero.close();
             String [] cmd = {"dot","-Tpng", "Arbol.dot","-o","Arbol.png"};
             Runtime.getRuntime().exec(cmd); 
        }catch(Exception e){
        System.out.println(e.getMessage());}
    }
    
    void mostrarArbol(Node node){
        if(node==null) return;
        pwa.println(String.valueOf(node.carnet)+";\n");
        if(node.izquierda!=null)pwa.println(String.valueOf(node.carnet)+"->"+String.valueOf(node.izquierda.carnet)+";\n");
        if(node.derecha!=null)pwa.println(String.valueOf(node.carnet)+"->"+String.valueOf(node.derecha.carnet)+";\n");
        mostrarArbol(node.izquierda);
        mostrarArbol(node.derecha);
        
    }

   //-------------------------------------------Graficar Lista doblemente enlazada-----------------
    void generarLista(){
        NodoLista aux=inicioL.primerNodo;
        FileWriter fichero = null;
        PrintWriter pw = null;
        try{
             fichero = new FileWriter( "Lista.dot");
             pw = new PrintWriter(fichero);
             pw.println("digraph G{");
             pw.println("subgraph matriz{");
             while(aux!=null){
                 if(aux!=inicioL.ultimoNodo){
                     int selec=Integer.parseInt(jComboBox1.getSelectedItem().toString());
                     if(selec!=aux.getId())
                        pw.println(aux.getId()+"[shape=\"square\",label=\"ID: "+aux.getId()+"\nNombre: "+aux.getNombre()+"\nFecha: "+aux.getFecha()+
                      "\nHora: "+aux.getHora()+"\"];");
                     else
                       pw.println(aux.getId()+"[shape=\"square\",color=\"red\",label=\"ID: "+aux.getId()+"\nNombre: "+aux.getNombre()+"\nFecha: "+aux.getFecha()+
                      "\nHora: "+aux.getHora()+"\"];");
                     
                    pw.println(aux.getId()+"->"+aux.getSiguiente().getId()+";");
                    pw.println(aux.getSiguiente().getId()+"->"+aux.getId()+";");
                 }else if(aux==inicioL.primerNodo || aux==inicioL.ultimoNodo){
                     int selec=Integer.parseInt(jComboBox1.getSelectedItem().toString());
                     if(selec!=aux.getId())
                        pw.println(aux.getId()+"[shape=\"square\",label=\"ID: "+aux.getId()+"\nNombre: "+aux.getNombre()+"\nFecha: "+aux.getFecha()+
                      "\nHora: "+aux.getHora()+"\"];");
                     else
                       pw.println(aux.getId()+"[shape=\"square\",color=\"red\",label=\"ID: "+aux.getId()+"\nNombre: "+aux.getNombre()+"\nFecha: "+aux.getFecha()+
                      "\nHora: "+aux.getHora()+"\"];");
                 }  
                aux=aux.getSiguiente();
             }
             pw.println("\n}\n}");
             fichero.close();
                String [] cmd = {"dot","-Tpng", "Lista.dot","-o","Lista.png"};
                Runtime.getRuntime().exec(cmd); 
        }catch(Exception e){}     
        showImage();
    }
    
    void showImage(){
                    try{
                BufferedImage bufimg=ImageIO.read(new File("Lista.png"));
               Image dimg = bufimg.getScaledInstance(foto.getWidth(), foto.getHeight(),Image.SCALE_SMOOTH);
               ImageIcon icon=new ImageIcon(dimg);
               icon.getImage().flush();
               foto.setIcon(icon);

            }catch(IOException e){
                System.out.println(e.getMessage());
            }
    }
    
//---------------------------------------------OPERACIONES CON EL ARBOL------------------------------------------
    int alturaArbol(Node node){
        int alturaiz=0;
        int alturade=0;
        if(node==null) return 0;
        alturaiz=alturaArbol(node.izquierda);
        alturade=alturaArbol(node.derecha);
        if(alturade>alturaiz) return alturade+1;
        else return alturaiz+1;
    }

    void esHoja(Node node){
        if(node==null) return;
        if(!(node.derecha!=null) && !(node.izquierda!=null)) cantHojas++;
        esHoja(node.izquierda);
        esHoja(node.derecha);
    }
    
    void esRama(Node node){
        if(node==null) return;
        if(node.derecha!=null) cantRamas++;
        if(node.izquierda!=null) cantRamas++;
        
        esRama(node.izquierda);
        esRama(node.derecha);
    }
    
    void esPadre(Node node){
        if(node==null)return;
        if(node.izquierda!=null && node.derecha!=null) cantPadres++;
        esPadre(node.izquierda);
        esPadre(node.derecha);
    }

    void comparar(JSONArray datoA,JSONArray datoB){
        mostrarComparar.setText("");
        Iterator ia;
        ia=datoA.iterator();
        while(ia.hasNext()){
            boolean encontrado=false;
            JSONObject innerObj=(JSONObject)ia.next();
            String carnet=String.valueOf(innerObj.get("carnet"));
            String nombre=String.valueOf(innerObj.get("Nombre"));
            String nota=String.valueOf(innerObj.get("Nota"));
            Iterator ib;
            ib=datoB.iterator();
            
            while(ib.hasNext()){
                JSONObject innerObj2=(JSONObject)ib.next();
                String carnet2=String.valueOf(innerObj2.get("carnet"));
                String nombre2=String.valueOf(innerObj2.get("Nombre"));
                String nota2=String.valueOf(innerObj2.get("Nota"));
                if(carnet.equals(carnet2)){
                    if(!(nombre2.equals(nombre)) || !(nota.equals(nota2))){ resultadoComp.add("El carnet: "+carnet+" cambio sus valores a Nombre: "+nombre2+",Nota: "+nota2+"\n");
                    encontrado=true;
                    }else encontrado=true;
                }
            }
            if(encontrado==false)  resultadoComp.add("El carnet: "+carnet+" fue eliminado \n");
        }
    }

    void mostrarComp(){
        if(resultadoComp.size()==0) mostrarComparar.setText("Sin cambios");
        else{
            for(int i=0;i<resultadoComp.size();i++){
                mostrarComparar.append(resultadoComp.get(i));
            }
        }
    }
}
